(globalThis.webpackChunk = globalThis.webpackChunk || []).push([
    [143], {
        3265: () => {
            var e, t = ["scroll", "wheel", "touchstart", "touchmove", "touchenter", "touchend", "touchleave", "mouseout", "mouseleave", "mouseup", "mousedown", "mousemove", "mouseenter", "mousewheel", "mouseover"];
            if (function() {
                    var e = !1;
                    try {
                        var t = Object.defineProperty({}, "passive", {
                            get: function() {
                                e = !0
                            }
                        });
                        window.addEventListener("test", null, t), window.removeEventListener("test", null, t)
                    } catch (e) {}
                    return e
                }()) {
                var a = EventTarget.prototype.addEventListener;
                e = a, EventTarget.prototype.addEventListener = function(a, i, s) {
                    var r, o = "object" == typeof s && null !== s,
                        n = o ? s.capture : s;
                    (s = o ? function(e) {
                        var t = Object.getOwnPropertyDescriptor(e, "passive");
                        return t && !0 !== t.writable && void 0 === t.set ? Object.assign({}, e) : e
                    }(s) : {}).passive = void 0 !== (r = s.passive) ? r : -1 !== t.indexOf(a) && !0, s.capture = void 0 !== n && n, e.call(this, a, i, s)
                }, EventTarget.prototype.addEventListener._original = e
            }
        },
        224: (e, t) => {
            "use strict";
            t.Z = {
                el: {
                    colorpicker: {
                        confirm: "OK",
                        clear: "Clear"
                    },
                    datepicker: {
                        now: "Now",
                        today: "Today",
                        cancel: "Cancel",
                        clear: "Clear",
                        confirm: "OK",
                        selectDate: "Select date",
                        selectTime: "Select time",
                        startDate: "Start Date",
                        startTime: "Start Time",
                        endDate: "End Date",
                        endTime: "End Time",
                        prevYear: "Previous Year",
                        nextYear: "Next Year",
                        prevMonth: "Previous Month",
                        nextMonth: "Next Month",
                        year: "",
                        month1: "January",
                        month2: "February",
                        month3: "March",
                        month4: "April",
                        month5: "May",
                        month6: "June",
                        month7: "July",
                        month8: "August",
                        month9: "September",
                        month10: "October",
                        month11: "November",
                        month12: "December",
                        week: "week",
                        weeks: {
                            sun: "Sun",
                            mon: "Mon",
                            tue: "Tue",
                            wed: "Wed",
                            thu: "Thu",
                            fri: "Fri",
                            sat: "Sat"
                        },
                        months: {
                            jan: "Jan",
                            feb: "Feb",
                            mar: "Mar",
                            apr: "Apr",
                            may: "May",
                            jun: "Jun",
                            jul: "Jul",
                            aug: "Aug",
                            sep: "Sep",
                            oct: "Oct",
                            nov: "Nov",
                            dec: "Dec"
                        }
                    },
                    select: {
                        loading: "Loading",
                        noMatch: "No matching data",
                        noData: "데이터 없음",
                        placeholder: "Select"
                    },
                    cascader: {
                        noMatch: "No matching data",
                        loading: "Loading",
                        placeholder: "Select",
                        noData: "데이터 없음"
                    },
                    pagination: {
                        goto: "Go to",
                        pagesize: "/페이지",
                        total: "총 {total} 개",
                        pageClassifier: ""
                    },
                    messagebox: {
                        title: "Message",
                        confirm: "OK",
                        cancel: "Cancel",
                        error: "Illegal input"
                    },
                    upload: {
                        deleteTip: "press delete to remove",
                        delete: "Delete",
                        preview: "Preview",
                        continue: "Continue"
                    },
                    table: {
                        emptyText: "데이터 없음",
                        confirmFilter: "Confirm",
                        resetFilter: "Reset",
                        clearFilter: "All",
                        sumText: "Sum"
                    },
                    tree: {
                        emptyText: "데이터 없음"
                    },
                    transfer: {
                        noMatch: "No matching data",
                        noData: "데이터 없음",
                        titles: ["List 1", "List 2"],
                        filterPlaceholder: "Enter keyword",
                        noCheckedFormat: "{total} items",
                        hasCheckedFormat: "{checked}/{total} checked"
                    },
                    image: {
                        error: "FAILED"
                    },
                    pageHeader: {
                        title: "Back"
                    },
                    popconfirm: {
                        confirmButtonText: "Yes",
                        cancelButtonText: "No"
                    },
                    empty: {
                        description: "데이터 없음"
                    }
                }
            }
        },
        9676: function(e, t) {
            ! function(e) {
                "use strict";
                var t = function(e) {
                        return function(t) {
                            var a = e(t);
                            return t.add(a), a
                        }
                    },
                    a = function(e) {
                        return function(t, a) {
                            return e.set(t, a), a
                        }
                    },
                    i = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    s = 536870912,
                    r = 2 * s,
                    o = function(e, t) {
                        return function(a) {
                            var o = t.get(a),
                                n = void 0 === o ? a.size : o < r ? o + 1 : 0;
                            if (!a.has(n)) return e(a, n);
                            if (a.size < s) {
                                for (; a.has(n);) n = Math.floor(Math.random() * r);
                                return e(a, n)
                            }
                            if (a.size > i) throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                            for (; a.has(n);) n = Math.floor(Math.random() * i);
                            return e(a, n)
                        }
                    },
                    n = new WeakMap,
                    d = a(n),
                    l = o(d, n),
                    c = t(l);
                e.addUniqueNumber = c, e.generateUniqueNumber = l, Object.defineProperty(e, "__esModule", {
                    value: !0
                })
            }(t)
        },
        5850: (e, t, a) => {
            "use strict";
            a.r(t)
        },
        5525: (e, t, a) => {
            "use strict";
            a.d(t, {
                Zi: () => o,
                iK: () => n
            });
            var i = a(9676);
            let s = null;
            const r = ((e, t) => () => {
                    if (null !== s) return s;
                    const a = new Blob([t], {
                            type: "application/javascript; charset=utf-8"
                        }),
                        i = URL.createObjectURL(a);
                    return s = e(i), s.setTimeout((() => URL.revokeObjectURL(i)), 0), s
                })((e => {
                    const t = new Map([
                            [0, () => {}]
                        ]),
                        a = new Map([
                            [0, () => {}]
                        ]),
                        s = new Map,
                        r = new Worker(e);
                    r.addEventListener("message", (({
                        data: e
                    }) => {
                        if (void 0 !== (i = e).method && "call" === i.method) {
                            const {
                                params: {
                                    timerId: i,
                                    timerType: r
                                }
                            } = e;
                            if ("interval" === r) {
                                const e = t.get(i);
                                if ("number" == typeof e) {
                                    const t = s.get(e);
                                    if (void 0 === t || t.timerId !== i || t.timerType !== r) throw new Error("The timer is in an undefined state.")
                                } else {
                                    if (void 0 === e) throw new Error("The timer is in an undefined state.");
                                    e()
                                }
                            } else if ("timeout" === r) {
                                const e = a.get(i);
                                if ("number" == typeof e) {
                                    const t = s.get(e);
                                    if (void 0 === t || t.timerId !== i || t.timerType !== r) throw new Error("The timer is in an undefined state.")
                                } else {
                                    if (void 0 === e) throw new Error("The timer is in an undefined state.");
                                    e(), a.delete(i)
                                }
                            }
                        } else {
                            if (!(e => null === e.error && "number" == typeof e.id)(e)) {
                                const {
                                    error: {
                                        message: t
                                    }
                                } = e;
                                throw new Error(t)
                            } {
                                const {
                                    id: i
                                } = e, r = s.get(i);
                                if (void 0 === r) throw new Error("The timer is in an undefined state.");
                                const {
                                    timerId: o,
                                    timerType: n
                                } = r;
                                s.delete(i), "interval" === n ? t.delete(o) : a.delete(o)
                            }
                        }
                        var i
                    }));
                    return {
                        clearInterval: e => {
                            const a = (0, i.generateUniqueNumber)(s);
                            s.set(a, {
                                timerId: e,
                                timerType: "interval"
                            }), t.set(e, a), r.postMessage({
                                id: a,
                                method: "clear",
                                params: {
                                    timerId: e,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: e => {
                            const t = (0, i.generateUniqueNumber)(s);
                            s.set(t, {
                                timerId: e,
                                timerType: "timeout"
                            }), a.set(e, t), r.postMessage({
                                id: t,
                                method: "clear",
                                params: {
                                    timerId: e,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: (e, a) => {
                            const s = (0, i.generateUniqueNumber)(t);
                            return t.set(s, (() => {
                                e(), "function" == typeof t.get(s) && r.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: a,
                                        now: performance.now(),
                                        timerId: s,
                                        timerType: "interval"
                                    }
                                })
                            })), r.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: a,
                                    now: performance.now(),
                                    timerId: s,
                                    timerType: "interval"
                                }
                            }), s
                        },
                        setTimeout: (e, t) => {
                            const s = (0, i.generateUniqueNumber)(a);
                            return a.set(s, e), r.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: t,
                                    now: performance.now(),
                                    timerId: s,
                                    timerType: "timeout"
                                }
                            }), s
                        }
                    }
                }), '(()=>{"use strict";const e=new Map,t=new Map,r=(e,t)=>{let r,o;const i=performance.now();r=i,o=e-Math.max(0,i-t);return{expected:r+o,remainingDelay:o}},o=(e,t,r,i)=>{const s=performance.now();s>r?postMessage({id:null,method:"call",params:{timerId:t,timerType:i}}):e.set(t,setTimeout(o,r-s,e,t,r,i))};addEventListener("message",(i=>{let{data:s}=i;try{if("clear"===s.method){const{id:r,params:{timerId:o,timerType:i}}=s;if("interval"===i)(t=>{const r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)})(o),postMessage({error:null,id:r});else{if("timeout"!==i)throw new Error(\'The given type "\'.concat(i,\'" is not supported\'));(e=>{const r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)})(o),postMessage({error:null,id:r})}}else{if("set"!==s.method)throw new Error(\'The given method "\'.concat(s.method,\'" is not supported\'));{const{params:{delay:i,now:n,timerId:a,timerType:d}}=s;if("interval"===d)((t,i,s)=>{const{expected:n,remainingDelay:a}=r(t,s);e.set(i,setTimeout(o,a,e,i,n,"interval"))})(i,a,n);else{if("timeout"!==d)throw new Error(\'The given type "\'.concat(d,\'" is not supported\'));((e,i,s)=>{const{expected:n,remainingDelay:a}=r(e,s);t.set(i,setTimeout(o,a,t,i,n,"timeout"))})(i,a,n)}}}}catch(e){postMessage({error:{message:e.message},id:s.id,result:null})}}))})();'),
                o = (e, t) => r().setInterval(e, t),
                n = (e, t) => r().setTimeout(e, t)
        },
        1326: (e, t, a) => {
            "use strict";
            var i = a(7782),
                s = a.n(i),
                r = a(5137),
                o = a.n(r),
                n = a(1885),
                d = a(6203),
                l = a(3205),
                c = a.n(l),
                u = a(224),
                h = a(4353),
                p = a(5525),
                m = (a(3265), "VRCX 2022.03.13");
            var g = new class {
                execute(e, t, a = null) {
                    return new Promise(((i, s) => {
                        SQLite.Execute(((t, a) => {
                            null !== t ? s(t) : null === a ? i() : e(a)
                        }), t, a)
                    }))
                }
                executeNonQuery(e, t = null) {
                    return SQLite.ExecuteNonQuery(e, t)
                }
            };

            function f(e) {
                return String(e).toLowerCase()
            }
            window.sqliteService = g;
            class v {
                remove(e) {
                    var t = f(e);
                    return SharedVariable.Remove(t)
                }
                getString(e, t = null) {
                    var a = f(e),
                        i = SharedVariable.Get(a);
                    return null === i ? t : i
                }
                setString(e, t) {
                    var a = f(e),
                        i = String(t);
                    SharedVariable.Set(a, i)
                }
                getBool(e, t = null) {
                    var a = this.getString(e, null);
                    return null === a ? t : "true" === a
                }
                setBool(e, t) {
                    this.setString(e, t ? "true" : "false")
                }
                getInt(e, t = null) {
                    var a = this.getString(e, null);
                    return null === a ? t : (a = parseInt(a, 10), !0 === isNaN(a) ? t : a)
                }
                setInt(e, t) {
                    this.setString(e, t)
                }
                getFloat(e, t = null) {
                    var a = this.getString(e, null);
                    return null === a ? t : (a = parseFloat(a), !0 === isNaN(a) ? t : a)
                }
                setFloat(e, t) {
                    this.setString(e, t)
                }
                getObject(e, t = null) {
                    var a = this.getString(e, null);
                    if (null === a) return t;
                    try {
                        a = JSON.parse(a)
                    } catch (e) {}
                    return a !== Object(a) ? t : a
                }
                setObject(e, t) {
                    this.setString(e, JSON.stringify(t))
                }
                getArray(e, t = null) {
                    var a = this.getObject(e, null);
                    return !1 === Array.isArray(a) ? t : a
                }
                setArray(e, t) {
                    this.setObject(e, t)
                }
            }
            var y = new v;
            window.sharedRepository = y;
            var I = new Set;

            function b(e) {
                return `config:${String(e).toLowerCase()}`
            }
            async function T() {
                if (I.size > 0) try {
                    await g.executeNonQuery("BEGIN");
                    try {
                        for (var e of I) {
                            var t = y.getString(e);
                            null === t ? await g.executeNonQuery("DELETE FROM configs WHERE `key` = @key", {
                                "@key": e
                            }) : await g.executeNonQuery("INSERT OR REPLACE INTO configs (`key`, `value`) VALUES (@key, @value)", {
                                "@key": e,
                                "@value": t
                            })
                        }
                        I.clear()
                    } finally {
                        await g.executeNonQuery("COMMIT")
                    }
                } catch (e) {
                    console.error(e)
                }
                setTimeout(T, 100)
            }
            var w = new class extends v {
                async init() {
                    await g.executeNonQuery("CREATE TABLE IF NOT EXISTS configs (`key` TEXT PRIMARY KEY, `value` TEXT)"), await g.execute((([e, t]) => y.setString(e, t)), "SELECT `key`, `value` FROM configs"), T()
                }
                remove(e) {
                    var t = b(e);
                    y.remove(t), I.add(t)
                }
                getString(e, t = null) {
                    var a = b(e);
                    return y.getString(a, t)
                }
                setString(e, t) {
                    var a = b(e),
                        i = String(t);
                    y.setString(a, i), I.add(a)
                }
            };
            window.configRepository = w;
            var C = new class {
                clearCookies() {
                    return WebApi.ClearCookies()
                }
                getCookies() {
                    return WebApi.GetCookies()
                }
                setCookies(e) {
                    return WebApi.SetCookies(e)
                }
                execute(e) {
                    return new Promise(((t, a) => {
                        WebApi.Execute(e, ((e, i) => {
                            null === e ? t(i) : a(e)
                        }))
                    }))
                }
            };
            window.webApiService = C;
            var R = new class {
                parseRawGameLog(e, t, a) {
                    var i = {
                        dt: e,
                        type: t
                    };
                    switch (t) {
                        case "location":
                            i.location = a[0], i.worldName = a[1];
                            break;
                        case "location-destination":
                            i.location = a[0];
                            break;
                        case "player-joined":
                        case "player-left":
                        case "portal-spawn":
                            i.userDisplayName = a[0];
                            break;
                        case "notification":
                            i.json = a[0];
                            break;
                        case "event":
                            i.event = a[0];
                            break;
                        case "video-play":
                            i.videoUrl = a[0], i.displayName = a[1];
                            break;
                        case "video-sync":
                            i.timestamp = a[0];
                            break;
                        case "vrcx":
                            i.data = a[0];
                            break;
                        case "api-request":
                            i.url = a[0];
                            break;
                        case "photon-id":
                            i.displayName = a[0], i.photonId = a[1]
                    }
                    return i
                }
                async getAll() {
                    for (var e = [], t = !1; !t;) {
                        var a = await LogWatcher.Get();
                        for (var [i, s, r, ...o] of a) {
                            var n = this.parseRawGameLog(s, r, o);
                            e.push(n)
                        }
                        0 === a.length && (t = !0)
                    }
                    return e
                }
                async setDateTill(e) {
                    await LogWatcher.SetDateTill(e)
                }
                async reset() {
                    await LogWatcher.Reset()
                }
            };
            window.gameLogService = R;
            const S = (new TextEncoder).encode("https://github.com/pypy-vrc/VRCX");

            function D(e) {
                const t = (new TextEncoder).encode(e);
                let a = t;
                return e.length < 32 && (a = new Uint8Array(32), a.set(t), a.set(S.slice(e.length, 32), e.length)), a.slice(0, 32)
            }
            const E = {
                decrypt: async function(e, t) {
                    let a = (e => {
                        const t = e.match(/.{1,2}/g);
                        return t ? new Uint8Array(t.map((e => parseInt(e, 16)))) : null
                    })(e);
                    if (!a) return "";
                    let i = await window.crypto.subtle.importKey("raw", D(t), {
                            name: "AES-GCM",
                            length: 256
                        }, !0, ["decrypt"]),
                        s = await window.crypto.subtle.decrypt({
                            name: "AES-GCM",
                            iv: a.slice(0, 12)
                        }, i, a.slice(12));
                    return (new TextDecoder).decode(new Uint8Array(s))
                },
                encrypt: async function(e, t) {
                    let a = window.crypto.getRandomValues(new Uint8Array(12)),
                        i = await window.crypto.subtle.importKey("raw", D(t), {
                            name: "AES-GCM",
                            length: 256
                        }, !0, ["encrypt"]),
                        s = await window.crypto.subtle.encrypt({
                            name: "AES-GCM",
                            iv: a
                        }, i, (new TextEncoder).encode(e)),
                        r = new Uint8Array(s),
                        o = new Uint8Array(a.length + r.byteLength);
                    return o.set(a, 0), o.set(r, a.length), o.reduce(((e, t) => e + t.toString(16).padStart(2, "0")), "")
                }
            };
            class A {
                setmaxTableSize(e) {
                    A.maxTableSize = e
                }
                async initUserTables(e) {
                    A.userId = e, A.userPrefix = e.replaceAll("-", "").replaceAll("_", ""), await g.executeNonQuery(`CREATE TABLE IF NOT EXISTS ${A.userPrefix}_feed_gps (id INTEGER PRIMARY KEY, created_at TEXT, user_id TEXT, display_name TEXT, location TEXT, world_name TEXT, previous_location TEXT, time INTEGER)`), await g.executeNonQuery(`CREATE TABLE IF NOT EXISTS ${A.userPrefix}_feed_status (id INTEGER PRIMARY KEY, created_at TEXT, user_id TEXT, display_name TEXT, status TEXT, status_description TEXT, previous_status TEXT, previous_status_description TEXT)`), await g.executeNonQuery(`CREATE TABLE IF NOT EXISTS ${A.userPrefix}_feed_avatar (id INTEGER PRIMARY KEY, created_at TEXT, user_id TEXT, display_name TEXT, owner_id TEXT, avatar_name TEXT, current_avatar_image_url TEXT, current_avatar_thumbnail_image_url TEXT, previous_current_avatar_image_url TEXT, previous_current_avatar_thumbnail_image_url TEXT)`), await g.executeNonQuery(`CREATE TABLE IF NOT EXISTS ${A.userPrefix}_feed_online_offline (id INTEGER PRIMARY KEY, created_at TEXT, user_id TEXT, display_name TEXT, type TEXT, location TEXT, world_name TEXT, time INTEGER)`), await g.executeNonQuery(`CREATE TABLE IF NOT EXISTS ${A.userPrefix}_friend_log_current (user_id TEXT PRIMARY KEY, display_name TEXT, trust_level TEXT)`), await g.executeNonQuery(`CREATE TABLE IF NOT EXISTS ${A.userPrefix}_friend_log_history (id INTEGER PRIMARY KEY, created_at TEXT, type TEXT, user_id TEXT, display_name TEXT, previous_display_name TEXT, trust_level TEXT, previous_trust_level TEXT)`), await g.executeNonQuery(`CREATE TABLE IF NOT EXISTS ${A.userPrefix}_notifications (id TEXT PRIMARY KEY, created_at TEXT, type TEXT, sender_user_id TEXT, sender_username TEXT, receiver_user_id TEXT, message TEXT, world_id TEXT, world_name TEXT, image_url TEXT, invite_message TEXT, request_message TEXT, response_message TEXT, expired INTEGER)`), await g.executeNonQuery(`CREATE TABLE IF NOT EXISTS ${A.userPrefix}_moderation (user_id TEXT PRIMARY KEY, updated_at TEXT, display_name TEXT, block INTEGER, mute INTEGER)`), await g.executeNonQuery("CREATE TABLE IF NOT EXISTS memos (user_id TEXT PRIMARY KEY, edited_at TEXT, memo TEXT)")
                }
                async initTables() {
                    await g.executeNonQuery("CREATE TABLE IF NOT EXISTS gamelog_location (id INTEGER PRIMARY KEY, created_at TEXT, location TEXT, world_id TEXT, world_name TEXT, time INTEGER, UNIQUE(created_at, location))"), await g.executeNonQuery("CREATE TABLE IF NOT EXISTS gamelog_join_leave (id INTEGER PRIMARY KEY, created_at TEXT, type TEXT, display_name TEXT, location TEXT, user_id TEXT, time INTEGER, UNIQUE(created_at, type, display_name))"), await g.executeNonQuery("CREATE TABLE IF NOT EXISTS gamelog_portal_spawn (id INTEGER PRIMARY KEY, created_at TEXT, display_name TEXT, location TEXT, user_id TEXT, instance_id TEXT, world_name TEXT, UNIQUE(created_at, display_name))"), await g.executeNonQuery("CREATE TABLE IF NOT EXISTS gamelog_video_play (id INTEGER PRIMARY KEY, created_at TEXT, video_url TEXT, video_name TEXT, video_id TEXT, location TEXT, display_name TEXT, user_id TEXT, UNIQUE(created_at, video_url))"), await g.executeNonQuery("CREATE TABLE IF NOT EXISTS gamelog_event (id INTEGER PRIMARY KEY, created_at TEXT, data TEXT, UNIQUE(created_at, data))")
                }
                async getFeedDatabase() {
                    var e = [],
                        t = new Date;
                    t.setDate(t.getDate() - 1);
                    var a = t.toJSON();
                    await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            userId: t[2],
                            displayName: t[3],
                            type: "GPS",
                            location: t[4],
                            worldName: t[5],
                            previousLocation: t[6],
                            time: t[7]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM ${A.userPrefix}_feed_gps WHERE created_at >= date('${a}') ORDER BY id DESC`), await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            userId: t[2],
                            displayName: t[3],
                            type: "Status",
                            status: t[4],
                            statusDescription: t[5],
                            previousStatus: t[6],
                            previousStatusDescription: t[7]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM ${A.userPrefix}_feed_status WHERE created_at >= date('${a}') ORDER BY id DESC`), await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            userId: t[2],
                            displayName: t[3],
                            type: "Avatar",
                            ownerId: t[4],
                            avatarName: t[5],
                            currentAvatarImageUrl: t[6],
                            currentAvatarThumbnailImageUrl: t[7],
                            previousCurrentAvatarImageUrl: t[8],
                            previousCurrentAvatarThumbnailImageUrl: t[9]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM ${A.userPrefix}_feed_avatar WHERE created_at >= date('${a}') ORDER BY id DESC`), await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            userId: t[2],
                            displayName: t[3],
                            type: t[4],
                            location: t[5],
                            worldName: t[6],
                            time: t[7]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM ${A.userPrefix}_feed_online_offline WHERE created_at >= date('${a}') ORDER BY id DESC`);
                    return e.sort((function(e, t) {
                        var a = e.created_at,
                            i = t.created_at;
                        return a < i ? -1 : a > i ? 1 : 0
                    })), e
                }
                begin() {
                    g.executeNonQuery("BEGIN")
                }
                commit() {
                    g.executeNonQuery("COMMIT")
                }
                async getMemo(e) {
                    var t = {};
                    return await g.execute((e => {
                        t = {
                            userId: e[0],
                            editedAt: e[1],
                            memo: e[2]
                        }
                    }), "SELECT * FROM memos WHERE user_id = @user_id", {
                        "@user_id": e
                    }), t
                }
                setMemo(e) {
                    g.executeNonQuery("INSERT OR REPLACE INTO memos (user_id, edited_at, memo) VALUES (@user_id, @edited_at, @memo)", {
                        "@user_id": e.userId,
                        "@edited_at": e.editedAt,
                        "@memo": e.memo
                    })
                }
                deleteMemo(e) {
                    g.executeNonQuery("DELETE FROM memos WHERE user_id = @user_id", {
                        "@user_id": e
                    })
                }
                async getFriendLogCurrent() {
                    var e = [];
                    return await g.execute((t => {
                        var a = {
                            userId: t[0],
                            displayName: t[1],
                            trustLevel: t[2]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM ${A.userPrefix}_friend_log_current`), e
                }
                setFriendLogCurrent(e) {
                    g.executeNonQuery(`INSERT OR REPLACE INTO ${A.userPrefix}_friend_log_current (user_id, display_name, trust_level) VALUES (@user_id, @display_name, @trust_level)`, {
                        "@user_id": e.userId,
                        "@display_name": e.displayName,
                        "@trust_level": e.trustLevel
                    })
                }
                setFriendLogCurrentArray(e) {
                    if (0 !== e.length) {
                        var t = "",
                            a = ["userId", "displayName", "trustLevel"];
                        for (var i of e) {
                            var s = {};
                            for (var r of a) "string" == typeof i[r] ? s[r] = i[r].replace(/'/g, "''") : s[r] = "";
                            t += `('${s.userId}', '${s.displayName}', '${s.trustLevel}'), `
                        }
                        t = t.slice(0, -2), g.executeNonQuery(`INSERT OR REPLACE INTO ${A.userPrefix}_friend_log_current (user_id, display_name, trust_level) VALUES ${t}`)
                    }
                }
                deleteFriendLogCurrent(e) {
                    g.executeNonQuery(`DELETE FROM ${A.userPrefix}_friend_log_current WHERE user_id = @user_id`, {
                        "@user_id": e
                    })
                }
                async getFriendLogHistory() {
                    var e = [];
                    return await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            type: t[2],
                            userId: t[3],
                            displayName: t[4]
                        };
                        "DisplayName" === a.type ? a.previousDisplayName = t[5] : "TrustLevel" === a.type && (a.trustLevel = t[6], a.previousTrustLevel = t[7]), e.unshift(a)
                    }), `SELECT * FROM ${A.userPrefix}_friend_log_history`), e
                }
                addFriendLogHistory(e) {
                    g.executeNonQuery(`INSERT OR IGNORE INTO ${A.userPrefix}_friend_log_history (created_at, type, user_id, display_name, previous_display_name, trust_level, previous_trust_level) VALUES (@created_at, @type, @user_id, @display_name, @previous_display_name, @trust_level, @previous_trust_level)`, {
                        "@created_at": e.created_at,
                        "@type": e.type,
                        "@user_id": e.userId,
                        "@display_name": e.displayName,
                        "@previous_display_name": e.previousDisplayName,
                        "@trust_level": e.trustLevel,
                        "@previous_trust_level": e.previousTrustLevel
                    })
                }
                addFriendLogHistoryArray(e) {
                    if (0 !== e.length) {
                        for (var t = "", a = ["created_at", "type", "userId", "displayName", "previousDisplayName", "trustLevel", "previousTrustLevel"], i = 0; i < e.length; ++i) {
                            var s = e[i];
                            t += "(";
                            for (var r = 0; r < a.length; ++r) {
                                var o = a[r];
                                t += "string" == typeof s[o] ? `'${s[o].replace(/'/g,"''")}'` : null, r < a.length - 1 && (t += ", ")
                            }
                            t += ")", i < e.length - 1 && (t += ", ")
                        }
                        g.executeNonQuery(`INSERT OR IGNORE INTO ${A.userPrefix}_friend_log_history (created_at, type, user_id, display_name, previous_display_name, trust_level, previous_trust_level) VALUES ${t}`)
                    }
                }
                deleteFriendLogHistory(e) {
                    g.executeNonQuery(`DELETE FROM ${A.userPrefix}_friend_log_history WHERE id = @row_id`, {
                        "@row_id": e
                    })
                }
                addGPSToDatabase(e) {
                    g.executeNonQuery(`INSERT OR IGNORE INTO ${A.userPrefix}_feed_gps (created_at, user_id, display_name, location, world_name, previous_location, time) VALUES (@created_at, @user_id, @display_name, @location, @world_name, @previous_location, @time)`, {
                        "@created_at": e.created_at,
                        "@user_id": e.userId,
                        "@display_name": e.displayName,
                        "@location": e.location,
                        "@world_name": e.worldName,
                        "@previous_location": e.previousLocation,
                        "@time": e.time
                    })
                }
                addStatusToDatabase(e) {
                    g.executeNonQuery(`INSERT OR IGNORE INTO ${A.userPrefix}_feed_status (created_at, user_id, display_name, status, status_description, previous_status, previous_status_description) VALUES (@created_at, @user_id, @display_name, @status, @status_description, @previous_status, @previous_status_description)`, {
                        "@created_at": e.created_at,
                        "@user_id": e.userId,
                        "@display_name": e.displayName,
                        "@status": e.status,
                        "@status_description": e.statusDescription,
                        "@previous_status": e.previousStatus,
                        "@previous_status_description": e.previousStatusDescription
                    })
                }
                addAvatarToDatabase(e) {
                    g.executeNonQuery(`INSERT OR IGNORE INTO ${A.userPrefix}_feed_avatar (created_at, user_id, display_name, owner_id, avatar_name, current_avatar_image_url, current_avatar_thumbnail_image_url, previous_current_avatar_image_url, previous_current_avatar_thumbnail_image_url) VALUES (@created_at, @user_id, @display_name, @owner_id, @avatar_name, @current_avatar_image_url, @current_avatar_thumbnail_image_url, @previous_current_avatar_image_url, @previous_current_avatar_thumbnail_image_url)`, {
                        "@created_at": e.created_at,
                        "@user_id": e.userId,
                        "@display_name": e.displayName,
                        "@owner_id": e.ownerId,
                        "@avatar_name": e.avatarName,
                        "@current_avatar_image_url": e.currentAvatarImageUrl,
                        "@current_avatar_thumbnail_image_url": e.currentAvatarThumbnailImageUrl,
                        "@previous_current_avatar_image_url": e.previousCurrentAvatarImageUrl,
                        "@previous_current_avatar_thumbnail_image_url": e.previousCurrentAvatarThumbnailImageUrl
                    })
                }
                addOnlineOfflineToDatabase(e) {
                    g.executeNonQuery(`INSERT OR IGNORE INTO ${A.userPrefix}_feed_online_offline (created_at, user_id, display_name, type, location, world_name, time) VALUES (@created_at, @user_id, @display_name, @type, @location, @world_name, @time)`, {
                        "@created_at": e.created_at,
                        "@user_id": e.userId,
                        "@display_name": e.displayName,
                        "@type": e.type,
                        "@location": e.location,
                        "@world_name": e.worldName,
                        "@time": e.time
                    })
                }
                async getGamelogDatabase() {
                    var e = [],
                        t = new Date;
                    t.setDate(t.getDate() - 1);
                    var a = t.toJSON();
                    await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            type: "Location",
                            location: t[2],
                            worldId: t[3],
                            worldName: t[4],
                            time: t[5]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM gamelog_location WHERE created_at >= date('${a}') ORDER BY id DESC`), await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            type: t[2],
                            displayName: t[3],
                            location: t[4],
                            userId: t[5],
                            time: t[6]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM gamelog_join_leave WHERE created_at >= date('${a}') ORDER BY id DESC`), await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            type: "PortalSpawn",
                            displayName: t[2],
                            location: t[3],
                            userId: t[4],
                            instanceId: t[5],
                            worldName: t[6]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM gamelog_portal_spawn WHERE created_at >= date('${a}') ORDER BY id DESC`), await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            type: "VideoPlay",
                            videoUrl: t[2],
                            videoName: t[3],
                            videoId: t[4],
                            location: t[5],
                            displayName: t[6],
                            userId: t[7]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM gamelog_video_play WHERE created_at >= date('${a}') ORDER BY id DESC`), await g.execute((t => {
                        var a = {
                            rowId: t[0],
                            created_at: t[1],
                            type: "Event",
                            data: t[2]
                        };
                        e.unshift(a)
                    }), `SELECT * FROM gamelog_event WHERE created_at >= date('${a}') ORDER BY id DESC`);
                    return e.sort((function(e, t) {
                        var a = e.created_at,
                            i = t.created_at;
                        return a < i ? -1 : a > i ? 1 : 0
                    })), e
                }
                addGamelogLocationToDatabase(e) {
                    g.executeNonQuery("INSERT OR IGNORE INTO gamelog_location (created_at, location, world_id, world_name, time) VALUES (@created_at, @location, @world_id, @world_name, @time)", {
                        "@created_at": e.created_at,
                        "@location": e.location,
                        "@world_id": e.worldId,
                        "@world_name": e.worldName,
                        "@time": e.time
                    })
                }
                updateGamelogLocationTimeToDatabase(e) {
                    g.executeNonQuery("UPDATE gamelog_location SET time = @time WHERE created_at = @created_at", {
                        "@created_at": e.created_at,
                        "@time": e.time
                    })
                }
                addGamelogJoinLeaveToDatabase(e) {
                    g.executeNonQuery("INSERT OR IGNORE INTO gamelog_join_leave (created_at, type, display_name, location, user_id, time) VALUES (@created_at, @type, @display_name, @location, @user_id, @time)", {
                        "@created_at": e.created_at,
                        "@type": e.type,
                        "@display_name": e.displayName,
                        "@location": e.location,
                        "@user_id": e.userId,
                        "@time": e.time
                    })
                }
                addGamelogPortalSpawnToDatabase(e) {
                    g.executeNonQuery("INSERT OR IGNORE INTO gamelog_portal_spawn (created_at, display_name, location, user_id, instance_id, world_name) VALUES (@created_at, @display_name, @location, @user_id, @instance_id, @world_name)", {
                        "@created_at": e.created_at,
                        "@display_name": e.displayName,
                        "@location": e.location,
                        "@user_id": e.userId,
                        "@instance_id": e.instanceId,
                        "@world_name": e.worldName
                    })
                }
                addGamelogVideoPlayToDatabase(e) {
                    g.executeNonQuery("INSERT OR IGNORE INTO gamelog_video_play (created_at, video_url, video_name, video_id, location, display_name, user_id) VALUES (@created_at, @video_url, @video_name, @video_id, @location, @display_name, @user_id)", {
                        "@created_at": e.created_at,
                        "@video_url": e.videoUrl,
                        "@video_name": e.videoName,
                        "@video_id": e.videoId,
                        "@location": e.location,
                        "@display_name": e.displayName,
                        "@user_id": e.userId
                    })
                }
                addGamelogEventToDatabase(e) {
                    g.executeNonQuery("INSERT OR IGNORE INTO gamelog_event (created_at, data) VALUES (@created_at, @data)", {
                        "@created_at": e.created_at,
                        "@data": e.data
                    })
                }
                async getNotifications() {
                    var e = [];
                    return await g.execute((t => {
                        var a = {
                            id: t[0],
                            created_at: t[1],
                            type: t[2],
                            senderUserId: t[3],
                            senderUsername: t[4],
                            receiverUserId: t[5],
                            message: t[6],
                            details: {
                                worldId: t[7],
                                worldName: t[8],
                                imageUrl: t[9],
                                inviteMessage: t[10],
                                requestMessage: t[11],
                                responseMessage: t[12]
                            },
                            $isExpired: !1
                        };
                        1 === t[13] && (a.$isExpired = !0), e.unshift(a)
                    }), `SELECT * FROM ${A.userPrefix}_notifications ORDER BY id DESC LIMIT ${A.maxTableSize}`), e
                }
                addNotificationToDatabase(e) {
                    var t = {
                            id: "",
                            created_at: "",
                            type: "",
                            senderUserId: "",
                            senderUsername: "",
                            receiverUserId: "",
                            message: "",
                            ...e,
                            details: {
                                worldId: "",
                                worldName: "",
                                imageUrl: "",
                                inviteMessage: "",
                                requestMessage: "",
                                responseMessage: "",
                                ...e.details
                            }
                        },
                        a = 0;
                    e.$isExpired && (a = 1), g.executeNonQuery(`INSERT OR IGNORE INTO ${A.userPrefix}_notifications (id, created_at, type, sender_user_id, sender_username, receiver_user_id, message, world_id, world_name, image_url, invite_message, request_message, response_message, expired) VALUES (@id, @created_at, @type, @sender_user_id, @sender_username, @receiver_user_id, @message, @world_id, @world_name, @image_url, @invite_message, @request_message, @response_message, @expired)`, {
                        "@id": t.id,
                        "@created_at": t.created_at,
                        "@type": t.type,
                        "@sender_user_id": t.senderUserId,
                        "@sender_username": t.senderUsername,
                        "@receiver_user_id": t.receiverUserId,
                        "@message": t.message,
                        "@world_id": t.details.worldId,
                        "@world_name": t.details.worldName,
                        "@image_url": t.details.imageUrl,
                        "@invite_message": t.details.inviteMessage,
                        "@request_message": t.details.requestMessage,
                        "@response_message": t.details.responseMessage,
                        "@expired": a
                    })
                }
                deleteNotification(e) {
                    g.executeNonQuery(`DELETE FROM ${A.userPrefix}_notifications WHERE id = @row_id`, {
                        "@row_id": e
                    })
                }
                updateNotificationExpired(e) {
                    var t = 0;
                    e.$isExpired && (t = 1), g.executeNonQuery(`UPDATE ${A.userPrefix}_notifications SET expired = @expired WHERE id = @id`, {
                        "@id": e.id,
                        "@expired": t
                    })
                }
                async getGpsTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), `SELECT COUNT(*) FROM ${A.userPrefix}_feed_gps`), e
                }
                async getStatusTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), `SELECT COUNT(*) FROM ${A.userPrefix}_feed_status`), e
                }
                async getAvatarTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), `SELECT COUNT(*) FROM ${A.userPrefix}_feed_avatar`), e
                }
                async getOnlineOfflineTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), `SELECT COUNT(*) FROM ${A.userPrefix}_feed_online_offline`), e
                }
                async getFriendLogHistoryTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), `SELECT COUNT(*) FROM ${A.userPrefix}_friend_log_history`), e
                }
                async getNotificationTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), `SELECT COUNT(*) FROM ${A.userPrefix}_notifications`), e
                }
                async getLocationTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), "SELECT COUNT(*) FROM gamelog_location"), e
                }
                async getJoinLeaveTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), "SELECT COUNT(*) FROM gamelog_join_leave"), e
                }
                async getPortalSpawnTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), "SELECT COUNT(*) FROM gamelog_portal_spawn"), e
                }
                async getVideoPlayTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), "SELECT COUNT(*) FROM gamelog_video_play"), e
                }
                async getEventTableSize() {
                    var e = 0;
                    return await g.execute((t => {
                        e = t[0]
                    }), "SELECT COUNT(*) FROM gamelog_event"), e
                }
                async getLastVisit(e, t) {
                    if (t) var a = 2;
                    else a = 1;
                    var i = {
                        created_at: "",
                        worldId: ""
                    };
                    return await g.execute((e => {
                        i = {
                            created_at: e[0],
                            worldId: e[1]
                        }
                    }), "SELECT created_at, world_id FROM gamelog_location WHERE world_id = @worldId ORDER BY id DESC LIMIT @count", {
                        "@worldId": e,
                        "@count": a
                    }), i
                }
                async getVisitCount(e) {
                    var t = {
                        visitCount: "",
                        worldId: ""
                    };
                    return await g.execute((a => {
                        t = {
                            visitCount: a[0],
                            worldId: e
                        }
                    }), "SELECT COUNT(DISTINCT location) FROM gamelog_location WHERE world_id = @worldId", {
                        "@worldId": e
                    }), t
                }
                async getTimeSpentInWorld(e) {
                    var t = {
                        timeSpent: 0,
                        worldId: e
                    };
                    return await g.execute((e => {
                        "number" == typeof e[0] && (t.timeSpent += e[0])
                    }), "SELECT time FROM gamelog_location WHERE world_id = @worldId", {
                        "@worldId": e
                    }), t
                }
                async getLastSeen(e, t) {
                    if (t) var a = 2;
                    else a = 1;
                    var i = {
                        created_at: "",
                        userId: ""
                    };
                    return await g.execute((t => {
                        i = t[1] ? {
                            created_at: t[0],
                            userId: t[1]
                        } : {
                            created_at: t[0],
                            userId: e.id
                        }
                    }), "SELECT created_at, user_id FROM gamelog_join_leave WHERE user_id = @userId OR display_name = @displayName ORDER BY id DESC LIMIT @count", {
                        "@userId": e.id,
                        "@displayName": e.displayName,
                        "@count": a
                    }), i
                }
                async getJoinCount(e) {
                    var t = {
                        joinCount: "",
                        userId: ""
                    };
                    return await g.execute((a => {
                        t = a[1] ? {
                            joinCount: a[0],
                            userId: a[1]
                        } : {
                            joinCount: a[0],
                            userId: e.id
                        }
                    }), "SELECT COUNT(DISTINCT location) FROM gamelog_join_leave WHERE (type = 'OnPlayerJoined') AND (user_id = @userId OR display_name = @displayName)", {
                        "@userId": e.id,
                        "@displayName": e.displayName
                    }), t
                }
                async getTimeSpent(e) {
                    var t = {
                        timeSpent: 0,
                        userId: e.id
                    };
                    return await g.execute((e => {
                        "number" == typeof e[0] && (t.timeSpent += e[0])
                    }), "SELECT time FROM gamelog_join_leave WHERE (type = 'OnPlayerLeft') AND (user_id = @userId OR display_name = @displayName)", {
                        "@userId": e.id,
                        "@displayName": e.displayName
                    }), t
                }
                async getUserStats(e, t) {
                    var a = 0,
                        i = new Set,
                        s = {
                            timeSpent: 0,
                            created_at: "",
                            joinCount: 0,
                            userId: e.id
                        };
                    return await g.execute((e => {
                        "number" == typeof e[2] && (s.timeSpent += e[2]), (1 === ++a || t && 2 === a) && (s.created_at = e[0]), i.add(e[3])
                    }), "SELECT created_at, user_id, time, location FROM gamelog_join_leave WHERE user_id = @userId OR display_name = @displayName ORDER BY id DESC", {
                        "@userId": e.id,
                        "@displayName": e.displayName
                    }), s.joinCount = i.size, s
                }
                async lookupFeedDatabase(e, t, a) {
                    e = e.replaceAll("'", "''");
                    var i = "";
                    a.length > 0 && (i = "AND user_id IN (", a.forEach(((e, t) => {
                        i += `'${e.replaceAll("'","''")}'`, t < a.length - 1 && (i += ", ")
                    })), i += ")");
                    var s = !0,
                        r = !0,
                        o = !0,
                        n = !0,
                        d = !0;
                    t.length > 0 && (s = !1, r = !1, o = !1, n = !1, d = !1, t.forEach((e => {
                        switch (e) {
                            case "GPS":
                                s = !0;
                                break;
                            case "Status":
                                r = !0;
                                break;
                            case "Avatar":
                                o = !0;
                                break;
                            case "Online":
                                n = !0;
                                break;
                            case "Offline":
                                d = !0
                        }
                    })));
                    var l = [];
                    if (s && await g.execute((e => {
                            var t = {
                                rowId: e[0],
                                created_at: e[1],
                                userId: e[2],
                                displayName: e[3],
                                type: "GPS",
                                location: e[4],
                                worldName: e[5],
                                previousLocation: e[6],
                                time: e[7]
                            };
                            l.unshift(t)
                        }), `SELECT * FROM ${A.userPrefix}_feed_gps WHERE (display_name LIKE '%${e}%' OR world_name LIKE '%${e}%') ${i} ORDER BY id DESC LIMIT ${A.maxTableSize}`), r && await g.execute((e => {
                            var t = {
                                rowId: e[0],
                                created_at: e[1],
                                userId: e[2],
                                displayName: e[3],
                                type: "Status",
                                status: e[4],
                                statusDescription: e[5],
                                previousStatus: e[6],
                                previousStatusDescription: e[7]
                            };
                            l.unshift(t)
                        }), `SELECT * FROM ${A.userPrefix}_feed_status WHERE (display_name LIKE '%${e}%' OR status LIKE '%${e}%' OR status_description LIKE '%${e}%') ${i} ORDER BY id DESC LIMIT ${A.maxTableSize}`), o && await g.execute((e => {
                            var t = {
                                rowId: e[0],
                                created_at: e[1],
                                userId: e[2],
                                displayName: e[3],
                                type: "Avatar",
                                ownerId: e[4],
                                avatarName: e[5],
                                currentAvatarImageUrl: e[6],
                                currentAvatarThumbnailImageUrl: e[7],
                                previousCurrentAvatarImageUrl: e[8],
                                previousCurrentAvatarThumbnailImageUrl: e[9]
                            };
                            l.unshift(t)
                        }), `SELECT * FROM ${A.userPrefix}_feed_avatar WHERE (display_name LIKE '%${e}%' OR avatar_name LIKE '%${e}%') ${i} ORDER BY id DESC LIMIT ${A.maxTableSize}`), n || d) {
                        var c = "";
                        n && d || (n ? c = "AND type = 'Online'" : d && (c = "AND type = 'Offline'")), await g.execute((e => {
                            var t = {
                                rowId: e[0],
                                created_at: e[1],
                                userId: e[2],
                                displayName: e[3],
                                type: e[4],
                                location: e[5],
                                worldName: e[6],
                                time: e[7]
                            };
                            l.unshift(t)
                        }), `SELECT * FROM ${A.userPrefix}_feed_online_offline WHERE ((display_name LIKE '%${e}%' OR world_name LIKE '%${e}%') ${c}) ${i} ORDER BY id DESC LIMIT ${A.maxTableSize}`)
                    }
                    return l.sort((function(e, t) {
                        var a = e.created_at,
                            i = t.created_at;
                        return a < i ? -1 : a > i ? 1 : 0
                    })), l.splice(0, l.length - A.maxTableSize), l
                }
                async lookupGameLogDatabase(e, t) {
                    e = e.replaceAll("'", "''");
                    var a = !0,
                        i = !0,
                        s = !0,
                        r = !0,
                        o = !0,
                        n = !0;
                    t.length > 0 && (a = !1, i = !1, s = !1, r = !1, o = !1, n = !1, t.forEach((e => {
                        switch (e) {
                            case "Location":
                                a = !0;
                                break;
                            case "OnPlayerJoined":
                                i = !0;
                                break;
                            case "OnPlayerLeft":
                                s = !0;
                                break;
                            case "PortalSpawn":
                                r = !0;
                                break;
                            case "Event":
                                o = !0;
                                break;
                            case "VideoPlay":
                                n = !0
                        }
                    })));
                    var d = [];
                    if (a && await g.execute((e => {
                            var t = {
                                rowId: e[0],
                                created_at: e[1],
                                type: "Location",
                                location: e[2],
                                worldId: e[3],
                                worldName: e[4],
                                time: e[5]
                            };
                            d.unshift(t)
                        }), `SELECT * FROM gamelog_location WHERE world_name LIKE '%${e}%' ORDER BY id DESC LIMIT ${A.maxTableSize}`), i || s) {
                        var l = "";
                        i && s || (i ? l = "AND type = 'OnPlayerJoined'" : s && (l = "AND type = 'OnPlayerLeft'")), await g.execute((e => {
                            var t = {
                                rowId: e[0],
                                created_at: e[1],
                                type: e[2],
                                displayName: e[3],
                                location: e[4],
                                userId: e[5],
                                time: e[6]
                            };
                            d.unshift(t)
                        }), `SELECT * FROM gamelog_join_leave WHERE (display_name LIKE '%${e}%' AND user_id != '${A.userId}') ${l} ORDER BY id DESC LIMIT ${A.maxTableSize}`)
                    }
                    r && await g.execute((e => {
                        var t = {
                            rowId: e[0],
                            created_at: e[1],
                            type: "PortalSpawn",
                            displayName: e[2],
                            location: e[3],
                            userId: e[4],
                            instanceId: e[5],
                            worldName: e[6]
                        };
                        d.unshift(t)
                    }), `SELECT * FROM gamelog_portal_spawn WHERE (display_name LIKE '%${e}%' OR world_name LIKE '%${e}%') ORDER BY id DESC LIMIT ${A.maxTableSize}`), o && await g.execute((e => {
                        var t = {
                            rowId: e[0],
                            created_at: e[1],
                            type: "Event",
                            data: e[2]
                        };
                        d.unshift(t)
                    }), `SELECT * FROM gamelog_event WHERE data LIKE '%${e}%' ORDER BY id DESC LIMIT ${A.maxTableSize}`), n && await g.execute((e => {
                        var t = {
                            rowId: e[0],
                            created_at: e[1],
                            type: "VideoPlay",
                            videoUrl: e[2],
                            videoName: e[3],
                            videoId: e[4],
                            location: e[5],
                            displayName: e[6],
                            userId: e[7]
                        };
                        d.unshift(t)
                    }), `SELECT * FROM gamelog_video_play WHERE video_url LIKE '%${e}%' OR video_name LIKE '%${e}%' OR display_name LIKE '%${e}%' ORDER BY id DESC LIMIT ${A.maxTableSize}`);
                    return d.sort((function(e, t) {
                        var a = e.created_at,
                            i = t.created_at;
                        return a < i ? -1 : a > i ? 1 : 0
                    })), d.splice(0, d.length - A.maxTableSize), d
                }
                async getLastDateGameLogDatabase() {
                    var e = [],
                        t = (new Date).toJSON(),
                        a = new Date(Date.now() - 864e5).toJSON();
                    if (await g.execute((t => {
                            e.unshift(t[0])
                        }), "SELECT created_at FROM gamelog_location ORDER BY id DESC LIMIT 1"), await g.execute((t => {
                            e.unshift(t[0])
                        }), "SELECT created_at FROM gamelog_join_leave ORDER BY id DESC LIMIT 1"), await g.execute((t => {
                            e.unshift(t[0])
                        }), "SELECT created_at FROM gamelog_portal_spawn ORDER BY id DESC LIMIT 1"), await g.execute((t => {
                            e.unshift(t[0])
                        }), "SELECT created_at FROM gamelog_event ORDER BY id DESC LIMIT 1"), await g.execute((t => {
                            e.unshift(t[0])
                        }), "SELECT created_at FROM gamelog_video_play ORDER BY id DESC LIMIT 1"), e.length > 0) {
                        e.sort();
                        var i = e[e.length - 1];
                        i > a && (t = i)
                    }
                    return t
                }
                async getModeration(e) {
                    var t = {};
                    return await g.execute((e => {
                        var a = !1,
                            i = !1;
                        1 === e[3] && (a = !0), 1 === e[4] && (i = !0), t = {
                            userId: e[0],
                            updatedAt: e[1],
                            displayName: e[2],
                            block: a,
                            mute: i
                        }
                    }), `SELECT * FROM ${A.userPrefix}_moderation WHERE user_id = @userId`, {
                        "@userId": e
                    }), t
                }
                setModeration(e) {
                    var t = 0,
                        a = 0;
                    e.block && (t = 1), e.mute && (a = 1), g.executeNonQuery(`INSERT OR REPLACE INTO ${A.userPrefix}_moderation (user_id, updated_at, display_name, block, mute) VALUES (@user_id, @updated_at, @display_name, @block, @mute)`, {
                        "@user_id": e.userId,
                        "@updated_at": e.updatedAt,
                        "@display_name": e.displayName,
                        "@block": t,
                        "@mute": a
                    })
                }
                deleteModeration(e) {
                    g.executeNonQuery(`DELETE FROM ${A.userPrefix}_moderation WHERE user_id = @user_id`, {
                        "@user_id": e
                    })
                }
                async getpreviousInstancesByUserId(e) {
                    var t = new Map;
                    return await g.execute((e => {
                        var a = 0;
                        e[2] && e[2] > 0 && (a = e[2]);
                        var i = t.get(e[1]);
                        void 0 !== i && (a = +Number(i.time));
                        var s = {
                            created_at: e[0],
                            location: e[1],
                            time: a,
                            name: e[3]
                        };
                        t.set(s.location, s)
                    }), "SELECT gamelog_join_leave.created_at, gamelog_join_leave.location, gamelog_join_leave.time, gamelog_location.world_name\n            FROM gamelog_join_leave\n            INNER JOIN gamelog_location ON gamelog_join_leave.location = gamelog_location.location\n            WHERE user_id = @userId OR display_name = @displayName\n            ORDER BY gamelog_join_leave.id DESC", {
                        "@userId": e.id,
                        "@displayName": e.displayName
                    }), t
                }
                deleteGameLogInstance(e) {
                    g.executeNonQuery("DELETE FROM gamelog_join_leave WHERE (user_id = @user_id OR display_name = @displayName) AND (location = @location)", {
                        "@user_id": e.id,
                        "@displayName": e.displayName,
                        "@location": e.location
                    })
                }
                async getpreviousInstancesByWorldId(e) {
                    var t = new Map;
                    return await g.execute((e => {
                        var a = 0;
                        e[2] && e[2] > 0 && (a = e[2]);
                        var i = t.get(e[1]);
                        void 0 !== i && (a = +Number(i.time));
                        var s = {
                            created_at: e[0],
                            location: e[1],
                            time: a,
                            name: e[3]
                        };
                        t.set(s.location, s)
                    }), "SELECT created_at, location, time, world_name\n            FROM gamelog_location\n            WHERE world_id = @worldId\n            ORDER BY id DESC", {
                        "@worldId": e.id
                    }), t
                }
                deleteGameLogInstanceByInstanceId(e) {
                    g.executeNonQuery("DELETE FROM gamelog_location WHERE location = @location", {
                        "@location": e.location
                    })
                }
            }
            var L = new A;
            window.database = L, speechSynthesis.getVoices(), async function() {
                var e = null;
                if (await CefSharp.BindObjectAsync("AppApi", "WebApi", "SharedVariable", "VRCXStorage", "SQLite", "LogWatcher", "Discord", "AssetBundleCacher"), await w.init(), null === w.getBool("migrate_config_20201101")) {
                    for (var t of ["orderFriendGroup0", "orderFriendGroup1", "orderFriendGroup2", "orderFriendGroup3", "discordActive", "discordInstance", "openVR", "openVRAlways", "VRCX_hidePrivateFromFeed", "VRCX_hideLoginsFromFeed", "VRCX_hideDevicesFromFeed", "VRCX_VIPNotifications", "VRCX_minimalFeed", "isDarkMode", "VRCX_StartAtWindowsStartup", "VRCX_StartAsMinimizedState", "VRCX_CloseToTray", "launchAsDesktop"]) w.setBool(t, "true" === VRCXStorage.Get(t));
                    w.setBool("migrate_config_20201101", !0)
                }
                document.addEventListener("keyup", (function(t) {
                    t.ctrlKey ? "I" === t.key ? e.showConsole() : "r" === t.key && location.reload() : "R" === t.key && e.refreshCustomCss()
                })), VRCXStorage.GetArray = function(e) {
                    try {
                        var t = JSON.parse(this.Get(e));
                        if (Array.isArray(t)) return t
                    } catch (e) {
                        console.error(e)
                    }
                    return []
                }, VRCXStorage.SetArray = function(e, t) {
                    this.Set(e, JSON.stringify(t))
                }, VRCXStorage.GetObject = function(e) {
                    try {
                        var t = JSON.parse(this.Get(e));
                        if (t === Object(t)) return t
                    } catch (e) {
                        console.error(e)
                    }
                    return {}
                }, VRCXStorage.SetObject = function(e, t) {
                    this.Set(e, JSON.stringify(t))
                }, p.Zi((function() {
                    VRCXStorage.Flush()
                }), 3e5), s().overrideDefaults({
                    animation: {
                        open: "animate__animated animate__bounceInLeft",
                        close: "animate__animated animate__bounceOutLeft"
                    },
                    layout: "bottomLeft",
                    theme: "mint",
                    timeout: 6e3
                }), o().use(c(), {
                    locale: u.Z
                });
                var a = function(e, t) {
                        for (var {
                                length: a
                            } = e, i = 0; i < a; ++i)
                            if (e[i] === t) return e.splice(i, 1), !0;
                        return !1
                    },
                    i = function(e) {
                        return String(e).replace(/["&'<>]/g, (e => `&#${e.charCodeAt(0)};`))
                    };
                o().filter("escapeTag", i);
                o().filter("commaNumber", (function(e) {
                    return String(Number(e)).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")
                }));
                o().filter("textToHex", (function(e) {
                    return String(e).split("").map((e => e.charCodeAt(0).toString(16))).join(" ")
                }));
                var r = function(e) {
                    var t = Number(e);
                    if (isNaN(t)) return i(e);
                    var a = [];
                    return (t = Math.floor(t / 1e3)) < 0 && (t = -t), t >= 86400 && (a.push(`${Math.floor(t/86400)}d`), t %= 86400), t >= 3600 && (a.push(`${Math.floor(t/3600)}h`), t %= 3600), t >= 60 && (a.push(`${Math.floor(t/60)}m`), t %= 60), 0 === a.length && t < 60 && a.push(`${t}s`), a.join(" ")
                };
                o().filter("timeToText", r), o().use(n.Z, {
                    preLoad: 1,
                    observer: !0,
                    observerOptions: {
                        rootMargin: "0px",
                        threshold: .1
                    },
                    error: "./assets/blank.png",
                    loading: "./assets/blank.png"
                }), o().use(d.DataTables);
                var l = document.createElement("link");
                l.disabled = !0, l.rel = "stylesheet", l.href = `app.dark.css?_=${Date.now()}`, document.head.appendChild(l);
                var g = function(e, t) {
                        return t ? `https://vrchat.com/home/launch?worldId=${encodeURIComponent(e)}&instanceId=${encodeURIComponent(t)}` : `https://vrchat.com/home/launch?worldId=${encodeURIComponent(e)}`
                    },
                    f = {
                        eng: "English",
                        kor: "한국어",
                        rus: "Русский",
                        spa: "Español",
                        por: "Português",
                        zho: "中文",
                        deu: "Deutsch",
                        jpn: "日本語",
                        fra: "Français",
                        swe: "Svenska",
                        nld: "Nederlands",
                        pol: "Polski",
                        dan: "Dansk",
                        nor: "Norsk",
                        ita: "Italiano",
                        tha: "ภาษาไทย",
                        fin: "Suomi",
                        hun: "Magyar",
                        ces: "Čeština",
                        tur: "Türkçe",
                        ara: "العربية",
                        ron: "Română",
                        vie: "Tiếng Việt",
                        ase: "American Sign Language",
                        bfi: "British Sign Language",
                        dse: "Dutch Sign Language",
                        fsl: "French Sign Language",
                        kvk: "Korean Sign Language"
                    },
                    v = {
                        eng: "us",
                        kor: "kr",
                        rus: "ru",
                        spa: "es",
                        por: "pt",
                        zho: "cn",
                        deu: "de",
                        jpn: "jp",
                        fra: "fr",
                        swe: "se",
                        nld: "nl",
                        pol: "pl",
                        dan: "dk",
                        nor: "no",
                        ita: "it",
                        tha: "th",
                        fin: "fi",
                        hun: "hu",
                        ces: "cz",
                        tur: "tr",
                        ara: "ae",
                        ron: "ro",
                        vie: "vn",
                        ase: "us",
                        bfi: "gb",
                        dse: "nl",
                        fsl: "fr",
                        kvk: "kr"
                    },
                    y = {};
                y.eventHandlers = new Map, y.$emit = function(t, ...a) {
                    e.debug && console.log(t, ...a);
                    var i = this.eventHandlers.get(t);
                    if (void 0 !== i) try {
                        for (var s of i) s.apply(this, a)
                    } catch (e) {
                        console.error(e)
                    }
                }, y.$on = function(e, t) {
                    var a = this.eventHandlers.get(e);
                    void 0 === a && (a = [], this.eventHandlers.set(e, a)), a.push(t)
                }, y.$off = function(e, t) {
                    var a = this.eventHandlers.get(e);
                    if (void 0 !== a)
                        for (var {
                                length: i
                            } = a, s = 0; s < i; ++s)
                            if (a[s] === t) {
                                i > 1 ? a.splice(s, 1) : this.eventHandlers.delete(e);
                                break
                            }
                }, y.pendingGetRequests = new Map, y.failedGetRequests = new Map, y.endpointDomainVrchat = "https://api.vrchat.cloud/api/1", y.endpointDomain = "https://api.vrchat.cloud/api/1", y.call = function(t, a) {
                    var r = {
                            url: `${y.endpointDomain}/${t}`,
                            method: "GET",
                            ...a
                        },
                        {
                            params: o
                        } = r;
                    if ("GET" === r.method) {
                        if (this.failedGetRequests.has(t)) {
                            if (this.failedGetRequests.get(t) >= Date.now() - 9e5) throw new Error(`Bailing request due to past 404, ${t}`);
                            this.failedGetRequests.delete(t)
                        }
                        if (o === Object(o)) {
                            var n = new URL(r.url),
                                {
                                    searchParams: d
                                } = n;
                            for (var l in o) d.set(l, o[l]);
                            r.url = n.toString()
                        }
                        if (void 0 !== (c = this.pendingGetRequests.get(r.url))) return c
                    } else r.uploadImage || r.uploadFilePUT || (r.headers = {
                        "Content-Type": "application/json;charset=utf-8",
                        ...r.headers
                    }, r.body = o === Object(o) ? JSON.stringify(o) : "{}");
                    r.headers = {
                        "User-Agent": m,
                        ...r.headers
                    };
                    var c = C.execute(r).catch((e => {
                        this.$throw(0, e)
                    })).then((a => {
                        try {
                            return a.data = JSON.parse(a.data), e.debugWebRequests && console.log(r, a.data), a
                        } catch (e) {}
                        return "/shortName" === t.substring(t.length - 10) ? a : (200 === a.status && this.$throw(0, "Invalid JSON response"), this.$throw(a.status, t), {})
                    })).then((({
                        data: a,
                        status: o
                    }) => {
                        if (200 === o) return a && a.success === Object(a.success) && new(s())({
                            type: "success",
                            text: i(a.success.message)
                        }).show(), a;
                        if (401 === o && '"Missing Credentials"' === a.error.message) throw "auth/user?" === t.substring(0, 10) && this.$emit("AUTOLOGIN"), new Error("401: Missing Credentials");
                        if (404 === o && "avatars/" === t.substring(0, 8)) throw e.$message({
                            message: "아바타가 비공개이거나 삭제되었습니다.",
                            type: "error"
                        }), e.avatarDialog.visible = !1, new Error("404: Can't find avatarǃ");
                        if ("GET" === r.method && 404 === o && this.failedGetRequests.set(t, Date.now()), 404 === o && "users/" === t.substring(0, 6)) throw new Error("404: Can't find user!");
                        return 404 === o && "invite/" === t.substring(0, 7) && r.inviteId && this.expireNotification(r.inviteId), a && a.error === Object(a.error) ? this.$throw(a.error.status_code || o, a.error.message, t) : a && "string" == typeof a.error && this.$throw(a.status_code || o, a.error, t), this.$throw(o, a), a
                    }));
                    return "GET" === r.method && (c.finally((() => {
                        this.pendingGetRequests.delete(r.url)
                    })), this.pendingGetRequests.set(r.url, c)), c
                }, y.statusCodes = {
                    100: "Continue",
                    101: "Switching Protocols",
                    102: "Processing",
                    103: "Early Hints",
                    200: "OK",
                    201: "Created",
                    202: "Accepted",
                    203: "Non-Authoritative Information",
                    204: "No Content",
                    205: "Reset Content",
                    206: "Partial Content",
                    207: "Multi-Status",
                    208: "Already Reported",
                    226: "IM Used",
                    300: "Multiple Choices",
                    301: "Moved Permanently",
                    302: "Found",
                    303: "See Other",
                    304: "Not Modified",
                    305: "Use Proxy",
                    306: "Switch Proxy",
                    307: "Temporary Redirect",
                    308: "Permanent Redirect",
                    400: "Bad Request",
                    401: "Unauthorized",
                    402: "Payment Required",
                    403: "Forbidden",
                    404: "Not Found",
                    405: "Method Not Allowed",
                    406: "Not Acceptable",
                    407: "Proxy Authentication Required",
                    408: "Request Timeout",
                    409: "Conflict",
                    410: "Gone",
                    411: "Length Required",
                    412: "Precondition Failed",
                    413: "Payload Too Large",
                    414: "URI Too Long",
                    415: "Unsupported Media Type",
                    416: "Range Not Satisfiable",
                    417: "Expectation Failed",
                    418: "I'm a teapot",
                    421: "Misdirected Request",
                    422: "Unprocessable Entity",
                    423: "Locked",
                    424: "Failed Dependency",
                    425: "Too Early",
                    426: "Upgrade Required",
                    428: "Precondition Required",
                    429: "Too Many Requests",
                    431: "Request Header Fields Too Large",
                    451: "Unavailable For Legal Reasons",
                    500: "Internal Server Error",
                    501: "Not Implemented",
                    502: "Bad Gateway",
                    503: "Service Unavailable",
                    504: "Gateway Timeout",
                    505: "HTTP Version Not Supported",
                    506: "Variant Also Negotiates",
                    507: "Insufficient Storage",
                    508: "Loop Detected",
                    510: "Not Extended",
                    511: "Network Authentication Required",
                    520: "Web server returns an unknown error",
                    521: "Web server is down",
                    522: "Connection timed out",
                    523: "Origin is unreachable",
                    524: "A timeout occurred",
                    525: "SSL handshake failed",
                    526: "Invalid SSL certificate",
                    527: "Railgun Listener to origin error"
                }, y.$throw = function(e, t, a) {
                    var r = [];
                    if (e > 0) {
                        var o = this.statusCodes[e];
                        void 0 === o ? r.push(`${e}`) : r.push(`${e} ${o}`)
                    }
                    throw void 0 !== t && r.push(JSON.stringify(t)), void 0 !== a && r.push(JSON.stringify(a)), (r = r.map((e => i(e))).join("<br>")).length && (this.errorNoty && this.errorNoty.close(), this.errorNoty = new(s())({
                        type: "error",
                        text: r
                    }).show()), new Error(r)
                }, y.$bulk = function(e, t) {
                    return "handle" in e && e.handle.call(this, t, e), t.json.length > 0 && (e.params.offset += t.json.length, e.N > 0 ? e.N > e.params.offset : e.N < 0 ? t.json.length : e.params.n === t.json.length) ? this.bulk(e) : "done" in e && e.done.call(this, !0, e), t
                }, y.bulk = function(e) {
                    this[e.fn](e.params).catch((t => {
                        throw "done" in e && e.done.call(this, !1, e), t
                    })).then((t => this.$bulk(e, t)))
                }, y.cachedConfig = {}, y.$on("CONFIG", (function(e) {
                    e.ref = this.applyConfig(e.json)
                })), y.applyConfig = function(e) {
                    var t = {
                        clientApiKey: "",
                        ...e
                    };
                    return this.cachedConfig = t, t
                }, y.getConfig = function() {
                    return this.call("config", {
                        method: "GET"
                    }).then((e => {
                        var t = {
                            json: e
                        };
                        return this.$emit("CONFIG", t), t
                    }))
                }, y.parseLocation = function(e) {
                    var t = String(e || ""),
                        a = {
                            tag: t,
                            isOffline: !1,
                            isPrivate: !1,
                            worldId: "",
                            instanceId: "",
                            instanceName: "",
                            accessType: "",
                            region: "",
                            userId: null,
                            hiddenId: null,
                            privateId: null,
                            friendsId: null,
                            canRequestInvite: !1,
                            strict: !1
                        };
                    if ("offline" === t) a.isOffline = !0;
                    else if ("private" === t) a.isPrivate = !0;
                    else if (!1 === t.startsWith("local")) {
                        var i = t.indexOf(":");
                        i >= 0 ? (a.worldId = t.substr(0, i), a.instanceId = t.substr(i + 1), a.instanceId.split("~").forEach(((e, t) => {
                            if (t) {
                                var i = e.indexOf("("),
                                    s = i >= 0 ? e.lastIndexOf(")") : -1,
                                    r = s >= 0 ? e.substr(0, i) : e,
                                    o = i < s ? e.substr(i + 1, s - i - 1) : "";
                                "hidden" === r ? a.hiddenId = o : "private" === r ? a.privateId = o : "friends" === r ? a.friendsId = o : "canRequestInvite" === r ? a.canRequestInvite = !0 : "region" === r ? a.region = o : "strict" === r && (a.strict = !0)
                            } else a.instanceName = e
                        })), a.accessType = "public", null !== a.privateId ? (a.canRequestInvite ? a.accessType = "invite+" : a.accessType = "invite", a.userId = a.privateId) : null !== a.friendsId ? (a.accessType = "friends", a.userId = a.friendsId) : null !== a.hiddenId && (a.accessType = "friends+", a.userId = a.hiddenId)) : a.worldId = t
                    }
                    return a
                }, o().component("launch", {
                    template: '<el-button @click="confirm" size="mini" icon="el-icon-info" circle></el-button>',
                    props: {
                        location: String
                    },
                    methods: {
                        parse() {
                            var e = y.parseLocation(this.location);
                            this.$el.style.display = e.isOffline || e.isPrivate ? "none" : ""
                        },
                        confirm() {
                            y.$emit("SHOW_LAUNCH_DIALOG", this.location)
                        }
                    },
                    watch: {
                        location() {
                            this.parse()
                        }
                    },
                    mounted() {
                        this.parse()
                    }
                }), o().component("invite-yourself", {
                    template: '<el-button @click="confirm" size="mini" icon="el-icon-message" circle></el-button>',
                    props: {
                        location: String
                    },
                    methods: {
                        parse() {
                            var e = y.parseLocation(this.location);
                            this.$el.style.display = e.isOffline || e.isPrivate ? "none" : ""
                        },
                        confirm() {
                            var e = y.parseLocation(this.location);
                            e.isOffline || e.isPrivate || "" === e.worldId || ("busy" !== y.currentUser.status ? y.selfInvite({
                                instanceId: e.instanceId,
                                worldId: e.worldId
                            }) : this.$message({
                                message: "'방해 금지' 모드에서는 스스로에게 초대를 보낼 수 없습니다.",
                                type: "error"
                            }))
                        }
                    },
                    watch: {
                        location() {
                            this.parse()
                        }
                    },
                    mounted() {
                        this.parse()
                    }
                }), o().component("location", {
                    template: '<span @click="showWorldDialog" :class="{ \'x-link\': link && this.location !== \'private\' && this.location !== \'offline\'}">{{ text }}<slot></slot><span class="famfamfam-flags" :class="region" style="display:inline-block;margin-left:5px"></span><i v-if="strict" class="el-icon el-icon-lock" style="display:inline-block;margin-left:5px"></i></span>',
                    props: {
                        location: String,
                        hint: {
                            type: String,
                            default: ""
                        },
                        link: {
                            type: Boolean,
                            default: !0
                        }
                    },
                    data() {
                        return {
                            text: this.location,
                            region: this.region,
                            strict: this.strict
                        }
                    },
                    methods: {
                        parse() {
                            this.text = this.location;
                            var e = y.parseLocation(this.location);
                            if (e.isOffline) this.text = "Offline";
                            else if (e.isPrivate) this.text = "Private";
                            else if ("string" == typeof this.hint && "" !== this.hint) e.instanceId ? this.text = `${this.hint} #${e.instanceName} ${e.accessType}` : this.text = this.hint;
                            else if (e.worldId) {
                                var t = y.cachedWorlds.get(e.worldId);
                                void 0 === t ? y.getWorld({
                                    worldId: e.worldId
                                }).then((t => (e.tag === this.location && (e.instanceId ? this.text = `${t.json.name} #${e.instanceName} ${e.accessType}` : this.text = t.json.name), t))) : e.instanceId ? this.text = `${t.name} #${e.instanceName} ${e.accessType}` : this.text = t.name
                            }
                            this.region = "", "" === this.location || !e.instanceId || e.isOffline || e.isPrivate || ("eu" === e.region ? this.region = "europeanunion" : "jp" === e.region ? this.region = "jp" : "use" === e.region ? this.region = "flag-icon-use" : this.region = "flag-icon-usw"), this.strict = e.strict
                        },
                        showWorldDialog() {
                            this.link && y.$emit("SHOW_WORLD_DIALOG", this.location)
                        }
                    },
                    watch: {
                        location() {
                            this.parse()
                        }
                    },
                    created() {
                        this.parse()
                    }
                }), o().component("avatar-info", {
                    template: '<div @click="confirm" class="avatar-info"><span style="margin-right:5px">{{ avatarName }}</span><span :class="color">{{ avatarType }}</span></div>',
                    props: {
                        imageurl: String,
                        userid: String,
                        hintownerid: String,
                        hintavatarname: String
                    },
                    data() {
                        return {
                            avatarName: this.avatarName,
                            avatarType: this.avatarType,
                            color: this.color
                        }
                    },
                    methods: {
                        async parse() {
                            if (this.ownerId = "", this.avatarName = "", this.avatarType = "", this.color = "", this.imageurl) {
                                if (this.hintownerid) this.avatarName = this.hintavatarname, this.ownerId = this.hintownerid;
                                else try {
                                    var t = await e.getAvatarName(this.imageurl);
                                    this.avatarName = t.avatarName, this.ownerId = t.ownerId
                                } catch (e) {}
                                void 0 !== this.userid && this.ownerId ? this.ownerId === this.userid ? (this.color = "avatar-info-own", this.avatarType = "(own)") : (this.color = "avatar-info-public", this.avatarType = "(public)") : (this.color = "", this.avatarType = "")
                            } else this.avatarName = "-"
                        },
                        confirm() {
                            this.imageurl && e.showAvatarAuthorDialog(this.userid, this.ownerId, this.imageurl)
                        }
                    },
                    watch: {
                        imageurl() {
                            this.parse()
                        },
                        userid() {
                            this.parse()
                        }
                    },
                    mounted() {
                        this.parse()
                    }
                }), y.isLoggedIn = !1, y.cachedUsers = new Map, y.currentUser = {}, y.$on("USER:CURRENT", (function(t) {
                    var {
                        json: a
                    } = t;
                    t.ref = this.applyCurrentUser(a), this.applyUser({
                        id: a.id,
                        username: a.username,
                        displayName: a.displayName,
                        bio: a.bio,
                        bioLinks: a.bioLinks,
                        currentAvatarImageUrl: a.currentAvatarImageUrl,
                        currentAvatarThumbnailImageUrl: a.currentAvatarThumbnailImageUrl,
                        status: a.status,
                        statusDescription: a.statusDescription,
                        state: a.state,
                        tags: a.tags,
                        developerType: a.developerType,
                        last_login: a.last_login,
                        last_platform: a.last_platform,
                        date_joined: a.date_joined,
                        allowAvatarCopying: a.allowAvatarCopying,
                        userIcon: a.userIcon,
                        fallbackAvatar: a.fallbackAvatar,
                        profilePicOverride: a.profilePicOverride,
                        isFriend: !1,
                        location: e.lastLocation.location
                    })
                })), y.$on("USER:CURRENT:SAVE", (function(e) {
                    this.$emit("USER:CURRENT", e)
                })), y.$on("USER", (function(e) {
                    e.ref = this.applyUser(e.json)
                })), y.$on("USER:LIST", (function(e) {
                    for (var t of e.json) this.$emit("USER", {
                        json: t,
                        params: {
                            userId: t.id
                        }
                    })
                })), y.logout = function() {
                    this.$emit("LOGOUT")
                }, y.login = function(t) {
                    var {
                        username: a,
                        password: i,
                        saveCredentials: s,
                        cipher: r
                    } = t;
                    a = encodeURIComponent(a), i = encodeURIComponent(i);
                    var o = btoa(`${a}:${i}`);
                    return s && (delete t.saveCredentials, r && (t.password = r, delete t.cipher), e.saveCredentials = t), this.call(`auth/user?apiKey=${this.cachedConfig.clientApiKey}`, {
                        method: "GET",
                        headers: {
                            Authorization: `Basic ${o}`
                        }
                    }).then((e => {
                        var a = {
                            json: e,
                            params: t,
                            origin: !0
                        };
                        return e.requiresTwoFactorAuth ? this.$emit("USER:2FA", a) : this.$emit("USER:CURRENT", a), a
                    }))
                }, y.loginWithSteam = function(e) {
                    return this.call(`auth/steam?apiKey=${this.cachedConfig.clientApiKey}`, {
                        method: "POST",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e,
                            origin: !0
                        };
                        return t.requiresTwoFactorAuth ? this.$emit("USER:2FA", a) : this.$emit("USER:CURRENT", a), a
                    }))
                }, y.verifyOTP = function(e) {
                    return this.call("auth/twofactorauth/otp/verify", {
                        method: "POST",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("OTP", a), a
                    }))
                }, y.verifyTOTP = function(e) {
                    return this.call("auth/twofactorauth/totp/verify", {
                        method: "POST",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("TOTP", a), a
                    }))
                }, y.applyUserTrustLevel = function(t) {
                    t.$isModerator = t.developerType && "none" !== t.developerType, t.$isTroll = !1;
                    var {
                        tags: a
                    } = t;
                    a.includes("admin_moderator") && (t.$isModerator = !0), (a.includes("system_troll") || a.includes("system_probable_troll")) && (t.$isTroll = !0), a.includes("system_legend") && (t.$isLegend = !0), a.includes("system_trust_legend") ? (t.$trustLevel = "Veteran User", t.$trustClass = "x-tag-legend", t.$trustSortNum = 6) : a.includes("system_trust_veteran") ? (t.$trustLevel = "Trusted User", t.$trustClass = "x-tag-veteran", t.$trustSortNum = 5) : a.includes("system_trust_trusted") ? (t.$trustLevel = "Known User", t.$trustClass = "x-tag-trusted", t.$trustSortNum = 4) : a.includes("system_trust_known") ? (t.$trustLevel = "User", t.$trustClass = "x-tag-known", t.$trustSortNum = 3) : a.includes("system_trust_basic") ? (t.$trustLevel = "New User", t.$trustClass = "x-tag-basic", t.$trustSortNum = 2) : (t.$trustLevel = "Visitor", t.$trustClass = "x-tag-untrusted", t.$trustSortNum = 1), t.$trustColor = t.$trustClass, t.$isTroll && (t.$trustColor = "x-tag-troll", t.$trustSortNum += .1), e.legendColorOverride && t.$isLegend && (t.$trustColor = "x-tag-legendary", t.$trustSortNum += .2), t.$isModerator && (t.$trustColor = "x-tag-vip", t.$trustSortNum += .3)
                }, y.applyUserLanguage = function(e) {
                    e.$languages = [];
                    var {
                        tags: t
                    } = e;
                    for (var a of t)
                        if (!1 !== a.startsWith("language_")) {
                            var i = a.substr(9),
                                s = f[i];
                            void 0 !== s && e.$languages.push({
                                key: i,
                                value: s
                            })
                        }
                }, y.applyCurrentUser = function(e) {
                    var t = this.currentUser;
                    return this.isLoggedIn ? (Object.assign(t, e), t.homeLocation !== t.$homeLocation.tag && (t.$homeLocation = this.parseLocation(t.homeLocation)), t.$isVRCPlus = t.tags.includes("system_supporter"), this.applyUserTrustLevel(t), this.applyUserLanguage(t)) : ((t = {
                        id: "",
                        username: "",
                        displayName: "",
                        userIcon: "",
                        bio: "",
                        bioLinks: [],
                        pastDisplayNames: [],
                        friends: [],
                        currentAvatarImageUrl: "",
                        currentAvatarThumbnailImageUrl: "",
                        currentAvatar: "",
                        currentAvatarAssetUrl: "",
                        homeLocation: "",
                        twoFactorAuthEnabled: !1,
                        status: "",
                        statusDescription: "",
                        state: "",
                        tags: [],
                        developerType: "",
                        last_login: "",
                        last_platform: "",
                        date_joined: "",
                        allowAvatarCopying: !1,
                        onlineFriends: [],
                        activeFriends: [],
                        offlineFriends: [],
                        $homeLocation: {},
                        $isVRCPlus: !1,
                        $isModerator: !1,
                        $isTroll: !1,
                        $trustLevel: "Visitor",
                        $trustClass: "x-tag-untrusted",
                        $trustColor: "x-tag-untrusted",
                        $trustSortNum: 1,
                        $languages: [],
                        ...e
                    }).$homeLocation = this.parseLocation(t.homeLocation), t.$isVRCPlus = t.tags.includes("system_supporter"), this.applyUserTrustLevel(t), this.applyUserLanguage(t), this.currentUser = t, this.isLoggedIn = !0, this.$emit("LOGIN", {
                        json: e,
                        ref: t
                    })), t
                }, y.getCurrentUser = function() {
                    return this.call(`auth/user?apiKey=${this.cachedConfig.clientApiKey}`, {
                        method: "GET"
                    }).then((e => {
                        var t = {
                            json: e,
                            origin: !0
                        };
                        return e.requiresTwoFactorAuth ? this.$emit("USER:2FA", t) : this.$emit("USER:CURRENT", t), t
                    }))
                };
                var I = [],
                    b = null;
                y.applyUser = function(t) {
                    var a, i = this.cachedUsers.get(t.id);
                    if (t.id === y.currentUser.id && (t.status = y.currentUser.status, t.statusDescription = y.currentUser.statusDescription, e.isGameRunning ? t.state = "online" : t.state = "active", t.last_login = y.currentUser.last_login, void 0 !== t.location && "offline" === t.location && (t.location = ""), e.lastLocation.location && (t.location = e.lastLocation.location, t.$location_at = e.lastLocation.date), t.$online_for = y.currentUser.$online_for, t.$offline_for = y.currentUser.$offline_for), void 0 !== t.statusDescription && (t.statusDescription = e.replaceBioSymbols(t.statusDescription)), void 0 !== t.bio && (t.bio = e.replaceBioSymbols(t.bio)), t.currentAvatarImageUrl === e.robotUrl && (delete t.currentAvatarImageUrl, delete t.currentAvatarThumbnailImageUrl), void 0 === i) {
                        if (i = {
                                id: "",
                                username: "",
                                displayName: "",
                                userIcon: "",
                                bio: "",
                                bioLinks: [],
                                currentAvatarImageUrl: "",
                                currentAvatarThumbnailImageUrl: "",
                                status: "",
                                statusDescription: "",
                                state: "",
                                tags: [],
                                developerType: "",
                                last_login: "",
                                last_platform: "",
                                date_joined: "",
                                allowAvatarCopying: !1,
                                isFriend: !1,
                                location: "",
                                worldId: "",
                                instanceId: "",
                                $location: {},
                                $location_at: Date.now(),
                                $online_for: Date.now(),
                                $offline_for: "",
                                $isVRCPlus: !1,
                                $isModerator: !1,
                                $isTroll: !1,
                                $trustLevel: "Visitor",
                                $trustClass: "x-tag-untrusted",
                                $trustColor: "x-tag-untrusted",
                                $trustSortNum: 1,
                                $languages: [],
                                $joinCount: 0,
                                $timeSpent: 0,
                                $lastSeen: "",
                                $nickName: "",
                                ...t
                            }, !t.isFriend && e.lastLocation.playerList.has(t.displayName)) {
                            var s = e.lastLocation.playerList.get(t.displayName);
                            i.location = "offline", i.$location_at = s.joinTime, i.$online_for = s.joinTime
                        }
                        i.$location = this.parseLocation(i.location), i.$isVRCPlus = i.tags.includes("system_supporter"), this.applyUserTrustLevel(i), this.applyUserLanguage(i), this.cachedUsers.set(i.id, i)
                    } else {
                        var r = {};
                        for (var o in i) i[o] !== Object(i[o]) && (r[o] = !0);
                        var n = {
                            ...i
                        };
                        for (var o in Object.assign(i, t), i.location !== i.$location.tag && (i.$location = this.parseLocation(i.location)), i.$isVRCPlus = i.tags.includes("system_supporter"), this.applyUserTrustLevel(i), this.applyUserLanguage(i), i) i[o] !== Object(i[o]) && (r[o] = !0);
                        var d = !1;
                        for (var o in r) {
                            var l = n[o],
                                c = i[o];
                            l === c ? delete r[o] : (d = !0, r[o] = [c, l])
                        }
                        if (d && "offline" !== i.status && "offline" !== n.status) {
                            if (r.location) {
                                var u = Date.now();
                                r.location.push(u - i.$location_at), i.$location_at = u
                            }
                            a = {
                                ref: i,
                                props: r
                            }, I.push(a), null === b && (b = p.iK((() => {
                                b = null;
                                for (var {
                                        length: e
                                    } = I, t = 0; t < e; ++t) y.$emit("USER:UPDATE", I[t]);
                                I.length = 0
                            }), 1)), e.debugUserDiff && console.log(">", i.displayName, r)
                        }
                    }
                    return this.$emit("USER:APPLY", i), i
                }, y.getUser = function(e) {
                    return this.call(`users/${e.userId}`, {
                        method: "GET"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("USER", a), a
                    }))
                }, y.getCachedUser = function(e) {
                    return new Promise(((t, a) => {
                        var i = this.cachedUsers.get(e.userId);
                        void 0 === i ? this.getUser(e).catch(a).then(t) : t({
                            cache: !0,
                            json: i,
                            params: e,
                            ref: i
                        })
                    }))
                }, y.getUsers = function(e) {
                    return this.call("users", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("USER:LIST", a), a
                    }))
                }, y.getUserByUsername = function(e) {
                    return this.call(`users/${e.username}/name`, {
                        method: "GET"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("USER", a), a
                    }))
                }, y.saveCurrentUser = function(e) {
                    return this.call(`users/${this.currentUser.id}`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("USER:CURRENT:SAVE", a), a
                    }))
                }, y.addUserTags = function(e) {
                    return this.call(`users/${this.currentUser.id}/addTags`, {
                        method: "POST",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("USER:CURRENT:SAVE", a), a
                    }))
                }, y.removeUserTags = function(e) {
                    return this.call(`users/${this.currentUser.id}/removeTags`, {
                        method: "POST",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("USER:CURRENT:SAVE", a), a
                    }))
                }, y.cachedWorlds = new Map, y.$on("WORLD", (function(e) {
                    e.ref = this.applyWorld(e.json)
                })), y.$on("WORLD:LIST", (function(e) {
                    for (var t of e.json) this.$emit("WORLD", {
                        json: t,
                        params: {
                            worldId: t.id
                        }
                    })
                })), y.$on("WORLD:DELETE", (function(t) {
                    var {
                        json: a
                    } = t;
                    if (this.cachedWorlds.delete(a.id), e.worldDialog.ref.authorId === a.authorId) {
                        var i = new Map;
                        for (var s of this.cachedWorlds.values()) s.authorId === a.authorId && i.set(s.id, s);
                        var r = Array.from(i.values());
                        e.sortUserDialogWorlds(r)
                    }
                })), y.$on("WORLD:SAVE", (function(e) {
                    var {
                        json: t
                    } = e;
                    this.$emit("WORLD", {
                        json: t,
                        params: {
                            worldId: t.id
                        }
                    })
                })), y.applyWorld = function(e) {
                    var t = this.cachedWorlds.get(e.id);
                    return void 0 === t ? (t = {
                        id: "",
                        name: "",
                        description: "",
                        authorId: "",
                        authorName: "",
                        capacity: 0,
                        tags: [],
                        releaseStatus: "",
                        imageUrl: "",
                        thumbnailImageUrl: "",
                        assetUrl: "",
                        assetUrlObject: {},
                        pluginUrl: "",
                        pluginUrlObject: {},
                        unityPackageUrl: "",
                        unityPackageUrlObject: {},
                        unityPackages: [],
                        version: 0,
                        favorites: 0,
                        created_at: "",
                        updated_at: "",
                        publicationDate: "",
                        labsPublicationDate: "",
                        visits: 0,
                        popularity: 0,
                        heat: 0,
                        publicOccupants: 0,
                        privateOccupants: 0,
                        occupants: 0,
                        instances: [],
                        $isLabs: !1,
                        ...e
                    }, this.cachedWorlds.set(t.id, t)) : Object.assign(t, e), t.$isLabs = t.tags.includes("system_labs"), t
                }, y.getWorld = function(e) {
                    return this.call(`worlds/${e.worldId}`, {
                        method: "GET"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLD", a), a
                    }))
                }, y.getCachedWorld = function(e) {
                    return new Promise(((t, a) => {
                        var i = this.cachedWorlds.get(e.worldId);
                        void 0 === i ? this.getWorld(e).catch(a).then(t) : t({
                            cache: !0,
                            json: i,
                            params: e,
                            ref: i
                        })
                    }))
                }, y.getWorlds = function(e, t) {
                    var a = "worlds";
                    return void 0 !== t && (a = `worlds/${t}`), this.call(a, {
                        method: "GET",
                        params: e
                    }).then((a => {
                        var i = {
                            json: a,
                            params: e,
                            option: t
                        };
                        return this.$emit("WORLD:LIST", i), i
                    }))
                }, y.deleteWorld = function(e) {
                    return this.call(`worlds/${e.worldId}`, {
                        method: "DELETE"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLD:DELETE", a), a
                    }))
                }, y.saveWorld = function(e) {
                    return this.call(`worlds/${e.id}`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLD:SAVE", a), a
                    }))
                }, y.publishWorld = function(e) {
                    return this.call(`worlds/${e.worldId}/publish`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLD:SAVE", a), a
                    }))
                }, y.unpublishWorld = function(e) {
                    return this.call(`worlds/${e.worldId}/publish`, {
                        method: "DELETE",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLD:SAVE", a), a
                    }))
                }, y.getInstance = function(e) {
                    return this.call(`instances/${e.worldId}:${e.instanceId}`, {
                        method: "GET"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("INSTANCE", a), a
                    }))
                }, y.getInstanceShortName = function(e) {
                    return this.call(`instances/${e.worldId}:${e.instanceId}/shortName`, {
                        method: "GET"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("INSTANCE:SHORTNAME", a), a
                    }))
                }, y.selfInvite = function(e) {
                    return this.call(`instances/${e.worldId}:${e.instanceId}/invite`, {
                        method: "POST"
                    }).then((t => ({
                        json: t,
                        params: e
                    })))
                }, y.$on("INSTANCE", (function(t) {
                    var {
                        json: a
                    } = t;
                    if (a) {
                        var i = e.userDialog;
                        e.userDialog.visible && i.ref.location === a.id && (i.instance.occupants = a.n_users)
                    }
                })), y.$on("INSTANCE", (function(t) {
                    var {
                        json: a
                    } = t;
                    if (a) {
                        var i = e.worldDialog;
                        if (e.worldDialog.visible && e.worldDialog.id === a.worldId)
                            for (var s of i.rooms)
                                if (s.id === a.instanceId) {
                                    s.occupants = a.n_users;
                                    break
                                }
                    }
                })), y.$on("FRIEND:LIST", (function(e) {
                    for (var t of e.json) this.$emit("USER", {
                        json: t,
                        params: {
                            userId: t.id
                        }
                    })
                })), y.isRefreshFriendsLoading = !1, y.refreshFriends = async function() {
                    this.isRefreshFriendsLoading = !0;
                    try {
                        var e = await this.refreshOnlineFriends(),
                            t = await this.refreshOfflineFriends(),
                            a = e.concat(t);
                        return this.isRefreshFriendsLoading = !1, a
                    } catch (e) {
                        throw this.isRefreshFriendsLoading = !1, e
                    }
                }, y.refreshOnlineFriends = async function() {
                    for (var e = [], t = {
                            n: 50,
                            offset: 0,
                            offline: !1
                        }, a = this.currentUser.onlineFriends.length + this.currentUser.activeFriends.length, i = Math.trunc(a / 50); i > -1; i--) {
                        var s = await this.getFriends(t);
                        e = e.concat(s.json), t.offset += 50
                    }
                    return e
                }, y.refreshOfflineFriends = async function() {
                    for (var e = [], t = {
                            n: 50,
                            offset: 0,
                            offline: !0
                        }, a = this.currentUser.onlineFriends.length + this.currentUser.activeFriends.length, i = this.currentUser.friends.length - a, s = Math.trunc(i / 50); s > -1; s--) {
                        var r = await this.getFriends(t);
                        e = e.concat(r.json), t.offset += 50
                    }
                    return e
                }, y.getFriends = function(e) {
                    return this.call("auth/user/friends", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FRIEND:LIST", a), a
                    }))
                }, y.deleteFriend = function(e) {
                    return this.call(`auth/user/friends/${e.userId}`, {
                        method: "DELETE"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FRIEND:DELETE", a), a
                    }))
                }, y.sendFriendRequest = function(e) {
                    return this.call(`user/${e.userId}/friendRequest`, {
                        method: "POST"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FRIEND:REQUEST", a), a
                    }))
                }, y.cancelFriendRequest = function(e) {
                    return this.call(`user/${e.userId}/friendRequest`, {
                        method: "DELETE"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FRIEND:REQUEST:CANCEL", a), a
                    }))
                }, y.deleteHiddenFriendRequest = function(e, t) {
                    return this.call(`user/${t}/friendRequest`, {
                        method: "DELETE",
                        params: e
                    }).then((a => {
                        var i = {
                            json: a,
                            params: e,
                            userId: t
                        };
                        return this.$emit("NOTIFICATION:HIDE", i), i
                    }))
                }, y.getFriendStatus = function(e) {
                    return this.call(`user/${e.userId}/friendStatus`, {
                        method: "GET"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FRIEND:STATUS", a), a
                    }))
                }, y.cachedAvatars = new Map, y.$on("AVATAR", (function(e) {
                    e.ref = this.applyAvatar(e.json)
                })), y.$on("AVATAR:LIST", (function(e) {
                    for (var t of e.json) this.$emit("AVATAR", {
                        json: t,
                        params: {
                            avatarId: t.id
                        }
                    })
                })), y.$on("AVATAR:SAVE", (function(e) {
                    var {
                        json: t
                    } = e;
                    this.$emit("AVATAR", {
                        json: t,
                        params: {
                            avatarId: t.id
                        }
                    })
                })), y.$on("AVATAR:SELECT", (function(e) {
                    this.$emit("USER:CURRENT", e)
                })), y.$on("AVATAR:DELETE", (function(t) {
                    var {
                        json: a
                    } = t;
                    if (this.cachedAvatars.delete(a._id), e.userDialog.id === a.authorId) {
                        var i = new Map;
                        for (var s of this.cachedAvatars.values()) s.authorId === a.authorId && i.set(s.id, s);
                        var r = Array.from(i.values());
                        e.sortUserDialogAvatars(r)
                    }
                })), y.applyAvatar = function(e) {
                    var t = this.cachedAvatars.get(e.id);
                    return void 0 === t ? (t = {
                        id: "",
                        name: "",
                        description: "",
                        authorId: "",
                        authorName: "",
                        tags: [],
                        assetUrl: "",
                        assetUrlObject: {},
                        imageUrl: "",
                        thumbnailImageUrl: "",
                        releaseStatus: "",
                        version: 0,
                        unityPackages: [],
                        unityPackageUrl: "",
                        unityPackageUrlObject: {},
                        created_at: "",
                        updated_at: "",
                        ...e
                    }, this.cachedAvatars.set(t.id, t)) : Object.assign(t, e), t
                }, y.getAvatar = function(e) {
                    return this.call(`avatars/${e.avatarId}`, {
                        method: "GET"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATAR", a), a
                    }))
                }, y.getAvatars = function(e) {
                    return this.call("avatars", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATAR:LIST", a), a
                    }))
                }, y.saveAvatar = function(e) {
                    return this.call(`avatars/${e.id}`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATAR:SAVE", a), a
                    }))
                }, y.selectAvatar = function(e) {
                    return this.call(`avatars/${e.avatarId}/select`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATAR:SELECT", a), a
                    }))
                }, y.selectFallbackAvatar = function(e) {
                    return this.call(`avatars/${e.avatarId}/selectfallback`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATAR:SELECT", a), a
                    }))
                }, y.deleteAvatar = function(e) {
                    return this.call(`avatars/${e.avatarId}`, {
                        method: "DELETE"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATAR:DELETE", a), a
                    }))
                }, y.isNotificationsLoading = !1, y.$on("LOGIN", (function() {
                    this.isNotificationsLoading = !1
                })), y.$on("NOTIFICATION", (function(e) {
                    e.ref = this.applyNotification(e.json)
                })), y.$on("NOTIFICATION:LIST", (function(e) {
                    for (var t of e.json) this.$emit("NOTIFICATION", {
                        json: t,
                        params: {
                            notificationId: t.id
                        }
                    })
                })), y.$on("NOTIFICATION:LIST:HIDDEN", (function(e) {
                    for (var t of e.json) t.type = "hiddenFriendRequest", this.$emit("NOTIFICATION", {
                        json: t,
                        params: {
                            notificationId: t.id
                        }
                    })
                })), y.$on("NOTIFICATION:ACCEPT", (function(t) {
                    for (var a = e.notificationTable.data, i = a.length - 1; i >= 0; i--)
                        if (a[i].id === t.params.notificationId) {
                            var s = a[i];
                            break
                        } void 0 !== s && (s.$isExpired = !0, t.ref = s, this.$emit("NOTIFICATION:EXPIRE", {
                        ref: s,
                        params: {
                            notificationId: s.id
                        }
                    }), this.$emit("FRIEND:ADD", {
                        params: {
                            userId: s.senderUserId
                        }
                    }))
                })), y.$on("NOTIFICATION:HIDE", (function(t) {
                    for (var a = e.notificationTable.data, i = a.length - 1; i >= 0; i--)
                        if (a[i].id === t.params.notificationId) {
                            var s = a[i];
                            break
                        } if (void 0 !== s) {
                        if (t.ref = s, "friendRequest" === s.type || "hiddenFriendRequest" === s.type) {
                            for (i = a.length - 1; i >= 0; i--)
                                if (a[i].id === s.id) {
                                    a.splice(i, 1);
                                    break
                                }
                        } else s.$isExpired = !0, L.updateNotificationExpired(s);
                        this.$emit("NOTIFICATION:EXPIRE", {
                            ref: s,
                            params: {
                                notificationId: s.id
                            }
                        })
                    }
                })), y.applyNotification = function(t) {
                    for (var a = e.notificationTable.data, i = a.length - 1; i >= 0; i--)
                        if (a[i].id === t.id) {
                            var s = a[i];
                            break
                        } if (void 0 === s ? s = {
                            id: "",
                            senderUserId: "",
                            senderUsername: "",
                            type: "",
                            message: "",
                            details: {},
                            seen: !1,
                            created_at: "",
                            $isExpired: !1,
                            ...t
                        } : (Object.assign(s, t), s.$isExpired = !1), s.details !== Object(s.details)) {
                        var r = {};
                        if ("{}" !== s.details) try {
                            var o = JSON.parse(s.details);
                            o === Object(o) && (r = o)
                        } catch (e) {}
                        s.details = r
                    }
                    return s
                }, y.expireFriendRequestNotifications = function() {
                    for (var t = e.notificationTable.data, a = t.length - 1; a >= 0; a--) "friendRequest" !== t[a].type && "hiddenFriendRequest" !== t[a].type || t.splice(a, 1)
                }, y.expireNotification = function(t) {
                    for (var a = e.notificationTable.data, i = a.length - 1; i >= 0; i--)
                        if (a[i].id === t) {
                            var s = a[i];
                            break
                        } void 0 !== s && (s.$isExpired = !0, L.updateNotificationExpired(s), this.$emit("NOTIFICATION:EXPIRE", {
                        ref: s,
                        params: {
                            notificationId: s.id
                        }
                    }))
                }, y.refreshNotifications = async function() {
                    this.isNotificationsLoading = !0, this.expireFriendRequestNotifications();
                    for (var t = {
                            n: 100,
                            offset: 0
                        }, a = 50, i = 0; i < a; i++) {
                        var s = await this.getNotifications(t);
                        if (e.unseenNotifications = [], t.offset += 100, s.json.length < 100) break
                    }
                    for (t = {
                            n: 100,
                            offset: 0
                        }, a = 50, i = 0; i < a; i++) {
                        s = await this.getHiddenFriendRequests(t);
                        if (e.unseenNotifications = [], t.offset += 100, s.json.length < 100) break
                    }
                    this.isNotificationsLoading = !1
                }, y.getNotifications = function(e) {
                    return this.call("auth/user/notifications", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("NOTIFICATION:LIST", a), a
                    }))
                }, y.getHiddenFriendRequests = function(e) {
                    return this.call("auth/user/notifications", {
                        method: "GET",
                        params: {
                            type: "friendRequest",
                            hidden: !0,
                            ...e
                        }
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("NOTIFICATION:LIST:HIDDEN", a), a
                    }))
                }, y.clearNotifications = function() {
                    return this.call("auth/user/notifications/clear", {
                        method: "PUT"
                    }).then((e => {
                        var t = {
                            json: e
                        };
                        return this.$emit("NOTIFICATION:CLEAR", t), t
                    }))
                }, y.sendInvite = function(e, t) {
                    return this.call(`invite/${t}`, {
                        method: "POST",
                        params: e
                    }).then((a => {
                        var i = {
                            json: a,
                            params: e,
                            receiverUserId: t
                        };
                        return this.$emit("NOTIFICATION:INVITE:SEND", i), i
                    }))
                }, y.sendInvitePhoto = function(t, a) {
                    return this.call(`invite/${a}/photo`, {
                        uploadImage: !0,
                        postData: JSON.stringify(t),
                        imageData: e.uploadImage
                    }).then((e => {
                        var i = {
                            json: e,
                            params: t,
                            receiverUserId: a
                        };
                        return this.$emit("NOTIFICATION:INVITE:PHOTO:SEND", i), i
                    }))
                }, y.sendRequestInvite = function(e, t) {
                    return this.call(`requestInvite/${t}`, {
                        method: "POST",
                        params: e
                    }).then((a => {
                        var i = {
                            json: a,
                            params: e,
                            receiverUserId: t
                        };
                        return this.$emit("NOTIFICATION:REQUESTINVITE:SEND", i), i
                    }))
                }, y.sendRequestInvitePhoto = function(t, a) {
                    return this.call(`requestInvite/${a}/photo`, {
                        uploadImage: !0,
                        postData: JSON.stringify(t),
                        imageData: e.uploadImage
                    }).then((e => {
                        var i = {
                            json: e,
                            params: t,
                            receiverUserId: a
                        };
                        return this.$emit("NOTIFICATION:REQUESTINVITE:PHOTO:SEND", i), i
                    }))
                }, y.sendInviteResponse = function(e, t) {
                    return this.call(`invite/${t}/response`, {
                        method: "POST",
                        params: e,
                        inviteId: t
                    }).then((a => {
                        var i = {
                            json: a,
                            params: e,
                            inviteId: t
                        };
                        return this.$emit("INVITE:RESPONSE:SEND", i), i
                    }))
                }, y.sendInviteResponsePhoto = function(t, a) {
                    return this.call(`invite/${a}/response/photo`, {
                        uploadImage: !0,
                        postData: JSON.stringify(t),
                        imageData: e.uploadImage,
                        inviteId: a
                    }).then((e => {
                        var i = {
                            json: e,
                            params: t,
                            inviteId: a
                        };
                        return this.$emit("INVITE:RESPONSE:PHOTO:SEND", i), i
                    }))
                }, y.acceptNotification = function(e) {
                    return this.call(`auth/user/notifications/${e.notificationId}/accept`, {
                        method: "PUT"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("NOTIFICATION:ACCEPT", a), a
                    }))
                }, y.hideNotification = function(e) {
                    return this.call(`auth/user/notifications/${e.notificationId}/hide`, {
                        method: "PUT"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("NOTIFICATION:HIDE", a), a
                    }))
                }, y.getFriendRequest = function(t) {
                    for (var a = e.notificationTable.data, i = a.length - 1; i >= 0; i--)
                        if ("friendRequest" === a[i].type && a[i].senderUserId === t) return a[i].id;
                    return ""
                }, y.cachedPlayerModerations = new Map, y.isPlayerModerationsLoading = !1, y.$on("LOGIN", (function() {
                    this.cachedPlayerModerations.clear(), this.isPlayerModerationsLoading = !1, this.refreshPlayerModerations()
                })), y.$on("PLAYER-MODERATION", (function(e) {
                    e.ref = this.applyPlayerModeration(e.json)
                })), y.$on("PLAYER-MODERATION:LIST", (function(e) {
                    for (var t of e.json) this.$emit("PLAYER-MODERATION", {
                        json: t,
                        params: {
                            playerModerationId: t.id
                        }
                    })
                })), y.$on("PLAYER-MODERATION:SEND", (function(e) {
                    var t = {
                        json: e.json,
                        params: {
                            playerModerationId: e.json.id
                        }
                    };
                    this.$emit("PLAYER-MODERATION", t), this.$emit("PLAYER-MODERATION:@SEND", t)
                })), y.$on("PLAYER-MODERATION:DELETE", (function(e) {
                    var {
                        type: t,
                        moderated: a
                    } = e.params, i = this.currentUser.id;
                    for (var s of this.cachedPlayerModerations.values()) !1 === s.$isDeleted && s.type === t && s.targetUserId === a && s.sourceUserId === i && (s.$isDeleted = !0, this.$emit("PLAYER-MODERATION:@DELETE", {
                        ref: s,
                        params: {
                            playerModerationId: s.id
                        }
                    }))
                })), y.applyPlayerModeration = function(e) {
                    var t = this.cachedPlayerModerations.get(e.id);
                    return void 0 === t ? (t = {
                        id: "",
                        type: "",
                        sourceUserId: "",
                        sourceDisplayName: "",
                        targetUserId: "",
                        targetDisplayName: "",
                        created: "",
                        $isDeleted: !1,
                        $isExpired: !1,
                        ...e
                    }, this.cachedPlayerModerations.set(t.id, t)) : (Object.assign(t, e), t.$isExpired = !1), t
                }, y.expirePlayerModerations = function() {
                    for (var e of this.cachedPlayerModerations.values()) e.$isExpired = !0
                }, y.deleteExpiredPlayerModerations = function() {
                    for (var e of this.cachedPlayerModerations.values()) e.$isDeleted || !1 === e.$isExpired || (e.$isDeleted = !0, this.$emit("PLAYER-MODERATION:@DELETE", {
                        ref: e,
                        params: {
                            playerModerationId: e.id
                        }
                    }))
                }, y.refreshPlayerModerations = function() {
                    this.isPlayerModerationsLoading || (this.isPlayerModerationsLoading = !0, this.expirePlayerModerations(), Promise.all([this.getPlayerModerations()]).finally((() => {
                        this.isPlayerModerationsLoading = !1
                    })).then((() => {
                        this.deleteExpiredPlayerModerations()
                    })))
                }, y.getPlayerModerations = function() {
                    return this.call("auth/user/playermoderations", {
                        method: "GET"
                    }).then((e => {
                        var t = {
                            json: e
                        };
                        return this.$emit("PLAYER-MODERATION:LIST", t), t
                    }))
                }, y.getPlayerModerationsAgainstMe = function() {
                    return this.call("auth/user/playermoderated", {
                        method: "GET"
                    }).then((e => {
                        var t = {
                            json: e
                        };
                        return this.$emit("PLAYER-MODERATION:LIST", t), t
                    }))
                }, y.sendPlayerModeration = function(e) {
                    return this.call("auth/user/playermoderations", {
                        method: "POST",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("PLAYER-MODERATION:SEND", a), a
                    }))
                }, y.deletePlayerModeration = function(e) {
                    return this.call("auth/user/unplayermoderate", {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("PLAYER-MODERATION:DELETE", a), a
                    }))
                }, y.cachedFavorites = new Map, y.cachedFavoritesByObjectId = new Map, y.cachedFavoriteGroups = new Map, y.cachedFavoriteGroupsByTypeName = new Map, y.favoriteFriendGroups = [], y.favoriteWorldGroups = [], y.favoriteAvatarGroups = [], y.isFavoriteLoading = !1, y.isFavoriteGroupLoading = !1, y.$on("LOGIN", (function() {
                    this.cachedFavorites.clear(), this.cachedFavoritesByObjectId.clear(), this.cachedFavoriteGroups.clear(), this.cachedFavoriteGroupsByTypeName.clear(), this.favoriteFriendGroups = [], this.favoriteWorldGroups = [], this.favoriteAvatarGroups = [], this.isFavoriteLoading = !1, this.isFavoriteGroupLoading = !1, this.refreshFavorites()
                })), y.$on("FAVORITE", (function(e) {
                    var t = this.applyFavorite(e.json);
                    t.$isDeleted || (e.ref = t)
                })), y.$on("FAVORITE:@DELETE", (function(e) {
                    var {
                        ref: t
                    } = e;
                    null !== t.$groupRef && --t.$groupRef.count
                })), y.$on("FAVORITE:LIST", (function(e) {
                    for (var t of e.json) this.$emit("FAVORITE", {
                        json: t,
                        params: {
                            favoriteId: t.id
                        }
                    })
                })), y.$on("FAVORITE:ADD", (function(e) {
                    this.$emit("FAVORITE", {
                        json: e.json,
                        params: {
                            favoriteId: e.json.id
                        }
                    })
                })), y.$on("FAVORITE:ADD", (function(e) {
                    "avatar" !== e.params.type || y.cachedAvatars.has(e.params.favoriteId) || this.refreshFavoriteAvatars(e.params.tags)
                })), y.$on("FAVORITE:DELETE", (function(e) {
                    var t = this.cachedFavoritesByObjectId.get(e.params.objectId);
                    void 0 !== t && (this.cachedFavoritesByObjectId.delete(e.params.objectId), t.$isDeleted || (e.ref = t, t.$isDeleted = !0, y.$emit("FAVORITE:@DELETE", {
                        ref: t,
                        params: {
                            favoriteId: t.id
                        }
                    })))
                })), y.$on("FAVORITE:GROUP", (function(e) {
                    var t = this.applyFavoriteGroup(e.json);
                    t.$isDeleted || (e.ref = t, null !== t.$groupRef && (t.$groupRef.displayName = t.displayName, t.$groupRef.visibility = t.visibility))
                })), y.$on("FAVORITE:GROUP:LIST", (function(e) {
                    for (var t of e.json) this.$emit("FAVORITE:GROUP", {
                        json: t,
                        params: {
                            favoriteGroupId: t.id
                        }
                    })
                })), y.$on("FAVORITE:GROUP:SAVE", (function(e) {
                    this.$emit("FAVORITE:GROUP", {
                        json: e.json,
                        params: {
                            favoriteGroupId: e.json.id
                        }
                    })
                })), y.$on("FAVORITE:GROUP:CLEAR", (function(e) {
                    var t = `${e.params.type}:${e.params.group}`;
                    for (var a of this.cachedFavorites.values()) a.$isDeleted || a.$groupKey !== t || (this.cachedFavoritesByObjectId.delete(a.favoriteId), a.$isDeleted = !0, y.$emit("FAVORITE:@DELETE", {
                        ref: a,
                        params: {
                            favoriteId: a.id
                        }
                    }))
                })), y.$on("FAVORITE:WORLD:LIST", (function(e) {
                    for (var t of e.json) "???" !== t.id && this.$emit("WORLD", {
                        json: t,
                        params: {
                            worldId: t.id
                        }
                    })
                })), y.$on("FAVORITE:AVATAR:LIST", (function(e) {
                    for (var t of e.json) "hidden" !== t.releaseStatus && this.$emit("AVATAR", {
                        json: t,
                        params: {
                            avatarId: t.id
                        }
                    })
                })), y.applyFavorite = function(e) {
                    var t = this.cachedFavorites.get(e.id);
                    if (void 0 === t ? (t = {
                            id: "",
                            type: "",
                            favoriteId: "",
                            tags: [],
                            $isDeleted: !1,
                            $isExpired: !1,
                            $groupKey: "",
                            $groupRef: null,
                            ...e
                        }, this.cachedFavorites.set(t.id, t), this.cachedFavoritesByObjectId.set(t.favoriteId, t)) : (Object.assign(t, e), t.$isExpired = !1), t.$groupKey = `${t.type}:${String(t.tags[0])}`, !1 === t.$isDeleted && null === t.$groupRef) {
                        var a = this.cachedFavoriteGroupsByTypeName.get(t.$groupKey);
                        void 0 !== a && (t.$groupRef = a, ++a.count)
                    }
                    return t
                }, y.expireFavorites = function() {
                    for (var e of this.cachedFavorites.values()) e.$isExpired = !0
                }, y.deleteExpiredFavorites = function() {
                    for (var e of this.cachedFavorites.values()) e.$isDeleted || !1 === e.$isExpired || (e.$isDeleted = !0, this.$emit("FAVORITE:@DELETE", {
                        ref: e,
                        params: {
                            favoriteId: e.id
                        }
                    }))
                }, y.refreshFavoriteAvatars = function(e) {
                    var t = {
                        n: Math.floor(51 * Math.random()) + 50,
                        offset: 0,
                        tag: e
                    };
                    this.getFavoriteAvatars(t)
                }, y.refreshFavoriteItems = function() {
                    var e = {
                            world: [0, "getFavoriteWorlds"],
                            avatar: [0, "getFavoriteAvatars"]
                        },
                        t = [];
                    for (var a of this.cachedFavorites.values()) {
                        if (!a.$isDeleted) void 0 !== (i = e[a.type]) && ("avatar" !== a.type || t.includes(a.tags[0]) || t.push(a.tags[0]), ++i[0])
                    }
                    for (var i in e) {
                        var [s, r] = e[i];
                        if (s > 0)
                            if ("avatar" === i)
                                for (var o of t) {
                                    var n = Math.floor(51 * Math.random()) + 50;
                                    this.bulk({
                                        fn: r,
                                        N: s,
                                        params: {
                                            n,
                                            offset: 0,
                                            tag: o
                                        }
                                    })
                                } else {
                                    n = Math.floor(37 * Math.random()) + 64;
                                    this.bulk({
                                        fn: r,
                                        N: s,
                                        params: {
                                            n,
                                            offset: 0
                                        }
                                    })
                                }
                    }
                }, y.refreshFavorites = function() {
                    this.isFavoriteLoading || (this.isFavoriteLoading = !0, this.expireFavorites(), this.bulk({
                        fn: "getFavorites",
                        N: -1,
                        params: {
                            n: 50,
                            offset: 0
                        },
                        done(e) {
                            e && this.deleteExpiredFavorites(), this.refreshFavoriteItems(), this.refreshFavoriteGroups(), this.isFavoriteLoading = !1
                        }
                    }))
                }, y.applyFavoriteGroup = function(e) {
                    var t = this.cachedFavoriteGroups.get(e.id);
                    return void 0 === t ? (t = {
                        id: "",
                        ownerId: "",
                        ownerDisplayName: "",
                        name: "",
                        displayName: "",
                        type: "",
                        visibility: "",
                        tags: [],
                        $isDeleted: !1,
                        $isExpired: !1,
                        $groupRef: null,
                        ...e
                    }, this.cachedFavoriteGroups.set(t.id, t)) : (Object.assign(t, e), t.$isExpired = !1), t
                }, y.buildFavoriteGroups = function() {
                    this.favoriteFriendGroups = [];
                    for (var e = 0; e < 3; ++e) this.favoriteFriendGroups.push({
                        assign: !1,
                        key: `friend:group_${e}`,
                        type: "friend",
                        name: `group_${e}`,
                        displayName: `Group ${e+1}`,
                        capacity: 64,
                        count: 0,
                        visibility: "private"
                    });
                    this.favoriteWorldGroups = [];
                    for (e = 0; e < 4; ++e) this.favoriteWorldGroups.push({
                        assign: !1,
                        key: `world:worlds${e+1}`,
                        type: "world",
                        name: `worlds${e+1}`,
                        displayName: `Group ${e+1}`,
                        capacity: 64,
                        count: 0,
                        visibility: "private"
                    });
                    var t = ["Favorite Avatars", "VRC+ Group 1", "VRC+ Group 2", "VRC+ Group 3"];
                    this.favoriteAvatarGroups = [];
                    for (e = 0; e < 4; ++e) this.favoriteAvatarGroups.push({
                        assign: !1,
                        key: `avatar:avatars${e+1}`,
                        type: "avatar",
                        name: `avatars${e+1}`,
                        displayName: t[e],
                        capacity: 25,
                        count: 0,
                        visibility: "private"
                    });
                    var a = {
                            friend: this.favoriteFriendGroups,
                            world: this.favoriteWorldGroups,
                            avatar: this.favoriteAvatarGroups
                        },
                        i = new Set;
                    for (var s of this.cachedFavoriteGroups.values()) {
                        if (!s.$isDeleted)
                            if (void 0 !== (o = a[s.type]))
                                for (var r of o)
                                    if (!1 === r.assign && r.name === s.name) {
                                        r.assign = !0, "avatar" !== s.type && (r.displayName = s.displayName), r.visibility = s.visibility, s.$groupRef = r, i.add(s.id);
                                        break
                                    }
                    }
                    for (var s of this.cachedFavoriteGroups.values()) {
                        var o;
                        if (!s.$isDeleted && !i.has(s.id))
                            if (void 0 !== (o = a[s.type]))
                                for (var r of o)
                                    if (!1 === r.assign) {
                                        r.assign = !0, r.key = `${r.type}:${s.name}`, r.name = s.name, "avatar" !== s.type && (r.displayName = s.displayName), s.$groupRef = r, i.add(s.id);
                                        break
                                    }
                    }
                    for (var n in this.cachedFavoriteGroupsByTypeName.clear(), a)
                        for (var r of a[n]) this.cachedFavoriteGroupsByTypeName.set(r.key, r);
                    for (var s of this.cachedFavorites.values()) {
                        if (s.$groupRef = null, !s.$isDeleted) void 0 !== (r = this.cachedFavoriteGroupsByTypeName.get(s.$groupKey)) && (s.$groupRef = r, ++r.count)
                    }
                }, y.expireFavoriteGroups = function() {
                    for (var e of this.cachedFavoriteGroups.values()) e.$isExpired = !0
                }, y.deleteExpiredFavoriteGroups = function() {
                    for (var e of this.cachedFavoriteGroups.values()) e.$isDeleted || !1 === e.$isExpired || (e.$isDeleted = !0, this.$emit("FAVORITE:GROUP:@DELETE", {
                        ref: e,
                        params: {
                            favoriteGroupId: e.id
                        }
                    }))
                }, y.refreshFavoriteGroups = function() {
                    this.isFavoriteGroupLoading || (this.isFavoriteGroupLoading = !0, this.expireFavoriteGroups(), this.bulk({
                        fn: "getFavoriteGroups",
                        N: -1,
                        params: {
                            n: 50,
                            offset: 0
                        },
                        done(e) {
                            e && (this.deleteExpiredFavoriteGroups(), this.buildFavoriteGroups()), this.isFavoriteGroupLoading = !1
                        }
                    }))
                }, y.getFavorites = function(e) {
                    return this.call("favorites", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FAVORITE:LIST", a), a
                    }))
                }, y.addFavorite = function(e) {
                    return this.call("favorites", {
                        method: "POST",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FAVORITE:ADD", a), a
                    }))
                }, y.deleteFavorite = function(e) {
                    return this.call(`favorites/${e.objectId}`, {
                        method: "DELETE"
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FAVORITE:DELETE", a), a
                    }))
                }, y.getFavoriteGroups = function(e) {
                    return this.call("favorite/groups", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FAVORITE:GROUP:LIST", a), a
                    }))
                }, y.saveFavoriteGroup = function(e) {
                    return this.call(`favorite/group/${e.type}/${e.group}/${this.currentUser.id}`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FAVORITE:GROUP:SAVE", a), a
                    }))
                }, y.clearFavoriteGroup = function(e) {
                    return this.call(`favorite/group/${e.type}/${e.group}/${this.currentUser.id}`, {
                        method: "DELETE",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FAVORITE:GROUP:CLEAR", a), a
                    }))
                }, y.getFavoriteWorlds = function(e) {
                    return this.call("worlds/favorites", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FAVORITE:WORLD:LIST", a), a
                    }))
                }, y.getFavoriteAvatars = function(e) {
                    return this.call("avatars/favorites", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FAVORITE:AVATAR:LIST", a), a
                    }))
                }, y.webSocket = null, y.$on("LOGOUT", (function() {
                    this.closeWebSocket()
                })), y.$on("USER:CURRENT", (function() {
                    e.friendLogInitStatus && null === this.webSocket && this.getAuth()
                })), y.$on("AUTH", (function(e) {
                    e.json.ok && this.connectWebSocket(e.json.token)
                })), y.$on("PIPELINE", (function(e) {
                    var {
                        type: t,
                        content: a
                    } = e.json;
                    switch (void 0 !== a.user && delete a.user.state, t) {
                        case "notification":
                            this.$emit("NOTIFICATION", {
                                json: a,
                                params: {
                                    notificationId: a.id
                                }
                            });
                            break;
                        case "see-notification":
                            this.$emit("NOTIFICATION:SEE", {
                                params: {
                                    notificationId: a
                                }
                            });
                            break;
                        case "hide-notification":
                            this.$emit("NOTIFICATION:HIDE", {
                                params: {
                                    notificationId: a
                                }
                            }), this.$emit("NOTIFICATION:SEE", {
                                params: {
                                    notificationId: a
                                }
                            });
                            break;
                        case "friend-add":
                            this.$emit("USER", {
                                json: a.user,
                                params: {
                                    userId: a.userId
                                }
                            }), this.$emit("FRIEND:ADD", {
                                params: {
                                    userId: a.userId
                                }
                            });
                            break;
                        case "friend-delete":
                            this.$emit("FRIEND:DELETE", {
                                params: {
                                    userId: a.userId
                                }
                            });
                            break;
                        case "friend-online":
                            "private" !== a.location && this.$emit("WORLD", {
                                json: a.world,
                                params: {
                                    worldId: a.world.id
                                }
                            }), this.$emit("USER", {
                                json: {
                                    location: a.location,
                                    ...a.user
                                },
                                params: {
                                    userId: a.userId
                                }
                            }), this.$emit("FRIEND:STATE", {
                                json: {
                                    state: "online"
                                },
                                params: {
                                    userId: a.userId
                                }
                            });
                            break;
                        case "friend-active":
                            this.$emit("USER", {
                                json: a.user,
                                params: {
                                    userId: a.userId
                                }
                            }), this.$emit("FRIEND:STATE", {
                                json: {
                                    state: "active"
                                },
                                params: {
                                    userId: a.userId
                                }
                            });
                            break;
                        case "friend-offline":
                            this.$emit("FRIEND:STATE", {
                                json: {
                                    state: "offline"
                                },
                                params: {
                                    userId: a.userId
                                }
                            });
                            break;
                        case "friend-update":
                            this.$emit("USER", {
                                json: a.user,
                                params: {
                                    userId: a.userId
                                }
                            });
                            break;
                        case "friend-location":
                            "private" !== a.location && this.$emit("WORLD", {
                                json: a.world,
                                params: {
                                    worldId: a.world.id
                                }
                            }), a.userId === this.currentUser.id ? this.$emit("USER", {
                                json: a.user,
                                params: {
                                    userId: a.userId
                                }
                            }) : this.$emit("USER", {
                                json: {
                                    location: a.location,
                                    ...a.user
                                },
                                params: {
                                    userId: a.userId
                                }
                            });
                            break;
                        case "user-update":
                            this.$emit("USER:CURRENT", {
                                json: a.user,
                                params: {
                                    userId: a.userId
                                }
                            });
                            break;
                        case "user-location":
                            a.world === Object(a.world) && this.$emit("WORLD", {
                                json: a.world,
                                params: {
                                    worldId: a.world.id
                                }
                            }), this.$emit("USER", {
                                json: {
                                    id: a.userId,
                                    location: a.location
                                },
                                params: {
                                    userId: a.userId
                                }
                            })
                    }
                })), y.getAuth = function() {
                    return this.call("auth", {
                        method: "GET"
                    }).then((e => {
                        var t = {
                            json: e
                        };
                        return this.$emit("AUTH", t), t
                    }))
                }, y.connectWebSocket = function(t) {
                    if (null === this.webSocket) {
                        var a = new WebSocket(`wss://pipeline.vrchat.cloud/?auth=${t}`);
                        a.onclose = () => {
                            this.webSocket === a && (this.webSocket = null);
                            try {
                                a.close()
                            } catch (e) {}
                        }, a.onerror = a.onclose, a.onmessage = ({
                            data: t
                        }) => {
                            try {
                                var a = JSON.parse(t);
                                try {
                                    a.content = JSON.parse(a.content)
                                } catch (e) {}
                                if (this.$emit("PIPELINE", {
                                        json: a
                                    }), e.debugWebSocket && a.content) {
                                    var i = "",
                                        s = this.cachedUsers.get(a.content.userId);
                                    s && (i = s.displayName), console.log("WebSocket", a.type, i, a.content)
                                }
                            } catch (e) {
                                console.error(e)
                            }
                        }, this.webSocket = a
                    }
                }, y.closeWebSocket = function() {
                    var e = this.webSocket;
                    if (null !== e) {
                        this.webSocket = null;
                        try {
                            e.close()
                        } catch (e) {}
                    }
                }, y.getVisits = function() {
                    return this.call("visits", {
                        method: "GET"
                    }).then((e => {
                        var t = {
                            json: e
                        };
                        return this.$emit("VISITS", t), t
                    }))
                };
                var T = e => {
                        var t = String(e).match(/file_[0-9A-Za-z-]+/);
                        return t ? t[0] : ""
                    },
                    S = e => {
                        var t = /(?:\/file_[0-9A-Za-z-]+\/)([0-9]+)/gi.exec(e);
                        return t ? t[1] : ""
                    },
                    D = e => {
                        var t = [];
                        for (var a in e) {
                            var i = e[a];
                            Array.isArray(i) ? t.push({
                                children: i.map(((e, t) => e === Object(e) ? {
                                    children: D(e),
                                    key: t
                                } : {
                                    key: t,
                                    value: e
                                })),
                                key: a
                            }) : i === Object(i) ? t.push({
                                children: D(i),
                                key: a
                            }) : t.push({
                                key: a,
                                value: String(i)
                            })
                        }
                        return t.sort((function(e, t) {
                            var a = String(e.key).toUpperCase(),
                                i = String(t.key).toUpperCase();
                            return a < i ? -1 : a > i ? 1 : 0
                        })), t
                    },
                    A = [];
                o().component("timer", {
                    template: '<span v-text="text"></span>',
                    props: {
                        epoch: {
                            type: Number,
                            default: () => Date.now()
                        }
                    },
                    data: () => ({
                        text: ""
                    }),
                    methods: {
                        update() {
                            this.text = r(Date.now() - this.epoch)
                        }
                    },
                    watch: {
                        date() {
                            this.update()
                        }
                    },
                    mounted() {
                        A.push(this), this.update()
                    },
                    destroyed() {
                        a(A, this)
                    }
                }), p.Zi((function() {
                    for (var e of A) e.update()
                }), 5e3);
                var N = [];
                o().component("countdown-timer", {
                    template: '<span v-text="text"></span>',
                    props: {
                        datetime: {
                            type: String,
                            default: () => ""
                        },
                        hours: {
                            type: Number,
                            default: () => 1
                        }
                    },
                    data: () => ({
                        text: ""
                    }),
                    methods: {
                        update() {
                            var e = new Date(this.datetime).getTime() + 36e5 * this.hours - Date.now();
                            this.text = e >= 0 ? r(e) : ""
                        }
                    },
                    watch: {
                        date() {
                            this.update()
                        }
                    },
                    mounted() {
                        N.push(this), this.update()
                    },
                    destroyed() {
                        a(N, this)
                    }
                }), p.Zi((function() {
                    for (var e of N) e.update()
                }), 5e3), (e = {
                    data: {
                        API: y,
                        nextCurrentUserRefresh: 0,
                        nextFriendsRefresh: 0,
                        nextAppUpdateCheck: 0,
                        ipcTimeout: 0,
                        nextClearVRCXCacheCheck: 0,
                        isGameRunning: !1,
                        isGameNoVR: !1,
                        isSteamVRRunning: !1,
                        appVersion: m,
                        latestAppVersion: "",
                        ossDialog: !1,
                        exportFriendsListDialog: !1,
                        exportFriendsListContent: ""
                    },
                    computed: {},
                    methods: {},
                    watch: {},
                    el: "#x-app",
                    mounted() {
                        y.$on("SHOW_WORLD_DIALOG", (e => this.showWorldDialog(e))), y.$on("SHOW_LAUNCH_DIALOG", (e => this.showLaunchDialog(e))), this.updateLoop(), this.getGameLogTable(), this.refreshCustomCss(), this.$nextTick((function() {
                            this.$el.style.display = "", this.enablePrimaryPassword ? this.loginForm.loading = !1 : (this.loginForm.loading = !0, y.getConfig().catch((e => {
                                throw this.loginForm.loading = !1, e
                            })).then((e => (y.getCurrentUser().finally((() => {
                                this.loginForm.loading = !1
                            })), e))))
                        }))
                    }
                }).methods.refreshCustomCss = function() {
                    document.contains(document.getElementById("app-custom-style")) && document.getElementById("app-custom-style").remove(), AppApi.CustomCssPath().then((e => {
                        var t = document.head;
                        if (e) {
                            var a = document.createElement("link");
                            a.setAttribute("id", "app-custom-style"), a.rel = "stylesheet", a.href = `file://${e}?_=${Date.now()}`, t.appendChild(a)
                        }
                    }))
                }, e.methods.openExternalLink = function(e) {
                    this.$confirm(`${e}`, "외부 링크 열기", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && AppApi.OpenLink(e)
                        }
                    })
                }, e.methods.languageClass = function(e) {
                    var t = {},
                        a = v[e];
                    return void 0 !== a && (t[a] = !0), t
                }, e.methods.updateLoop = function() {
                    try {
                        !0 === y.isLoggedIn && (--this.nextCurrentUserRefresh <= 0 && (this.nextCurrentUserRefresh = 60, y.getCurrentUser().catch((e => {
                            throw e
                        }))), --this.nextFriendsRefresh <= 0 && (this.nextFriendsRefresh = 7200, y.refreshFriends(), this.updateStoredUser(y.currentUser), this.isGameRunning && y.refreshPlayerModerations()), --this.nextAppUpdateCheck <= 0 && (this.nextAppUpdateCheck = 43200, "Off" !== this.autoUpdateVRCX && this.checkForVRCXUpdate()), --this.ipcTimeout <= 0 && (this.ipcEnabled = !1), --this.nextClearVRCXCacheCheck <= 0 && this.clearVRCXCacheFrequency > 0 && (this.nextClearVRCXCacheCheck = this.clearVRCXCacheFrequency, this.clearVRCXCache()), AppApi.CheckGameRunning().then((([e, t, a]) => {
                            this.updateOpenVR(e, t, a), e !== this.isGameRunning && (this.isGameRunning = e, e ? (y.currentUser.$online_for = Date.now(), y.currentUser.$offline_for = "") : (y.currentUser.$online_for = "", y.currentUser.$offline_for = Date.now(), Discord.SetActive(!1), this.autoVRChatCacheManagement(), this.ipcTimeout = 0), this.lastLocationReset(), this.clearNowPlaying(), this.updateVRLastLocation()), t !== this.isGameNoVR && (this.isGameNoVR = t, this.updateVRLastLocation()), a !== this.isSteamVRRunning && (this.isSteamVRRunning = a), this.updateDiscord()
                        })))
                    } catch (e) {
                        y.isRefreshFriendsLoading = !1, console.error(e)
                    }
                    p.iK((() => this.updateLoop()), 500)
                }, e.data.debug = !1, e.data.debugWebRequests = !1, e.data.debugWebSocket = !1, e.data.debugUserDiff = !1, e.data.debugPhotonLogging = !1, e.data.debugGameLog = !1, e.data.APILastOnline = new Map, e.data.sharedFeed = {
                    gameLog: {
                        wrist: [],
                        lastEntryDate: ""
                    },
                    feedTable: {
                        wrist: [],
                        lastEntryDate: ""
                    },
                    notificationTable: {
                        wrist: [],
                        lastEntryDate: ""
                    },
                    friendLogTable: {
                        wrist: [],
                        lastEntryDate: ""
                    },
                    moderationAgainstTable: {
                        wrist: [],
                        lastEntryDate: ""
                    },
                    pendingUpdate: !1
                }, e.methods.updateSharedFeed = function(e) {
                    if (this.friendLogInitStatus) {
                        this.updateSharedFeedGameLog(e), this.updateSharedFeedFeedTable(e), this.updateSharedFeedNotificationTable(e), this.updateSharedFeedFriendLogTable(e), this.updateSharedFeedModerationAgainstTable(e);
                        var t = this.sharedFeed;
                        if (t.pendingUpdate) {
                            var a = [];
                            a = a.concat(t.gameLog.wrist, t.feedTable.wrist, t.notificationTable.wrist, t.friendLogTable.wrist, t.moderationAgainstTable.wrist);
                            var i = y.parseLocation(this.lastLocation.location),
                                s = Date.now() - 3e4;
                            if (this.isGameRunning && this.lastLocation.location && "friends" !== i.accessType && this.lastLocation.date < s && ("Friends" === this.sharedFeedFilters.wrist.OnPlayerJoining || "VIP" === this.sharedFeedFilters.wrist.OnPlayerJoining || "Friends" === this.sharedFeedFilters.noty.OnPlayerJoining || "VIP" === this.sharedFeedFilters.noty.OnPlayerJoining))
                                for (var r = [], o = new Date(Date.now() - 12e4).toJSON(), n = this.feedSessionTable, d = n.length - 1; d > -1; d--) {
                                    var l = n[d];
                                    if (l.created_at < o) break;
                                    if ("GPS" === l.type && l.location === this.lastLocation.location) {
                                        if (r[l.displayName]) continue;
                                        if (r[l.displayName] = l.created_at, y.cachedUsers.has(l.userId)) {
                                            var c = y.cachedUsers.get(l.userId);
                                            if (l.location !== c.location) continue
                                        }
                                        if (this.lastLocation.playerList.has(l.displayName)) continue;
                                        for (var u = !0, h = this.gameLogSessionTable, p = h.length - 1; p > -1; p--) {
                                            var m = h[p];
                                            if ("Location" === m.type || m.created_at < o) break;
                                            if ("OnPlayerJoined" === m.type && m.displayName === l.displayName) {
                                                u = !1;
                                                break
                                            }
                                        }
                                        if (u) {
                                            var g = this.friends.has(l.userId),
                                                f = y.cachedFavoritesByObjectId.has(l.userId),
                                                v = {
                                                    ...l,
                                                    isFriend: g,
                                                    isFavorite: f,
                                                    type: "OnPlayerJoining"
                                                };
                                            ("Friends" === this.sharedFeedFilters.wrist.OnPlayerJoining || "VIP" === this.sharedFeedFilters.wrist.OnPlayerJoining && f) && a.unshift(v), this.queueFeedNoty(v)
                                        }
                                    }
                                }
                            a.sort((function(e, t) {
                                return e.created_at < t.created_at ? 1 : e.created_at > t.created_at ? -1 : 0
                            })), a.splice(15), AppApi.ExecuteVrFeedFunction("wristFeedUpdate", JSON.stringify(a)), this.userDialog.visible && this.applyUserDialogLocation(), this.worldDialog.visible && this.applyWorldDialogInstances(), t.pendingUpdate = !1
                        }
                    }
                }, e.methods.updateSharedFeedGameLog = function(e) {
                    var t = this.gameLogSessionTable;
                    if ((d = t.length) > 0 && (t[d - 1].created_at !== this.sharedFeed.gameLog.lastEntryDate || !1 !== e)) {
                        this.sharedFeed.gameLog.lastEntryDate = t[d - 1].created_at;
                        for (var a = new Date(Date.now() - 864e5).toJSON(), i = [], s = 0, r = this.sharedFeedFilters.wrist, o = 0, n = 0, d = t.length - 1; d > -1; d--) {
                            var l = t[d];
                            if (l.created_at < a) break;
                            if ("Notification" !== l.type) {
                                if ("LocationDestination" === l.type) {
                                    o = Date.parse(l.created_at);
                                    for (var c = s - 1; c > -1; c--) {
                                        "OnPlayerLeft" === (u = i[c]).type && Date.parse(u.created_at) >= o && Date.parse(u.created_at) <= o + 5e3 && (i.splice(c, 1), s--)
                                    }
                                }
                                if ("Location" === l.type) {
                                    n = Date.parse(l.created_at);
                                    for (c = s - 1; c > -1; c--) {
                                        var u;
                                        "OnPlayerJoined" === (u = i[c]).type && Date.parse(u.created_at) >= n && Date.parse(u.created_at) <= n + 2e4 && (i.splice(c, 1), s--)
                                    }
                                }
                                if ("OnPlayerJoined" !== l.type && "OnPlayerLeft" !== l.type && "PortalSpawn" !== l.type || l.displayName !== y.currentUser.displayName) {
                                    var h = !1,
                                        p = !1;
                                    if (l.userId) h = this.friends.has(l.userId), p = y.cachedFavoritesByObjectId.has(l.userId);
                                    else if (l.displayName)
                                        for (var m of y.cachedUsers.values())
                                            if (m.displayName === l.displayName) {
                                                h = this.friends.has(m.id), p = y.cachedFavoritesByObjectId.has(m.id);
                                                break
                                            } if ("OnPlayerJoined" === l.type || "OnPlayerLeft" === l.type)
                                        for (var m of this.playerModerationTable.data)
                                            if (m.targetDisplayName === l.displayName) {
                                                if ("block" === m.type) var g = `Blocked${l.type}`;
                                                else {
                                                    if ("mute" !== m.type) continue;
                                                    g = `Muted${l.type}`
                                                }
                                                var f = {
                                                    created_at: l.created_at,
                                                    type: g,
                                                    displayName: m.targetDisplayName,
                                                    userId: m.targetUserId,
                                                    isFriend: h,
                                                    isFavorite: p
                                                };
                                                r[g] && ("Everyone" === r[g] || "Friends" === r[g] && h || "VIP" === r[g] && p) && i.unshift(f), this.queueFeedNoty(f)
                                            } s < 20 && r[l.type] && ("On" === r[l.type] || "Everyone" === r[l.type] || "Friends" === r[l.type] && h || "VIP" === r[l.type] && p) && (i.push({
                                        ...l,
                                        isFriend: h,
                                        isFavorite: p
                                    }), ++s)
                                }
                            }
                        }
                        this.sharedFeed.gameLog.wrist = i, this.sharedFeed.pendingUpdate = !0
                    }
                }, e.methods.queueGameLogNoty = function(e) {
                    if ("OnPlayerJoined" === e.type) {
                        var t = this.lastLocation.date + 3e4;
                        if (Date.parse(e.created_at) <= t) return
                    }
                    if ("OnPlayerLeft" === e.type) {
                        t = this.lastLocationDestinationTime + 5e3;
                        if (Date.parse(e.created_at) <= t) return
                    }
                    if ("Notification" !== e.type && "LocationDestination" !== e.type) {
                        if ("VideoPlay" === e.type) {
                            if (!e.videoName) return;
                            e.notyName = e.videoName, e.displayName && (e.notyName = `${e.videoName} (${e.displayName})`)
                        }
                        if ("VideoPlay" === e.type || e.displayName !== y.currentUser.displayName) {
                            if (e.isFriend = !1, e.isFavorite = !1, e.userId) e.isFriend = this.friends.has(e.userId), e.isFavorite = y.cachedFavoritesByObjectId.has(e.userId);
                            else if (e.displayName)
                                for (var a of y.cachedUsers.values())
                                    if (a.displayName === e.displayName) {
                                        e.isFriend = this.friends.has(a.id), e.isFavorite = y.cachedFavoritesByObjectId.has(a.id);
                                        break
                                    } var i = this.sharedFeedFilters.noty;
                            i[e.type] && ("On" === i[e.type] || "Everyone" === i[e.type] || "Friends" === i[e.type] && e.isFriend || "VIP" === i[e.type] && e.isFavorite) && this.playNoty(e)
                        }
                    }
                }, e.methods.updateSharedFeedFeedTable = function(e) {
                    var t = this.feedSessionTable;
                    if ((o = t.length) > 0 && (t[o - 1].created_at !== this.sharedFeed.feedTable.lastEntryDate || !1 !== e)) {
                        this.sharedFeed.feedTable.lastEntryDate = t[o - 1].created_at;
                        for (var a = new Date(Date.now() - 864e5).toJSON(), i = [], s = 0, r = this.sharedFeedFilters.wrist, o = t.length - 1; o > -1; o--) {
                            var n = t[o];
                            if (n.created_at < a) break;
                            if ("Avatar" !== n.type && (!this.hidePrivateFromFeed || "GPS" !== n.type || "private" !== n.location)) {
                                var d = this.friends.has(n.userId),
                                    l = y.cachedFavoritesByObjectId.has(n.userId);
                                s < 20 && r[n.type] && ("Friends" === r[n.type] || "VIP" === r[n.type] && l) && (i.push({
                                    ...n,
                                    isFriend: d,
                                    isFavorite: l
                                }), ++s)
                            }
                        }
                        this.sharedFeed.feedTable.wrist = i, this.sharedFeed.pendingUpdate = !0
                    }
                }, e.methods.queueFeedNoty = function(e) {
                    if ("Avatar" !== e.type && (!this.hidePrivateFromFeed || "GPS" !== e.type || "private" !== e.location)) {
                        e.isFriend = this.friends.has(e.userId), e.isFavorite = y.cachedFavoritesByObjectId.has(e.userId);
                        var t = this.sharedFeedFilters.noty;
                        t[e.type] && ("Friends" === t[e.type] || "VIP" === t[e.type] && e.isFavorite) && this.playNoty(e)
                    }
                }, e.methods.updateSharedFeedNotificationTable = function(e) {
                    var {
                        data: t
                    } = this.notificationTable;
                    if ((o = t.length) > 0 && (t[o - 1].created_at !== this.sharedFeed.notificationTable.lastEntryDate || !1 !== e)) {
                        this.sharedFeed.notificationTable.lastEntryDate = t[o - 1].created_at;
                        for (var a = new Date(Date.now() - 864e5).toJSON(), i = [], s = 0, r = this.sharedFeedFilters.wrist, o = t.length - 1; o > -1; o--) {
                            var n = t[o];
                            if (n.created_at < a) break;
                            if (n.senderUserId !== y.currentUser.id) {
                                var d = this.friends.has(n.senderUserId),
                                    l = y.cachedFavoritesByObjectId.has(n.senderUserId);
                                s < 20 && r[n.type] && ("On" === r[n.type] || "Friends" === r[n.type] || "VIP" === r[n.type] && l) && (i.push({
                                    ...n,
                                    isFriend: d,
                                    isFavorite: l
                                }), ++s)
                            }
                        }
                        this.sharedFeed.notificationTable.wrist = i, this.sharedFeed.pendingUpdate = !0
                    }
                }, e.methods.queueNotificationNoty = function(e) {
                    e.isFriend = this.friends.has(e.senderUserId), e.isFavorite = y.cachedFavoritesByObjectId.has(e.senderUserId);
                    var t = this.sharedFeedFilters.noty;
                    t[e.type] && ("On" === t[e.type] || "Friends" === t[e.type] || "VIP" === t[e.type] && e.isFavorite) && this.playNoty(e)
                }, e.methods.updateSharedFeedFriendLogTable = function(e) {
                    var {
                        data: t
                    } = this.friendLogTable;
                    if ((o = t.length) > 0 && (t[o - 1].created_at !== this.sharedFeed.friendLogTable.lastEntryDate || !1 !== e)) {
                        this.sharedFeed.friendLogTable.lastEntryDate = t[o - 1].created_at;
                        for (var a = new Date(Date.now() - 864e5).toJSON(), i = [], s = 0, r = this.sharedFeedFilters.wrist, o = t.length - 1; o > -1; o--) {
                            var n = t[o];
                            if (n.created_at < a) break;
                            if ("FriendRequest" !== n.type) {
                                var d = this.friends.has(n.userId),
                                    l = y.cachedFavoritesByObjectId.has(n.userId);
                                s < 20 && r[n.type] && ("On" === r[n.type] || "Friends" === r[n.type] || "VIP" === r[n.type] && l) && (i.push({
                                    ...n,
                                    isFriend: d,
                                    isFavorite: l
                                }), ++s)
                            }
                        }
                        this.sharedFeed.friendLogTable.wrist = i, this.sharedFeed.pendingUpdate = !0
                    }
                }, e.methods.queueFriendLogNoty = function(e) {
                    if ("FriendRequest" !== e.type) {
                        e.isFriend = this.friends.has(e.userId), e.isFavorite = y.cachedFavoritesByObjectId.has(e.userId);
                        var t = this.sharedFeedFilters.noty;
                        t[e.type] && ("On" === t[e.type] || "Friends" === t[e.type] || "VIP" === t[e.type] && e.isFavorite) && this.playNoty(e)
                    }
                }, e.methods.updateSharedFeedModerationAgainstTable = function(e) {
                    var t = this.moderationAgainstTable;
                    if ((o = t.length) > 0 && (t[o - 1].created_at !== this.sharedFeed.moderationAgainstTable.lastEntryDate || !1 !== e)) {
                        this.sharedFeed.moderationAgainstTable.lastEntryDate = t[o - 1].created_at;
                        for (var a = new Date(Date.now() - 864e5).toJSON(), i = [], s = 0, r = this.sharedFeedFilters.wrist, o = t.length - 1; o > -1; o--) {
                            var n = t[o];
                            if (n.created_at < a) break;
                            var d = this.friends.has(n.userId),
                                l = y.cachedFavoritesByObjectId.has(n.userId);
                            s < 20 && r[n.type] && "On" === r[n.type] && (i.push({
                                ...n,
                                isFriend: d,
                                isFavorite: l
                            }), ++s)
                        }
                        this.sharedFeed.moderationAgainstTable.wrist = i, this.sharedFeed.pendingUpdate = !0
                    }
                }, e.methods.queueModerationNoty = function(e) {
                    e.isFriend = !1, e.isFavorite = !1, e.userId && (e.isFriend = this.friends.has(e.userId), e.isFavorite = y.cachedFavoritesByObjectId.has(e.userId));
                    var t = this.sharedFeedFilters.noty;
                    t[e.type] && "On" === t[e.type] && this.playNoty(e)
                }, e.data.notyMap = [], e.methods.playNoty = function(e) {
                    if ("busy" === y.currentUser.status || !this.friendLogInitStatus) return;
                    var t = "";
                    if (e.displayName ? t = e.displayName : e.senderUsername ? t = e.senderUsername : e.sourceDisplayName && (t = e.sourceDisplayName), t) {
                        if (this.notyMap[t] && this.notyMap[t] >= e.created_at) return;
                        this.notyMap[t] = e.created_at
                    }
                    var a = new Date(Date.now() - 6e4).toJSON();
                    if (e.created_at < a) return;
                    var i = !1;
                    ("Always" === this.notificationTTS || "Inside VR" === this.notificationTTS && !this.isGameNoVR && this.isGameRunning || "Game Closed" === this.notificationTTS && !this.isGameRunning || "Game Running" === this.notificationTTS && this.isGameRunning) && (i = !0);
                    var s = !1;
                    ("Always" === this.desktopToast || "Inside VR" === this.desktopToast && !this.isGameNoVR && this.isGameRunning || "Game Closed" === this.desktopToast && !this.isGameRunning || "Game Running" === this.desktopToast && this.isGameRunning) && (s = !0);
                    var r = !1;
                    this.xsNotifications && this.isGameRunning && !this.isGameNoVR && (r = !0);
                    var o = !1;
                    this.overlayNotifications && !this.isGameNoVR && this.isGameRunning && (o = !0);
                    var n = ["inviteMessage", "requestMessage", "responseMessage"];
                    let d = "";
                    for (var l = 0; l < n.length; l++) void 0 !== e.details && void 0 !== e.details[n[l]] && (d = `, ${e.details[n[l]]}`);
                    i && this.playNotyTTS(e, d), (s || r || o) && (this.imageNotifications ? this.notySaveImage(e).then((t => {
                        r && this.displayXSNotification(e, d, t), s && this.displayDesktopToast(e, d, t), o && this.displayOverlayNotification(e, d, t)
                    })) : (r && this.displayXSNotification(e, d, ""), s && this.displayDesktopToast(e, d, ""), o && this.displayOverlayNotification(e, d, "")))
                }, e.methods.notyGetImage = async function(e) {
                    var t = "",
                        a = "";
                    if (e.userId) a = e.userId;
                    else if (e.senderUserId) a = e.senderUserId;
                    else if (e.sourceUserId) a = e.sourceUserId;
                    else if (e.displayName)
                        for (var i of y.cachedUsers.values())
                            if (i.displayName === e.displayName) {
                                a = i.id;
                                break
                            } return e.thumbnailImageUrl ? t = e.thumbnailImageUrl : e.details && e.details.imageUrl ? t = e.details.imageURL : a && (t = await y.getCachedUser({
                        userId: a
                    }).catch((e => (console.error(e), ""))).then((e => this.displayVRCPlusIconsAsAvatar && e.json.userIcon ? e.json.userIcon : e.json.profilePicOverride ? e.json.profilePicOverride : e.json.currentAvatarThumbnailImageUrl))), t
                }, e.methods.notySaveImage = async function(e) {
                    var t = await this.notyGetImage(e),
                        a = T(t),
                        i = S(t);
                    return a && i ? AppApi.GetImage(t, a, i) : t ? (a = (i = t.split("/").pop()).split(".").shift(), AppApi.GetImage(t, a, i)) : ""
                }, e.methods.displayOverlayNotification = function(e, t, a) {
                    var i = "";
                    a && (i = `file:///${a}`), AppApi.ExecuteVrOverlayFunction("playNoty", JSON.stringify({
                        noty: e,
                        message: t,
                        image: i
                    }))
                }, e.methods.playNotyTTS = function(e, t) {
                    switch (e.type) {
                        case "OnPlayerJoined":
                            this.speak(`${e.displayName} 이(가) 참여하였습니다.`);
                            break;
                        case "OnPlayerLeft":
                            this.speak(`${e.displayName} 이(가) 떠났습니다.`);
                            break;
                        case "OnPlayerJoining":
                            this.speak(`${e.displayName} is joining`);
                            break;
                        case "GPS":
                            this.speak(`${e.displayName} is in ${this.displayLocation(e.location,e.worldName)}`);
                            break;
                        case "Online":
                            var a = "";
                            e.worldName && (a = ` to ${this.displayLocation(e.location,e.worldName)}`), this.speak(`${e.displayName} 이(가) 로그인 하였습니다. ${a}`);
                            break;
                        case "Offline":
                            this.speak(`${e.displayName} 이(가) 로그아웃 하였습니다.`);
                            break;
                        case "Status":
                            this.speak(`${e.displayName} status is now ${e.status} ${e.statusDescription}`);
                            break;
                        case "invite":
                            this.speak(`${e.senderUsername} 이(가) 당신을 ${this.displayLocation(e.details.worldId,e.details.worldName)}${t} 에 초대하였습니다.`);
                            break;
                        case "requestInvite":
                            this.speak(`${e.senderUsername} 이(가) 초대 요청을 했습니다. ${t}`);
                            break;
                        case "inviteResponse":
                            this.speak(`${e.senderUsername} 이(가) 당신의 초대에 반응을 했습니다. ${t}`);
                            break;
                        case "requestInviteResponse":
                            this.speak(`${e.senderUsername} 이(가) 당신의 초대 요청에 반응을 했습니다. ${t}`);
                            break;
                        case "friendRequest":
                            this.speak(`${e.senderUsername} 이(가) 친구 요청을 보냈습니다.`);
                            break;
                        case "Friend":
                            this.speak(`${e.displayName} 은(는) 이제 당신의 친구입니다.`);
                            break;
                        case "Unfriend":
                            this.speak(`${e.displayName} 은(는) 이제 당신의 친구가 아닙니다.`);
                            break;
                        case "TrustLevel":
                            this.speak(`${e.displayName} 의 신뢰 등급은 이제 ${e.trustLevel} 입니다.`);
                            break;
                        case "DisplayName":
                            this.speak(`${e.previousDisplayName} 이(가) 이름을 ${e.displayName} 으로 변경하였습니다.`);
                            break;
                        case "PortalSpawn":
                            a = "";
                            e.worldName && (a = ` to ${this.displayLocation(e.instanceId,e.worldName)}`), this.speak(`${e.displayName} has spawned a portal${a}`);
                            break;
                        case "AvatarChange":
                            this.speak(`${e.displayName} changed into avatar ${e.name}`);
                            break;
                        case "Event":
                            this.speak(e.data);
                            break;
                        case "VideoPlay":
                            this.speak(`지금 재생중: ${e.notyName}`);
                            break;
                        case "BlockedOnPlayerJoined":
                            this.speak(`차단한 유저 ${e.displayName} 이(가) 참여하였습니다.`);
                            break;
                        case "BlockedOnPlayerLeft":
                            this.speak(`차단한 유저 ${e.displayName} 이(가) 떠났습니다.`);
                            break;
                        case "MutedOnPlayerJoined":
                            this.speak(`음소거한 유저 ${e.displayName} 이(가) 참여하였습니다.`);
                            break;
                        case "MutedOnPlayerLeft":
                            this.speak(`음소거한 유저 ${e.displayName} 이(가) 떠났습니다.`);
                            break;
                        case "Blocked":
                            this.speak(`${e.displayName} 이(가) 당신을 차단했습니다.`);
                            break;
                        case "Unblocked":
                            this.speak(`${e.displayName} 이(가) 당신을 차단 해제하였습니다.`);
                            break;
                        case "Muted":
                            this.speak(`${e.displayName} 이(가) 당신을 음소거 하였습니다.`);
                            break;
                        case "Unmuted":
                            this.speak(`${e.displayName} 이(가) 당신을 음소거 해제했습니다.`)
                    }
                }, e.methods.displayXSNotification = function(e, t, a) {
                    var i = Math.floor(parseInt(this.notificationTimeout, 10) / 1e3);
                    switch (e.type) {
                        case "OnPlayerJoined":
                            AppApi.XSNotification("VRCX", `${e.displayName} 이(가) 참여하였습니다.`, i, a);
                            break;
                        case "OnPlayerLeft":
                            AppApi.XSNotification("VRCX", `${e.displayName} 이(가) 떠났습니다.`, i, a);
                            break;
                        case "OnPlayerJoining":
                            AppApi.XSNotification("VRCX", `${e.displayName} is joining`, i, a);
                            break;
                        case "GPS":
                            AppApi.XSNotification("VRCX", `${e.displayName} is in ${this.displayLocation(e.location,e.worldName)}`, i, a);
                            break;
                        case "Online":
                            var s = "";
                            e.worldName && (s = ` to ${this.displayLocation(e.location,e.worldName)}`), AppApi.XSNotification("VRCX", `${e.displayName} 이(가) 로그인 하였습니다. ${s}`, i, a);
                            break;
                        case "Offline":
                            AppApi.XSNotification("VRCX", `${e.displayName} 이(가) 로그아웃 하였습니다.`, i, a);
                            break;
                        case "Status":
                            AppApi.XSNotification("VRCX", `${e.displayName} status is now ${e.status} ${e.statusDescription}`, i, a);
                            break;
                        case "invite":
                            AppApi.XSNotification("VRCX", `${e.senderUsername} 이(가) 당신을 ${this.displayLocation(e.details.worldId,e.details.worldName)}${t} 에 초대하였습니다.`, i, a);
                            break;
                        case "requestInvite":
                            AppApi.XSNotification("VRCX", `${e.senderUsername} 이(가) 초대 요청을 했습니다. ${t}`, i, a);
                            break;
                        case "inviteResponse":
                            AppApi.XSNotification("VRCX", `${e.senderUsername} 이(가) 당신의 초대에 반응을 했습니다. ${t}`, i, a);
                            break;
                        case "requestInviteResponse":
                            AppApi.XSNotification("VRCX", `${e.senderUsername} 이(가) 당신의 초대 요청에 반응을 했습니다. ${t}`, i, a);
                            break;
                        case "friendRequest":
                            AppApi.XSNotification("VRCX", `${e.senderUsername} 이(가) 친구 요청을 보냈습니다.`, i, a);
                            break;
                        case "Friend":
                            AppApi.XSNotification("VRCX", `${e.displayName} 은(는) 이제 당신의 친구입니다.`, i, a);
                            break;
                        case "Unfriend":
                            AppApi.XSNotification("VRCX", `${e.displayName} 은(는) 이제 당신의 친구가 아닙니다.`, i, a);
                            break;
                        case "TrustLevel":
                            AppApi.XSNotification("VRCX", `${e.displayName} 님의 신뢰 등급은 이제 ${e.trustLevel} 입니다.`, i, a);
                            break;
                        case "DisplayName":
                            AppApi.XSNotification("VRCX", `${e.previousDisplayName} 이(가) 이름을 ${e.displayName} 으로 변경하였습니다.`, i, a);
                            break;
                        case "PortalSpawn":
                            s = "";
                            e.worldName && (s = ` to ${this.displayLocation(e.instanceId,e.worldName)}`), AppApi.XSNotification("VRCX", `${e.displayName} has spawned a portal${s}`, i, a);
                            break;
                        case "AvatarChange":
                            AppApi.XSNotification("VRCX", `${e.displayName} changed into avatar ${e.name}`, i, a);
                            break;
                        case "Event":
                            AppApi.XSNotification("VRCX", e.data, i, a);
                            break;
                        case "VideoPlay":
                            AppApi.XSNotification("VRCX", `지금 재생중: ${e.notyName}`, i, a);
                            break;
                        case "BlockedOnPlayerJoined":
                            AppApi.XSNotification("VRCX", `차단한 유저 ${e.displayName} 이(가) 참여하였습니다.`, i, a);
                            break;
                        case "BlockedOnPlayerLeft":
                            AppApi.XSNotification("VRCX", `차단한 유저 ${e.displayName} 이(가) 떠났습니다.`, i, a);
                            break;
                        case "MutedOnPlayerJoined":
                            AppApi.XSNotification("VRCX", `음소거한 유저 ${e.displayName} 이(가) 참여하였습니다.`, i, a);
                            break;
                        case "MutedOnPlayerLeft":
                            AppApi.XSNotification("VRCX", `음소거한 유저 ${e.displayName} 이(가) 떠났습니다.`, i, a);
                            break;
                        case "Blocked":
                            AppApi.XSNotification("VRCX", `${e.displayName} 이(가) 당신을 차단했습니다.`, i, a);
                            break;
                        case "Unblocked":
                            AppApi.XSNotification("VRCX", `${e.displayName} 이(가) 당신을 차단 해제했습니다.`, i, a);
                            break;
                        case "Muted":
                            AppApi.XSNotification("VRCX", `${e.displayName} 이(가) 당신을 음소거 하였습니다.`, i, a);
                            break;
                        case "Unmuted":
                            AppApi.XSNotification("VRCX", `${e.displayName} 이(가) 당신을 음소거 해제했습니다.`, i, a)
                    }
                }, e.methods.displayDesktopToast = function(e, t, a) {
                    switch (e.type) {
                        case "OnPlayerJoined":
                            AppApi.DesktopNotification(e.displayName, "이(가) 참여하였습니다.", a);
                            break;
                        case "OnPlayerLeft":
                            AppApi.DesktopNotification(e.displayName, "이(가) 떠났습니다.", a);
                            break;
                        case "OnPlayerJoining":
                            AppApi.DesktopNotification(e.displayName, "is joining", a);
                            break;
                        case "GPS":
                            AppApi.DesktopNotification(e.displayName, `is in ${this.displayLocation(e.location,e.worldName)}`, a);
                            break;
                        case "Online":
                            var i = "";
                            e.worldName && (i = ` to ${this.displayLocation(e.location,e.worldName)}`), AppApi.DesktopNotification(e.displayName, `이(가) 로그인 하였습니다.${i}`, a);
                            break;
                        case "Offline":
                            AppApi.DesktopNotification(e.displayName, "이(가) 로그아웃 하였습니다.", a);
                            break;
                        case "Status":
                            AppApi.DesktopNotification(e.displayName, `status is now ${e.status} ${e.statusDescription}`, a);
                            break;
                        case "invite":
                            AppApi.DesktopNotification(e.senderUsername, `이(가) 당신을 ${this.displayLocation(e.details.worldId,e.details.worldName)}${t} 에 초대했습니다.`, a);
                            break;
                        case "requestInvite":
                            AppApi.DesktopNotification(e.senderUsername, `이(가) 초대 요청을 보냈습니다. ${t}`, a);
                            break;
                        case "inviteResponse":
                            AppApi.DesktopNotification(e.senderUsername, `이(가) 당신의 초대에 반응을 했습니다. ${t}`, a);
                            break;
                        case "requestInviteResponse":
                            AppApi.DesktopNotification(e.senderUsername, `이(가) 당신의 초대 요청에 반응을 했습니다. ${t}`, a);
                            break;
                        case "friendRequest":
                            AppApi.DesktopNotification(e.senderUsername, "이(가) 친구 요청을 보냈습니다.", a);
                            break;
                        case "Friend":
                            AppApi.DesktopNotification(e.displayName, "은(는) 이제 당신의 친구입니다.", a);
                            break;
                        case "Unfriend":
                            AppApi.DesktopNotification(e.displayName, "은(는) 이제 당신의 친구가 아닙니다.", a);
                            break;
                        case "TrustLevel":
                            AppApi.DesktopNotification(e.displayName, `님의 신뢰 등급은 이제 ${e.trustLevel} 입니다.`, a);
                            break;
                        case "DisplayName":
                            AppApi.DesktopNotification(e.previousDisplayName, `이(가) 이름을 ${e.displayName}으로 변경하였습니다.`, a);
                            break;
                        case "PortalSpawn":
                            i = "";
                            e.worldName && (i = ` to ${this.displayLocation(e.instanceId,e.worldName)}`), AppApi.DesktopNotification(e.displayName, `has spawned a portal${i}`, a);
                            break;
                        case "AvatarChange":
                            AppApi.DesktopNotification(e.displayName, `changed into avatar ${e.name}`, a);
                            break;
                        case "Event":
                            AppApi.DesktopNotification("이밴트", e.data, a);
                            break;
                        case "VideoPlay":
                            AppApi.DesktopNotification("지금 재생중", e.notyName, a);
                            break;
                        case "BlockedOnPlayerJoined":
                            AppApi.DesktopNotification(e.displayName, "차단한 유저가 참여하였습니다.", a);
                            break;
                        case "BlockedOnPlayerLeft":
                            AppApi.DesktopNotification(e.displayName, "차단한 유저가 떠났습니다.", a);
                            break;
                        case "MutedOnPlayerJoined":
                            AppApi.DesktopNotification(e.displayName, "음소거한 유저가 참여하였습니다.", a);
                            break;
                        case "MutedOnPlayerLeft":
                            AppApi.DesktopNotification(e.displayName, "음소거한 유저가 떠났습니다.", a);
                            break;
                        case "Blocked":
                            AppApi.DesktopNotification(e.displayName, "이(가) 당신을 차단하였습니다.", a);
                            break;
                        case "Unblocked":
                            AppApi.DesktopNotification(e.displayName, "이(가) 당신을 차단 해제했습니다.", a);
                            break;
                        case "Muted":
                            AppApi.DesktopNotification(e.displayName, "이(가) 당신을 음소거 하였습니다.", a);
                            break;
                        case "Unmuted":
                            AppApi.DesktopNotification(e.displayName, "이(가) 당신을 음소거 해제했습니다.", a)
                    }
                }, e.methods.displayLocation = function(e, t) {
                    var a = "",
                        i = y.parseLocation(e);
                    return i.isOffline ? a = "Offline" : i.isPrivate ? a = "Private" : i.worldId && (a = i.instanceId ? `${t} ${i.accessType}` : t), a
                }, e.methods.notifyMenu = function(e) {
                    var {
                        menu: t
                    } = this.$refs;
                    if (t.activeIndex !== e) {
                        var a = t.items[e];
                        a && a.$el.classList.add("notify")
                    }
                }, e.methods.selectMenu = function(e) {
                    document.querySelectorAll('[role="tooltip"]').forEach((e => {
                        e.remove()
                    }));
                    var t = this.$refs.menu.items[e];
                    t && t.$el.classList.remove("notify"), "notification" === e && (this.unseenNotifications = [])
                }, e.methods.promptTOTP = function() {
                    this.$prompt("인증기 앱에 표시된 인증 코드를 입력해 주세요.", "2단계 인증", {
                        distinguishCancelAndClose: !0,
                        cancelButtonText: "OTP 사용",
                        confirmButtonText: "인증",
                        inputPlaceholder: "코드",
                        inputPattern: /^[0-9]{6}$/,
                        inputErrorMessage: "잘못된 코드입니다.",
                        callback: (e, t) => {
                            "confirm" === e ? y.verifyTOTP({
                                code: t.inputValue
                            }).catch((e => {
                                throw this.promptTOTP(), e
                            })).then((e => (y.getCurrentUser(), e))) : "cancel" === e && this.promptOTP()
                        }
                    })
                }, e.methods.promptOTP = function() {
                    this.$prompt("저장된 복구 코드를 입력해 주세요.", "2단계 인증", {
                        distinguishCancelAndClose: !0,
                        cancelButtonText: "TOTP 사용",
                        confirmButtonText: "인증",
                        inputPlaceholder: "코드",
                        inputPattern: /^[a-z0-9]{4}-[a-z0-9]{4}$/,
                        inputErrorMessage: "잘못된 코드입니다.",
                        callback: (e, t) => {
                            "confirm" === e ? y.verifyOTP({
                                code: t.inputValue
                            }).catch((e => {
                                throw this.promptOTP(), e
                            })).then((e => (y.getCurrentUser(), e))) : "cancel" === e && this.promptTOTP()
                        }
                    })
                }, e.methods.showExportFriendsListDialog = function() {
                    var {
                        friends: e
                    } = y.currentUser;
                    if (!1 !== Array.isArray(e)) {
                        var t = ["UserID,DisplayName,Memo"],
                            a = function(e) {
                                return !0 === /[\x00-\x1f,"]/.test(e) ? `"${e.replace(/"/g,'""')}"` : e
                            };
                        for (var i of e) {
                            var s = this.friends.get(i),
                                r = void 0 !== s && s.name || "",
                                o = void 0 !== s && s.memo || "";
                            t.push(`${a(i)},${a(r)},${a(o)}`)
                        }
                        this.exportFriendsListContent = t.join("\n"), this.exportFriendsListDialog = !0
                    }
                }, e.data.exportAvatarsListDialog = !1, e.data.exportAvatarsListContent = "", e.methods.showExportAvatarsListDialog = function() {
                    for (var e of y.cachedAvatars.values()) e.authorId === y.currentUser.id && y.cachedAvatars.delete(e.id);
                    var t = new Map;
                    y.bulk({
                        fn: "getAvatars",
                        N: -1,
                        params: {
                            n: 50,
                            offset: 0,
                            sort: "updated",
                            order: "descending",
                            releaseStatus: "all",
                            user: "me"
                        },
                        handle: e => {
                            for (var a of e.json) {
                                var i = y.cachedAvatars.get(a.id);
                                void 0 !== i && t.set(i.id, i)
                            }
                        },
                        done: () => {
                            var e = Array.from(t.values());
                            if (!1 !== Array.isArray(e)) {
                                var a = ["AvatarID,AvatarName"],
                                    i = function(e) {
                                        return !0 === /[\x00-\x1f,"]/.test(e) ? `"${e.replace(/"/g,'""')}"` : e
                                    };
                                for (var s of e) a.push(`${i(s.id)},${i(s.name)}`);
                                this.exportAvatarsListContent = a.join("\n"), this.exportAvatarsListDialog = !0
                            }
                        }
                    })
                }, y.$on("USER:2FA", (function() {
                    e.promptTOTP()
                })), y.$on("LOGOUT", (function() {
                    this.isLoggedIn && new(s())({
                        type: "success",
                        text: `다음에 봐요, <strong>${i(this.currentUser.displayName)}</strong>님!`
                    }).show(), this.isLoggedIn = !1
                })), y.$on("LOGIN", (function(t) {
                    new(s())({
                        type: "success",
                        text: `안녕하세요, <strong>${i(t.ref.displayName)}</strong>님!`
                    }).show(), e.$refs.menu.activeIndex = "feed"
                })), y.$on("LOGOUT", (function() {
                    e.updateStoredUser(this.currentUser), C.clearCookies()
                })), e.methods.checkPrimaryPassword = function(t) {
                    return new Promise(((a, i) => {
                        this.enablePrimaryPassword || a(t.password), e.$prompt("Primary Password를 입력해주세요.", "Primary Password 필요", {
                            inputType: "password",
                            inputPattern: /[\s\S]{1,32}/
                        }).then((({
                            value: e
                        }) => {
                            E.decrypt(t.password, e).then(a).catch(i)
                        })).catch(i)
                    }))
                }, e.data.enablePrimaryPassword = w.getBool("enablePrimaryPassword"), e.data.enablePrimaryPasswordDialog = {
                    visible: !1,
                    password: "",
                    rePassword: "",
                    beforeClose(t) {
                        e._data.enablePrimaryPassword = !1, t()
                    }
                }, e.methods.enablePrimaryPasswordChange = function() {
                    this.enablePrimaryPasswordDialog.password = "", this.enablePrimaryPasswordDialog.rePassword = "", this.enablePrimaryPassword ? this.enablePrimaryPasswordDialog.visible = !0 : this.$prompt("Primary Password를 입력해주세요.", "Primary Password 필요", {
                        inputType: "password",
                        inputPattern: /[\s\S]{1,32}/
                    }).then((({
                        value: e
                    }) => {
                        for (let t in this.loginForm.savedCredentials) E.decrypt(this.loginForm.savedCredentials[t].loginParmas.password, e).then((e => {
                            this.saveCredentials = {
                                username: t,
                                password: e
                            }, this.updateStoredUser(this.loginForm.savedCredentials[t].user), w.setBool("enablePrimaryPassword", !1)
                        })).catch((() => {
                            this.enablePrimaryPassword = !0, w.setBool("enablePrimaryPassword", !0)
                        }))
                    })).catch((() => {
                        this.enablePrimaryPassword = !0, w.setBool("enablePrimaryPassword", !0)
                    }))
                }, e.methods.setPrimaryPassword = function() {
                    if (w.setBool("enablePrimaryPassword", this.enablePrimaryPassword), this.enablePrimaryPasswordDialog.visible = !1, this.enablePrimaryPassword) {
                        let e = this.enablePrimaryPasswordDialog.password;
                        for (let t in this.loginForm.savedCredentials) E.encrypt(this.loginForm.savedCredentials[t].loginParmas.password, e).then((e => {
                            this.saveCredentials = {
                                username: t,
                                password: e
                            }, this.updateStoredUser(this.loginForm.savedCredentials[t].user)
                        }))
                    }
                }, e.methods.updateStoredUser = async function(e) {
                    var t = {};
                    if (null !== w.getString("savedCredentials")) t = JSON.parse(w.getString("savedCredentials"));
                    if (this.saveCredentials) {
                        var a = {
                            user: e,
                            loginParmas: this.saveCredentials
                        };
                        t[e.username] = a, delete this.saveCredentials
                    } else void 0 !== t[e.username] && (t[e.username].user = e, t[e.username].cookies = await C.getCookies());
                    this.loginForm.savedCredentials = t;
                    var i = JSON.stringify(t);
                    w.setString("savedCredentials", i), this.loginForm.lastUserLoggedIn = e.username, w.setString("lastUserLoggedIn", e.username)
                }, e.methods.relogin = function(e) {
                    var {
                        loginParmas: t
                    } = e;
                    return e.cookies && C.setCookies(e.cookies), t.endpoint ? y.endpointDomain = t.endpoint : y.endpointDomain = y.endpointDomainVrchat, new Promise(((e, a) => {
                        this.enablePrimaryPassword ? this.checkPrimaryPassword(t).then((i => (this.loginForm.loading = !0, y.getConfig().catch((e => {
                            this.loginForm.loading = !1, a(e)
                        })).then((() => {
                            y.login({
                                username: t.username,
                                password: i,
                                cipher: t.password
                            }).catch((e => {
                                this.loginForm.loading = !1, y.logout(), a(e)
                            })).then((() => {
                                this.loginForm.loading = !1, e()
                            }))
                        }))))).catch((e => {
                            this.$message({
                                message: "잘못된 primary password 입니다.",
                                type: "error"
                            }), a(e)
                        })) : y.getConfig().catch((e => {
                            this.loginForm.loading = !1, a(e)
                        })).then((() => {
                            y.login({
                                username: t.username,
                                password: t.password,
                                endpoint: t.endpoint
                            }).catch((() => {
                                this.loginForm.loading = !1, y.logout()
                            })).then((() => {
                                this.loginForm.loading = !1, e()
                            }))
                        }))
                    }))
                }, e.methods.deleteSavedLogin = function(e) {
                    var t = JSON.parse(w.getString("savedCredentials"));
                    delete t[e], 0 === Object.keys(t).length && (this.enablePrimaryPassword = !1, w.setBool("enablePrimaryPassword", !1)), this.loginForm.savedCredentials = t;
                    var a = JSON.stringify(t);
                    w.setString("savedCredentials", a), new(s())({
                        type: "success",
                        text: "계정이 삭제되었습니다."
                    }).show()
                }, y.$on("AUTOLOGIN", (function() {
                    var t = e.loginForm.savedCredentials[e.loginForm.lastUserLoggedIn];
                    void 0 !== t && (e.enablePrimaryPassword ? this.logout() : e.relogin(t).then((() => {
                        new(s())({
                            type: "success",
                            text: "자동으로 로그인 되었습니다."
                        }).show()
                    })))
                })), e.data.loginForm = {
                    loading: !0,
                    username: "",
                    password: "",
                    endpoint: "",
                    saveCredentials: !1,
                    savedCredentials: null !== w.getString("lastUserLoggedIn") ? JSON.parse(w.getString("savedCredentials")) : {},
                    lastUserLoggedIn: w.getString("lastUserLoggedIn"),
                    rules: {
                        username: [{
                            required: !0,
                            trigger: "blur"
                        }],
                        password: [{
                            required: !0,
                            trigger: "blur"
                        }]
                    }
                }, e.methods.login = function() {
                    this.$refs.loginForm.validate((t => {
                        t && !this.loginForm.loading && (this.loginForm.loading = !0, this.loginForm.endpoint ? y.endpointDomain = this.loginForm.endpoint : y.endpointDomain = y.endpointDomainVrchat, y.getConfig().catch((e => {
                            throw this.loginForm.loading = !1, e
                        })).then((t => this.loginForm.saveCredentials && this.enablePrimaryPassword ? (e.$prompt("Primary Password를 입력해주세요.", "Primary Password 필요", {
                            inputType: "password",
                            inputPattern: /[\s\S]{1,32}/
                        }).then((({
                            value: e
                        }) => {
                            let t = this.loginForm.savedCredentials[Object.keys(this.loginForm.savedCredentials)[0]];
                            E.decrypt(t.loginParmas.password, e).then((() => {
                                E.encrypt(this.loginForm.password, e).then((e => {
                                    y.login({
                                        username: this.loginForm.username,
                                        password: this.loginForm.password,
                                        endpoint: this.loginForm.endpoint,
                                        saveCredentials: this.loginForm.saveCredentials,
                                        cipher: e
                                    }).finally((() => {
                                        this.loginForm.username = "", this.loginForm.password = "", this.loginForm.endpoint = ""
                                    }))
                                }))
                            }))
                        })).finally((() => {
                            this.loginForm.loading = !1
                        })), t) : (y.login({
                            username: this.loginForm.username,
                            password: this.loginForm.password,
                            endpoint: this.loginForm.endpoint,
                            saveCredentials: this.loginForm.saveCredentials
                        }).finally((() => {
                            this.loginForm.username = "", this.loginForm.password = "", this.loginForm.loading = !1
                        })), t))))
                    }))
                }, e.methods.loginWithSteam = function() {
                    this.loginForm.loading || (this.loginForm.loading = !0, AppApi.LoginWithSteam().catch((e => {
                        throw this.loginForm.loading = !1, e
                    })).then((e => {
                        e ? y.getConfig().catch((e => {
                            throw this.loginForm.loading = !1, e
                        })).then((t => (y.loginWithSteam({
                            steamTicket: e
                        }).finally((() => {
                            this.loginForm.loading = !1
                        })), t))) : (this.loginForm.loading = !1, this.$message({
                            message: "VRChat이 실행 중일 때만 작동합니다.",
                            type: "error"
                        }))
                    })))
                }, e.methods.migrateMemos = async function() {
                    var e = JSON.parse(VRCXStorage.GetAll());
                    for (var t in L.begin(), e)
                        if ("memo_usr" === t.substring(0, 8)) {
                            var a = t.substring(5),
                                i = e[t];
                            i && (await this.saveMemo(a, i), VRCXStorage.Remove(`memo_${a}`))
                        } L.commit()
                }, e.methods.getMemo = async function(e) {
                    try {
                        return (await L.getMemo(e)).memo
                    } catch (e) {}
                    return ""
                }, e.methods.saveMemo = function(e, t) {
                    t ? L.setMemo({
                        userId: e,
                        editedAt: (new Date).toJSON(),
                        memo: t
                    }) : L.deleteMemo(e);
                    var a = this.friends.get(e);
                    if (a)
                        if (a.memo = String(t || ""), t) {
                            var i = t.split("\n");
                            a.$nickName = i[0]
                        } else a.$nickName = ""
                }, e.data.friends = new Map, e.data.pendingActiveFriends = new Set, e.data.friendsNo = 0, e.data.isFriendsGroupMe = !0, e.data.isFriendsGroup0 = !0, e.data.isFriendsGroup1 = !0, e.data.isFriendsGroup2 = !0, e.data.isFriendsGroup3 = !1, e.data.friendsGroup0_ = [], e.data.friendsGroup1_ = [], e.data.friendsGroup2_ = [], e.data.friendsGroup3_ = [], e.data.friendsGroupA_ = [], e.data.friendsGroupB_ = [], e.data.friendsGroupC_ = [], e.data.friendsGroupD_ = [], e.data.sortFriendsGroup0 = !1, e.data.sortFriendsGroup1 = !1, e.data.sortFriendsGroup2 = !1, e.data.sortFriendsGroup3 = !1, e.data.orderFriendsGroup0 = w.getBool("orderFriendGroup0"), e.data.orderFriendsGroup1 = w.getBool("orderFriendGroup1"), e.data.orderFriendsGroup2 = w.getBool("orderFriendGroup2"), e.data.orderFriendsGroup3 = w.getBool("orderFriendGroup3"), e.data.orderFriendsGroupPrivate = w.getBool("orderFriendGroupPrivate"), e.data.orderFriendsGroupStatus = w.getBool("orderFriendGroupPrivate"), e.data.orderFriendsGroupGPS = w.getBool("orderFriendGroupGPS"), e.methods.saveOrderFriendGroup = function() {
                    w.setBool("orderFriendGroup0", this.orderFriendsGroup0), w.setBool("orderFriendGroup1", this.orderFriendsGroup1), w.setBool("orderFriendGroup2", this.orderFriendsGroup2), w.setBool("orderFriendGroup3", this.orderFriendsGroup3), w.setBool("orderFriendGroupPrivate", this.orderFriendsGroupPrivate), w.setBool("orderFriendsGroupStatus", this.orderFriendsGroupStatus), w.setBool("orderFriendGroupGPS", this.orderFriendsGroupGPS), this.sortFriendsGroup0 = !0, this.sortFriendsGroup1 = !0
                }, e.methods.fetchActiveFriend = function(e) {
                    return this.pendingActiveFriends.add(e), y.getUser({
                        userId: e
                    }).then((t => (this.pendingActiveFriends.delete(e), t)))
                }, y.$on("USER:CURRENT", (function(t) {
                    e.checkActiveFriends(t.json)
                })), e.methods.checkActiveFriends = function(e) {
                    if (!1 !== Array.isArray(e.activeFriends) && this.friendLogInitStatus)
                        for (var t of e.activeFriends)
                            if (!this.pendingActiveFriends.has(t)) {
                                var a = y.cachedUsers.get(t);
                                if (void 0 === a || "offline" === a.status) {
                                    if (this.pendingActiveFriends.size >= 5) break;
                                    this.fetchActiveFriend(t)
                                }
                            }
                }, y.$on("LOGIN", (function() {
                    e.friends.clear(), e.pendingActiveFriends.clear(), e.friendsNo = 0, e.isFriendsGroup0 = !0, e.isFriendsGroup1 = !0, e.isFriendsGroup2 = !0, e.isFriendsGroup3 = !1, e.friendsGroup0_ = [], e.friendsGroup1_ = [], e.friendsGroup2_ = [], e.friendsGroup3_ = [], e.friendsGroupA_ = [], e.friendsGroupB_ = [], e.friendsGroupC_ = [], e.friendsGroupD_ = [], e.sortFriendsGroup0 = !1, e.sortFriendsGroup1 = !1, e.sortFriendsGroup2 = !1, e.sortFriendsGroup3 = !1
                })), y.$on("USER:CURRENT", (function(t) {
                    e.refreshFriends(t.ref, t.origin), e.updateOnlineFriendCoutner()
                })), y.$on("USER", (function(t) {
                    e.updateFriend(t.ref.id)
                })), y.$on("FRIEND:ADD", (function(t) {
                    e.addFriend(t.params.userId)
                })), y.$on("FRIEND:DELETE", (function(t) {
                    e.deleteFriend(t.params.userId)
                })), y.$on("FRIEND:STATE", (function(t) {
                    "online" === t.json.state && e.APILastOnline.set(t.params.userId, Date.now()), e.updateFriend(t.params.userId, t.json.state)
                })), y.$on("FAVORITE", (function(t) {
                    e.updateFriend(t.ref.favoriteId)
                })), y.$on("FAVORITE:@DELETE", (function(t) {
                    e.updateFriend(t.ref.favoriteId)
                })), y.$on("LOGIN", (function() {
                    this.cachedUsers = new Map, e.nextFriendsRefresh = 0
                })), e.methods.refreshFriends = function(e, t) {
                    var a = new Map;
                    for (var i of e.friends) a.set(i, "offline");
                    for (var i of e.offlineFriends) a.set(i, "offline");
                    for (var i of e.activeFriends) a.set(i, "active");
                    for (var i of e.onlineFriends) a.set(i, "online");
                    for (var [i, s] of a) this.friends.has(i) ? this.updateFriend(i, s, t) : this.addFriend(i, s);
                    for (var i of this.friends.keys()) !1 === a.has(i) && this.deleteFriend(i)
                }, e.methods.addFriend = function(e, t) {
                    if (!this.friends.has(e)) {
                        var a = y.cachedUsers.get(e),
                            i = {
                                id: e,
                                state: t || "offline",
                                isVIP: y.cachedFavoritesByObjectId.has(e),
                                ref: a,
                                name: "",
                                no: ++this.friendsNo,
                                memo: "",
                                $nickName: ""
                            };
                        this.getMemo(e).then((e => {
                            if (i.memo = e, i.$nickName = "", e) {
                                var t = e.split("\n");
                                i.$nickName = t[0]
                            }
                        })), void 0 === a ? void 0 !== (a = this.friendLog.get(e)) && a.displayName && (i.name = a.displayName) : i.name = a.name, this.friends.set(e, i), "online" === i.state ? i.isVIP ? (this.sortFriendsGroup0 = !0, this.friendsGroup0_.push(i), this.friendsGroupA_.unshift(i)) : (this.sortFriendsGroup1 = !0, this.friendsGroup1_.push(i), this.friendsGroupB_.unshift(i)) : "active" === i.state ? (this.sortFriendsGroup2 = !0, this.friendsGroup2_.push(i), this.friendsGroupC_.unshift(i)) : (this.sortFriendsGroup3 = !0, this.friendsGroup3_.push(i), this.friendsGroupD_.unshift(i))
                    }
                }, e.methods.deleteFriend = function(e) {
                    var t = this.friends.get(e);
                    void 0 !== t && (this.friends.delete(e), "online" === t.state ? t.isVIP ? (a(this.friendsGroup0_, t), a(this.friendsGroupA_, t)) : (a(this.friendsGroup1_, t), a(this.friendsGroupB_, t)) : "active" === t.state ? (a(this.friendsGroup2_, t), a(this.friendsGroupC_, t)) : (a(this.friendsGroup3_, t), a(this.friendsGroupD_, t)))
                }, e.data.updateFriendInProgress = new Set, e.methods.updateFriend = async function(e, t, i) {
                    var s = this.friends.get(e);
                    if (void 0 !== s && !this.updateFriendInProgress.has(e)) {
                        this.updateFriendInProgress.add(e);
                        var r = y.cachedUsers.get(e),
                            o = y.cachedFavoritesByObjectId.has(e);
                        if (void 0 === t || s.state === t) s.ref !== r && (s.ref = r, "online" === s.state ? (this.friendLogInitStatus && y.getUser({
                            userId: e
                        }), s.isVIP ? (a(this.friendsGroupA_, s), this.friendsGroupA_.push(s)) : (a(this.friendsGroupB_, s), this.friendsGroupB_.push(s))) : "active" === s.state ? (a(this.friendsGroupC_, s), this.friendsGroupC_.push(s)) : (a(this.friendsGroupD_, s), this.friendsGroupD_.push(s))), s.isVIP !== o && (s.isVIP = o, "online" === s.state && (s.isVIP ? (a(this.friendsGroup1_, s), a(this.friendsGroupB_, s), this.sortFriendsGroup0 = !0, this.friendsGroup0_.push(s), this.friendsGroupA_.unshift(s)) : (a(this.friendsGroup0_, s), a(this.friendsGroupA_, s), this.sortFriendsGroup1 = !0, this.friendsGroup1_.push(s), this.friendsGroupB_.unshift(s)))), void 0 !== r && s.name !== r.displayName && (s.name = r.displayName, "online" === s.state ? s.isVIP ? this.sortFriendsGroup0 = !0 : this.sortFriendsGroup1 = !0 : "active" === s.state ? this.sortFriendsGroup2 = !0 : this.sortFriendsGroup3 = !0), i && "online" !== s.state && void 0 !== r && "" !== r.location && "offline" !== r.location && "private" !== r.location && y.getUser({
                            userId: e
                        }).catch((() => {
                            this.updateFriendInProgress.delete(e)
                        }));
                        else {
                            var n = t,
                                d = "",
                                l = "";
                            if (void 0 !== r && void 0 !== r.location) var {
                                location: d,
                                $location_at: l
                            } = r;
                            if ("online" === s.state && ("active" === t || "offline" === t))
                                if (await new Promise((e => {
                                        setTimeout(e, 5e4)
                                    })), this.APILastOnline.has(e))
                                    if (this.APILastOnline.get(e) > Date.now() - 6e4) return void this.updateFriendInProgress.delete(e);
                            try {
                                var c = await y.getUser({
                                    userId: e
                                });
                                void 0 !== c && void 0 !== c.ref && (n = c.ref.state, s.ref = c.ref)
                            } catch (e) {
                                console.error(e)
                            }
                            if (s.state !== n)
                                if (void 0 === s.ref.$offline_for || "" !== s.ref.$offline_for || "offline" !== n && "active" !== n || "online" !== s.state) {
                                    if ("online" === n) {
                                        if (s.ref.$location_at = Date.now(), s.ref.$online_for = Date.now(), s.ref.$offline_for = "", void 0 !== s.ref.location && "offline" !== s.ref.location) var {
                                            location: d
                                        } = s.ref;
                                        h = await this.getWorldName(s.ref.location), p = {
                                            created_at: (new Date).toJSON(),
                                            type: "Online",
                                            userId: s.ref.id,
                                            displayName: s.ref.displayName,
                                            location: d,
                                            worldName: h,
                                            time: ""
                                        };
                                        this.addFeed(p), L.addOnlineOfflineToDatabase(p)
                                    }
                                } else {
                                    s.ref.$online_for = "", s.ref.$offline_for = Date.now();
                                    var u = Date.now() - l,
                                        h = await this.getWorldName(d),
                                        p = {
                                            created_at: (new Date).toJSON(),
                                            type: "Offline",
                                            userId: s.ref.id,
                                            displayName: s.ref.displayName,
                                            location: d,
                                            worldName: h,
                                            time: u
                                        };
                                    this.addFeed(p), L.addOnlineOfflineToDatabase(p)
                                }
                            "online" === s.state ? s.isVIP ? (a(this.friendsGroup0_, s), a(this.friendsGroupA_, s)) : (a(this.friendsGroup1_, s), a(this.friendsGroupB_, s)) : "active" === s.state ? (a(this.friendsGroup2_, s), a(this.friendsGroupC_, s)) : (a(this.friendsGroup3_, s), a(this.friendsGroupD_, s)), "online" === n ? o ? (this.sortFriendsGroup0 = !0, this.friendsGroup0_.push(s), this.friendsGroupA_.unshift(s)) : (this.sortFriendsGroup1 = !0, this.friendsGroup1_.push(s), this.friendsGroupB_.unshift(s)) : "active" === n ? (this.sortFriendsGroup2 = !0, this.friendsGroup2_.push(s), this.friendsGroupC_.unshift(s)) : (this.sortFriendsGroup3 = !0, this.friendsGroup3_.push(s), this.friendsGroupD_.unshift(s)), s.state !== n && this.updateOnlineFriendCoutner(), s.state = n, s.name = s.ref.displayName, s.isVIP = o
                        }
                        this.updateFriendInProgress.delete(e)
                    }
                }, e.methods.getWorldName = async function(e) {
                    var t = "";
                    if ("offline" !== e) try {
                        var a = y.parseLocation(e);
                        if (a.worldId) t = (await y.getCachedWorld({
                            worldId: a.worldId
                        })).ref.name
                    } catch (e) {}
                    return t
                }, e.methods.updateFriendGPS = function(e) {
                    if (this.orderFriendsGroupGPS) {
                        var t = this.friends.get(e);
                        void 0 !== t.ref && "online" === t.state && (t.isVIP ? (a(this.friendsGroupA_, t), this.sortFriendsGroup1 = !0, this.friendsGroupA_.unshift(t)) : (a(this.friendsGroupB_, t), this.sortFriendsGroup0 = !0, this.friendsGroupB_.unshift(t)))
                    }
                }, e.data.onlineFriendCount = 0, e.methods.updateOnlineFriendCoutner = function() {
                    var e = this.friendsGroup0.length + this.friendsGroup1.length;
                    e !== this.onlineFriendCount && (AppApi.ExecuteVrFeedFunction("updateOnlineFriendCount", `${e}`), this.onlineFriendCount = e)
                };
                var F = function(e, t) {
                        var a = String(e.name).toUpperCase(),
                            i = String(t.name).toUpperCase();
                        return a < i ? -1 : a > i ? 1 : 0
                    },
                    $ = function(e, t) {
                        var a = String(e.updated_at).toUpperCase(),
                            i = String(t.updated_at).toUpperCase();
                        return a < i ? 1 : a > i ? -1 : 0
                    },
                    _ = function(e, t) {
                        var a = String(e.created_at).toUpperCase(),
                            i = String(t.created_at).toUpperCase();
                        return a < i ? 1 : a > i ? -1 : 0
                    },
                    P = function(e, t) {
                        return void 0 === e.ref || void 0 === t.ref || "private" === e.ref.location && "private" === t.ref.location ? 0 : "private" === e.ref.location ? 1 : "private" === t.ref.location ? -1 : 0
                    },
                    U = function(t, a) {
                        return void 0 === t.ref || void 0 === a.ref ? 0 : !e.orderFriendsGroupPrivate || "private" === t.ref.location && "private" === a.ref.location ? t.ref.status === a.ref.status ? 0 : "offline" === t.ref.state ? 1 : e.sortStatus(t.ref.status, a.ref.status) : 0
                    };
                e.methods.sortByStatus = function(e, t, a) {
                    return this.sortStatus(e[a], t[a])
                }, e.methods.sortStatus = function(e, t) {
                    switch (t) {
                        case "join me":
                            switch (e) {
                                case "active":
                                case "ask me":
                                case "busy":
                                    return 1
                            }
                            break;
                        case "active":
                            switch (e) {
                                case "join me":
                                    return -1;
                                case "ask me":
                                case "busy":
                                    return 1
                            }
                            break;
                        case "ask me":
                            switch (e) {
                                case "join me":
                                case "active":
                                    return -1;
                                case "busy":
                                    return 1
                            }
                            break;
                        case "busy":
                            switch (e) {
                                case "join me":
                                case "active":
                                case "ask me":
                                    return -1
                            }
                    }
                    return 0
                };
                var O = function(e, t) {
                    return e.$location_at < t.$location_at ? -1 : e.$location_at > t.$location_at ? 1 : 0
                };
                e.computed.friendsGroup0 = function() {
                    return this.orderFriendsGroup0 ? (this.orderFriendsGroupPrivate && this.friendsGroupA_.sort(P), this.orderFriendsGroupStatus && this.friendsGroupA_.sort(U), this.friendsGroupA_) : (this.sortFriendsGroup0 && (this.sortFriendsGroup0 = !1, this.friendsGroup0_.sort(F), this.orderFriendsGroupPrivate && this.friendsGroup0_.sort(P), this.orderFriendsGroupStatus && this.friendsGroup0_.sort(U)), this.friendsGroup0_)
                }, e.computed.friendsGroup1 = function() {
                    return this.orderFriendsGroup1 ? (this.orderFriendsGroupPrivate && this.friendsGroupB_.sort(P), this.orderFriendsGroupStatus && this.friendsGroupB_.sort(U), this.friendsGroupB_) : (this.sortFriendsGroup1 && (this.sortFriendsGroup1 = !1, this.friendsGroup1_.sort(F), this.orderFriendsGroupPrivate && this.friendsGroup1_.sort(P), this.orderFriendsGroupStatus && this.friendsGroup1_.sort(U)), this.friendsGroup1_)
                }, e.computed.friendsGroup2 = function() {
                    return this.orderFriendsGroup2 ? this.friendsGroupC_ : (this.sortFriendsGroup2 && (this.sortFriendsGroup2 = !1, this.friendsGroup2_.sort(F)), this.friendsGroup2_)
                }, e.computed.friendsGroup3 = function() {
                    return this.orderFriendsGroup3 ? this.friendsGroupD_ : (this.sortFriendsGroup3 && (this.sortFriendsGroup3 = !1, this.friendsGroup3_.sort(F)), this.friendsGroup3_)
                }, e.methods.userStatusClass = function(e) {
                    var t = {};
                    if (void 0 !== e) {
                        var a = "";
                        if (e.id ? a = e.id : e.userId && (a = e.userId), a && a === y.currentUser.id) return this.statusClass(e.status);
                        if (!e.isFriend) return "";
                        "active" !== e.status && "private" === e.location && "" === e.state && a && !y.currentUser.onlineFriends.includes(a) ? y.currentUser.activeFriends.includes(a) ? t.active = !0 : t.offline = !0 : "offline" === e.location ? t.offline = !0 : "active" === e.state ? t.active = !0 : "active" === e.status ? t.online = !0 : "join me" === e.status ? t.joinme = !0 : "ask me" === e.status ? t.askme = !0 : "busy" === e.status && (t.busy = !0)
                    }
                    return t
                }, e.methods.statusClass = function(e) {
                    var t = {};
                    return void 0 !== e && ("active" === e ? t.online = !0 : "join me" === e ? t.joinme = !0 : "ask me" === e ? t.askme = !0 : "busy" === e && (t.busy = !0)), t
                }, e.methods.confirmDeleteFriend = function(e) {
                    this.$confirm("친구를 삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && y.deleteFriend({
                                userId: e
                            })
                        }
                    })
                }, e.data.quickSearch = "", e.data.quickSearchItems = [], e.methods.quickSearchRemoteMethod = function(e) {
                    var t = [];
                    if (e) {
                        var a = e.toUpperCase();
                        for (var i of this.friends.values())
                            if (void 0 !== i.ref) {
                                var s = i.name.toUpperCase(),
                                    r = s.includes(a);
                                if (!r) {
                                    var o = String(i.ref.username);
                                    r = o.toUpperCase().includes(a) && !o.startsWith("steam_")
                                }!r && i.memo && (r = String(i.memo).toUpperCase().includes(a)), r && t.push({
                                    value: i.id,
                                    label: i.name,
                                    ref: i.ref,
                                    NAME: s
                                })
                            } t.sort((function(e, t) {
                            var i = e.NAME.startsWith(a),
                                s = t.NAME.startsWith(a);
                            if (i !== s) {
                                if (i) return -1;
                                if (s) return 1
                            }
                            return e.NAME < t.NAME ? -1 : e.NAME > t.NAME ? 1 : 0
                        })), t.length > 4 && (t.length = 4), t.push({
                            value: `search:${e}`,
                            label: e
                        })
                    }
                    this.quickSearchItems = t
                }, e.methods.quickSearchChange = function(e) {
                    e && (e.startsWith("search:") ? (this.friendsListSearch = e.substr(7), this.$refs.menu.activeIndex = "friendsList") : this.showUserDialog(e), this.quickSearchVisibleChange(e))
                }, e.methods.quickSearchVisibleChange = function(e) {
                    e && (this.quickSearch = "", this.quickSearchItems = [], this.quickSearchUserHistory())
                }, e.data.showUserDialogHistory = new Set, e.methods.quickSearchUserHistory = function() {
                    var e = Array.from(this.showUserDialogHistory.values()).reverse().slice(0, 5),
                        t = [];
                    e.forEach((e => {
                        var a = y.cachedUsers.get(e);
                        void 0 !== a && t.push({
                            value: a.id,
                            label: a.name,
                            ref: a
                        })
                    })), this.quickSearchItems = t
                }, e.methods.feedSearch = function(e) {
                    var t = this.feedTable.search.toUpperCase();
                    if (!t) return !0;
                    switch (e.type) {
                        case "GPS":
                        case "Online":
                        case "Offline":
                            return !!String(e.displayName).toUpperCase().includes(t) || !!String(e.worldName).toUpperCase().includes(t);
                        case "Status":
                            return !!String(e.displayName).toUpperCase().includes(t) || (!!String(e.status).toUpperCase().includes(t) || !!String(e.statusDescription).toUpperCase().includes(t));
                        case "Avatar":
                            return !!String(e.displayName).toUpperCase().includes(t) || !!String(e.avatarName).toUpperCase().includes(t)
                    }
                    return !0
                }, e.data.tablePageSize = 10, w.getInt("VRCX_tablePageSize") && (e.data.tablePageSize = w.getInt("VRCX_tablePageSize")), e.data.feedTable = {
                    data: [],
                    search: "",
                    vip: !1,
                    loading: !1,
                    filter: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "created_at",
                            order: "descending"
                        }
                    },
                    pageSize: e.data.tablePageSize,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [10, 15, 25, 50, 100]
                    }
                }, e.data.feedSessionTable = [], e.methods.feedTableLookup = async function() {
                    w.setString("VRCX_feedTableFilters", JSON.stringify(this.feedTable.filter)), w.setBool("VRCX_feedTableVIPFilter", this.feedTable.vip), this.feedTable.loading = !0;
                    var e = [];
                    this.feedTable.vip && (e = this.getUserVipList()), this.feedTable.data = await L.lookupFeedDatabase(this.feedTable.search, this.feedTable.filter, e), this.feedTable.loading = !1
                }, e.methods.getUserVipList = function() {
                    var e = [];
                    return y.cachedFavorites.forEach((t => {
                        "friend" === t.type && e.push(t.favoriteId)
                    })), e
                }, y.$on("LOGIN", (async function(t) {
                    e.friendLog = new Map, e.feedTable.data = [], e.feedSessionTable = [], e.friendLogInitStatus = !1, await L.initUserTables(t.json.id), e.gameLogTable.data = await L.lookupGameLogDatabase(e.gameLogTable.search, e.gameLogTable.filter), e.feedSessionTable = await L.getFeedDatabase(), e.feedTableLookup(), e.notificationTable.data = await L.getNotifications(), w.getBool(`friendLogInit_${t.json.id}`) ? await e.getFriendLog() : await e.initFriendLog(t.json.id), this.getAuth(), e.updateSharedFeed(!0), e.isGameRunning && e.loadPlayerList(), e.vrInit(), VRCXStorage.Get(`${t.json.id}_friendLogUpdatedAt`) && (VRCXStorage.Remove(`${t.json.id}_feedTable`), e.migrateMemos(), e.migrateFriendLog(t.json.id))
                })), e.methods.loadPlayerList = function() {
                    var e = this.gameLogSessionTable;
                    if (0 !== e.length) {
                        for (var t = 0, a = e.length - 1; a > -1; a--) {
                            if ("Location" === (i = e[a]).type) {
                                this.lastLocation = {
                                    date: Date.parse(i.created_at),
                                    location: i.location,
                                    name: i.worldName,
                                    playerList: new Map,
                                    friendList: new Map
                                }, t = a;
                                break
                            }
                        }
                        if (this.updateCurrentInstanceWorld(this.lastLocation.location), t > 0) {
                            for (a = t + 1; a < e.length; a++) {
                                var i;
                                if ("OnPlayerJoined" === (i = e[a]).type) {
                                    if (!i.userId)
                                        for (var s of y.cachedUsers.values())
                                            if (s.displayName === i.displayName) {
                                                i.userId = s.id;
                                                break
                                            } var r = {
                                        displayName: i.displayName,
                                        userId: i.userId,
                                        joinTime: Date.parse(i.created_at)
                                    };
                                    this.lastLocation.playerList.set(i.displayName, r), this.friends.has(i.userId) && this.lastLocation.friendList.set(i.displayName, r)
                                }
                                "OnPlayerLeft" === i.type && (this.lastLocation.playerList.delete(i.displayName), this.lastLocation.friendList.delete(i.displayName))
                            }
                            this.updateVRLastLocation(), this.getCurrentInstanceUserList()
                        }
                    }
                }, e.data.robotUrl = `${y.endpointDomain}/file/file_0e8c4e32-7444-44ea-ade4-313c010d4bae/1/file`, y.$on("USER:UPDATE", (async function(t) {
                    var {
                        ref: a,
                        props: i
                    } = t;
                    if (!1 !== e.friends.has(a.id)) {
                        if (i.location && "offline" !== i.location[0] && "" !== i.location[0] && "offline" !== i.location[1] && "" !== i.location[1]) {
                            var s = await e.getWorldName(i.location[0]),
                                r = {
                                    created_at: (new Date).toJSON(),
                                    type: "GPS",
                                    userId: a.id,
                                    displayName: a.displayName,
                                    location: i.location[0],
                                    worldName: s,
                                    previousLocation: i.location[1],
                                    time: i.location[2]
                                };
                            e.addFeed(r), L.addGPSToDatabase(r), e.updateFriendGPS(a.id), e.feedDownloadWorldCache(a.id, i.location[0])
                        }
                        if ((i.currentAvatarImageUrl || i.currentAvatarThumbnailImageUrl) && !a.profilePicOverride) {
                            var o = "",
                                n = "",
                                d = "",
                                l = "";
                            i.currentAvatarImageUrl ? (o = i.currentAvatarImageUrl[0], n = i.currentAvatarImageUrl[1]) : (o = a.currentAvatarImageUrl, n = a.currentAvatarImageUrl), i.currentAvatarThumbnailImageUrl ? (d = i.currentAvatarThumbnailImageUrl[0], l = i.currentAvatarThumbnailImageUrl[1]) : (d = a.currentAvatarThumbnailImageUrl, l = a.currentAvatarThumbnailImageUrl);
                            var c = {
                                ownerId: "",
                                avatarName: ""
                            };
                            try {
                                c = await e.getAvatarName(o)
                            } catch (e) {}
                            r = {
                                created_at: (new Date).toJSON(),
                                type: "Avatar",
                                userId: a.id,
                                displayName: a.displayName,
                                ownerId: c.ownerId,
                                avatarName: c.avatarName,
                                currentAvatarImageUrl: o,
                                currentAvatarThumbnailImageUrl: d,
                                previousCurrentAvatarImageUrl: n,
                                previousCurrentAvatarThumbnailImageUrl: l
                            };
                            e.addFeed(r), L.addAvatarToDatabase(r)
                        }
                        if (i.status || i.statusDescription) {
                            var u = "",
                                h = "",
                                p = "",
                                m = "";
                            i.status ? (i.status[0] && (u = i.status[0]), i.status[1] && (h = i.status[1])) : a.status && (u = a.status, h = a.status), i.statusDescription ? (i.statusDescription[0] && (p = i.statusDescription[0]), i.statusDescription[1] && (m = i.statusDescription[1])) : a.statusDescription && (p = a.statusDescription, m = a.statusDescription);
                            r = {
                                created_at: (new Date).toJSON(),
                                type: "Status",
                                userId: a.id,
                                displayName: a.displayName,
                                status: u,
                                statusDescription: p,
                                previousStatus: h,
                                previousStatusDescription: m
                            };
                            e.addFeed(r), L.addStatusToDatabase(r)
                        }
                    }
                })), e.methods.addFeed = function(e) {
                    this.queueFeedNoty(e), this.feedSessionTable.push(e), this.feedTable.filter.length > 0 && !this.feedTable.filter.includes(e.type) || this.feedTable.vip && !y.cachedFavoritesByObjectId.has(e.userId) || this.feedSearch(e) && (this.feedTable.data.push(e), this.sweepFeed(), this.updateSharedFeed(!1), this.notifyMenu("feed"))
                }, e.methods.clearFeed = function() {
                    this.$confirm("피드를 삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: e => {
                            if ("confirm" === e) {
                                var t = this.feedTable;
                                t.data = t.data.filter((e => !t.filters.every((t => {
                                    if (t.value) {
                                        if (!Array.isArray(t.value)) return t.filterFn ? t.filterFn(e, t) : String(e[t.prop]).toUpperCase().includes(String(t.value).toUpperCase());
                                        if (t.value.length) {
                                            if (t.filterFn) return t.filterFn(e, t);
                                            var a = String(e[t.prop]).toUpperCase();
                                            return t.value.some((e => a.includes(String(e).toUpperCase())))
                                        }
                                    }
                                    return !0
                                }))))
                            }
                        }
                    })
                }, e.methods.sweepFeed = function() {
                    var {
                        data: e
                    } = this.feedTable, t = e.length;
                    t > this.maxTableSize && e.splice(0, t - this.maxTableSize);
                    var a = new Date;
                    a.setDate(a.getDate() - 1);
                    for (var i = a.toJSON(), s = 0, r = this.feedSessionTable.length; s < r && this.feedSessionTable[s].created_at < i;) ++s;
                    s === r ? this.feedSessionTable = [] : s && this.feedSessionTable.splice(0, s)
                }, e.data.lastLocation = {
                    date: 0,
                    location: "",
                    name: "",
                    playerList: new Map,
                    friendList: new Map
                }, e.methods.lastLocationReset = function() {
                    this.photonLobby = new Map, this.photonLobbyCurrent = new Map, this.photonLobbyMaster = 0, this.photonLobbyCurrentUser = 0, this.photonLobbyUserData = new Map, this.photonLobbyInVrMode = new Map, this.photonLobbyWatcherLoopStop(), this.photonLobbyAvatars = new Map, this.photonLobbyJointime = new Map, this.photonEvent7List = new Map, this.moderationEventQueue = new Map, this.lastPortalId = "", this.lastPortalList = new Map, this.photonEventTable.data.length > 0 && (this.photonEventTablePrevious.data = this.photonEventTable.data, this.photonEventTable.data = []), this.updateCurrentInstanceWorld();
                    var e = Array.from(this.lastLocation.playerList.values());
                    for (var t of e) {
                        var a = (new Date).getTime() - t.joinTime,
                            i = {
                                created_at: (new Date).toJSON(),
                                type: "OnPlayerLeft",
                                displayName: t.displayName,
                                location: this.lastLocation.location,
                                userId: t.userId,
                                time: a
                            };
                        L.addGamelogJoinLeaveToDatabase(i), this.addGameLog(i)
                    }
                    if (0 !== this.lastLocation.date) {
                        var s = {
                            time: (new Date).getTime() - this.lastLocation.date,
                            created_at: new Date(this.lastLocation.date).toJSON()
                        };
                        L.updateGamelogLocationTimeToDatabase(s)
                    }
                    this.lastLocation = {
                        date: 0,
                        location: "",
                        name: "",
                        playerList: new Map,
                        friendList: new Map
                    }, this.updateVRLastLocation(), this.getCurrentInstanceUserList(), this.lastVideoUrl = ""
                }, e.data.lastLocation$ = {
                    tag: "",
                    instanceId: "",
                    accessType: "",
                    worldName: "",
                    worldCapacity: 0,
                    joinUrl: "",
                    statusName: "",
                    statusImage: ""
                }, e.data.discordActive = w.getBool("discordActive"), e.data.discordInstance = w.getBool("discordInstance"), e.data.discordJoinButton = w.getBool("discordJoinButton"), e.data.discordHideInvite = w.getBool("discordHideInvite"), e.methods.saveDiscordOption = function() {
                    w.setBool("discordActive", this.discordActive), w.setBool("discordInstance", this.discordInstance), w.setBool("discordJoinButton", this.discordJoinButton), w.setBool("discordHideInvite", this.discordHideInvite), this.discordActive || (Discord.SetText("", ""), Discord.SetActive(!1)), this.lastLocation$.tag = "", this.updateDiscord()
                }, e.methods.gameLogSearch = function(e) {
                    var t = this.gameLogTable.search.toUpperCase();
                    if (!t) return !0;
                    switch (e.type) {
                        case "Location":
                            return !!String(e.worldName).toUpperCase().includes(t);
                        case "OnPlayerJoined":
                        case "OnPlayerLeft":
                            return !!String(e.displayName).toUpperCase().includes(t);
                        case "PortalSpawn":
                            return !!String(e.displayName).toUpperCase().includes(t) || !!String(e.worldName).toUpperCase().includes(t);
                        case "Event":
                            return !!String(e.data).toUpperCase().includes(t);
                        case "VideoPlay":
                            return !!String(e.displayName).toUpperCase().includes(t) || (!!String(e.videoName).toUpperCase().includes(t) || !!String(e.videoUrl).toUpperCase().includes(t))
                    }
                    return !0
                }, e.data.gameLogTable = {
                    data: [],
                    loading: !1,
                    search: "",
                    filter: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "created_at",
                            order: "descending"
                        }
                    },
                    pageSize: e.data.tablePageSize,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [10, 15, 25, 50, 100]
                    }
                }, e.data.gameLogSessionTable = [], e.methods.gameLogTableLookup = async function() {
                    w.setString("VRCX_gameLogTableFilters", JSON.stringify(this.gameLogTable.filter)), this.gameLogTable.loading = !0, this.gameLogTable.data = await L.lookupGameLogDatabase(this.gameLogTable.search, this.gameLogTable.filter), this.gameLogTable.loading = !1
                }, e.methods.addGameLog = function(e) {
                    this.gameLogSessionTable.push(e), this.updateSharedFeed(!1), "VideoPlay" === e.type && this.updateSharedFeed(!0), "LocationDestination" !== e.type && "AvatarChange" !== e.type && (e.userId !== y.currentUser.id || "OnPlayerJoined" !== e.type && "OnPlayerLeft" !== e.type) && (this.gameLogTable.filter.length > 0 && !this.gameLogTable.filter.includes(e.type) || this.gameLogSearch(e) && (this.gameLogTable.data.push(e), this.sweepGameLog(), this.notifyMenu("gameLog")))
                }, e.methods.resetGameLog = async function() {
                    await R.reset(), this.gameLogTable.data = [], this.lastLocationReset()
                }, e.methods.sweepGameLog = function() {
                    var {
                        data: e
                    } = this.gameLogTable, t = e.length;
                    t > this.maxTableSize && e.splice(0, t - this.maxTableSize);
                    var a = new Date;
                    a.setDate(a.getDate() - 1);
                    for (var i = a.toJSON(), s = 0, r = this.gameLogSessionTable.length; s < r && this.gameLogSessionTable[s].created_at < i;) ++s;
                    s === r ? this.gameLogSessionTable = [] : s && this.gameLogSessionTable.splice(0, s)
                }, e.methods.refreshEntireGameLog = async function() {
                    await R.setDateTill("1970-01-01"), await L.initTables(), await this.resetGameLog();
                    var e = "";
                    for (var t of await R.getAll()) "location" === t.type && (e = t.location), this.addGameLogEntry(t, e);
                    this.getGameLogTable()
                }, e.methods.getGameLogTable = async function() {
                    await L.initTables(), this.gameLogSessionTable = await L.getGamelogDatabase();
                    var e = await L.getLastDateGameLogDatabase();
                    this.updateGameLog(e)
                }, e.methods.updateGameLog = async function(e) {
                    await R.setDateTill(e), await R.reset(), await new Promise((e => {
                        setTimeout(e, 1e4)
                    }));
                    var t = "";
                    for (var a of await R.getAll()) "location" === a.type && (t = a.location), this.addGameLogEntry(a, t)
                }, e.methods.addGameLogEvent = function(e) {
                    var t = JSON.parse(e),
                        a = R.parseRawGameLog(t[1], t[2], t.slice(3));
                    this.debugGameLog && "photon-id" !== a.type && "api-request" !== a.type && console.log("gameLog:", a), this.addGameLogEntry(a, this.lastLocation.location)
                }, e.data.lastLocationDestination = "", e.data.lastLocationDestinationTime = 0, e.data.lastVideoUrl = "", e.methods.addGameLogEntry = function(e, t) {
                    var a = "";
                    if (e.userDisplayName)
                        for (var i of y.cachedUsers.values())
                            if (i.displayName === e.userDisplayName) {
                                a = i.id;
                                break
                            } switch (e.type) {
                        case "location-destination":
                            this.isGameRunning && (this.cancelVRChatCacheDownload(e.location), this.clearNowPlaying(), this.updateCurrentInstanceWorld(e.location)), this.lastLocationDestination = e.location, this.lastLocationDestinationTime = Date.parse(e.dt);
                            var s = {
                                created_at: e.dt,
                                type: "LocationDestination",
                                location: e.location
                            };
                            break;
                        case "location":
                            this.isGameRunning && (this.lastLocationReset(), this.clearNowPlaying(), this.lastLocation = {
                                date: Date.parse(e.dt),
                                location: e.location,
                                name: e.worldName,
                                playerList: new Map,
                                friendList: new Map
                            }, this.updateVRLastLocation(), this.cancelVRChatCacheDownload(e.location), this.updateCurrentInstanceWorld(e.location));
                            var r = y.parseLocation(e.location);
                            s = {
                                created_at: e.dt,
                                type: "Location",
                                location: e.location,
                                worldId: r.worldId,
                                worldName: e.worldName,
                                time: 0
                            };
                            L.addGamelogLocationToDatabase(s);
                            break;
                        case "player-joined":
                            var o = {
                                displayName: e.userDisplayName,
                                userId: a,
                                joinTime: Date.parse(e.dt)
                            };
                            if (this.lastLocation.playerList.set(e.userDisplayName, o), a)
                                if (this.friends.has(a)) this.lastLocation.friendList.set(e.userDisplayName, o);
                                else if (void 0 !== (i = y.cachedUsers.get(a))) {
                                var n = Date.parse(e.dt);
                                i.$location_at = n
                            }
                            this.updateVRLastLocation(), this.getCurrentInstanceUserList();
                            s = {
                                created_at: e.dt,
                                type: "OnPlayerJoined",
                                displayName: e.userDisplayName,
                                location: t,
                                userId: a,
                                time: 0
                            };
                            L.addGamelogJoinLeaveToDatabase(s);
                            break;
                        case "player-left":
                            var d = 0;
                            void 0 !== (i = this.lastLocation.playerList.get(e.userDisplayName)) && (d = Date.now() - i.joinTime, this.lastLocation.playerList.delete(e.userDisplayName), this.lastLocation.friendList.delete(e.userDisplayName)), this.photonLobbyAvatars.delete(a), this.updateVRLastLocation(), this.getCurrentInstanceUserList();
                            s = {
                                created_at: e.dt,
                                type: "OnPlayerLeft",
                                displayName: e.userDisplayName,
                                location: t,
                                userId: a,
                                time: d
                            };
                            L.addGamelogJoinLeaveToDatabase(s);
                            break;
                        case "portal-spawn":
                            if (this.ipcEnabled && this.isGameRunning) return;
                            s = {
                                created_at: e.dt,
                                type: "PortalSpawn",
                                displayName: e.userDisplayName,
                                location: t,
                                userId: a,
                                instanceId: "",
                                worldName: ""
                            };
                            L.addGamelogPortalSpawnToDatabase(s);
                            break;
                        case "video-play":
                            var l = encodeURI(e.videoUrl);
                            if (this.lastVideoUrl === l) return;
                            return this.lastVideoUrl = l, void this.addGameLogVideo(e, t, a);
                        case "video-sync":
                            var c = e.timestamp.replace(/,/g, "");
                            return void(this.nowPlaying.playing && (this.nowPlaying.offset = parseInt(c, 10)));
                        case "api-request":
                            var u = Date.parse(e.dt) + 6e4;
                            if (!this.isGameRunning || u < Date.now()) return;
                            a = "";
                            try {
                                var h = new URL(e.url),
                                    p = new URLSearchParams(e.url);
                                if ("/api/1/users/" === h.pathname.substring(0, 13)) a = h.pathname.split("/")[4];
                                else p.has("userId") && (a = p.get("userId"))
                            } catch (e) {
                                console.error(e)
                            }
                            return void(a && !y.cachedUsers.has(a) && y.getUser({
                                userId: a
                            }));
                        case "vrcx":
                            var m = e.data.substr(0, e.data.indexOf(" "));
                            return void("VideoPlay(PyPyDance)" === m ? this.addGameLogPyPyDance(e, t) : "VideoPlay(VRDancing)" === m ? this.addGameLogVRDancing(e, t) : "VideoPlay(ZuwaZuwaDance)" === m && this.addGameLogZuwaZuwaDance(e, t));
                        case "photon-id":
                            if (!this.isGameRunning || !this.friendLogInitStatus) return;
                            var g = parseInt(e.photonId, 10);
                            if (void 0 === (i = this.photonLobby.get(g))) {
                                for (var f of y.cachedUsers.values())
                                    if (f.displayName === e.displayName) return this.photonLobby.set(g, f), void this.photonLobbyCurrent.set(g, f);
                                f = {
                                    displayName: e.displayName
                                };
                                this.photonLobby.set(g, f), this.photonLobbyCurrent.set(g, f), this.getCurrentInstanceUserList()
                            }
                            return;
                        case "notification":
                            return;
                        case "event":
                            s = {
                                created_at: e.dt,
                                type: "Event",
                                data: e.event
                            };
                            L.addGamelogEventToDatabase(s)
                    }
                    s && (this.queueGameLogNoty(s), this.addGameLog(s))
                }, e.data.recommendedSteamParams = "https://gist.github.com/Natsumi-sama/d280a58f08ace3da0e8fc7a9a381d44e", e.data.lastPortalId = "", e.data.lastPortalList = new Map, e.data.moderationEventQueue = new Map, e.data.moderationAgainstTable = [], e.data.photonLobby = new Map, e.data.photonLobbyMaster = 0, e.data.photonLobbyCurrentUser = 0, e.data.photonLobbyUserData = new Map, e.data.photonLobbyInVrMode = new Map, e.data.photonLobbyCurrent = new Map, e.data.photonLobbyAvatars = new Map, e.data.photonLobbyWatcherLoop = !1, e.data.photonLobbyTimeout = [], e.data.photonLobbyJointime = new Map, e.data.photonLobbyBots = [], e.data.photonEvent7List = new Map, e.data.photonEventType = ["MeshVisibility", "AnimationFloat", "AnimationBool", "AnimationTrigger", "AudioTrigger", "PlayAnimation", "SendMessage", "SetParticlePlaying", "TeleportPlayer", "RunConsoleCommand", "SetGameObjectActive", "SetWebPanelURI", "SetWebPanelVolume", "SpawnObject", "SendRPC", "ActivateCustomTrigger", "DestroyObject", "SetLayer", "SetMaterial", "AddHealth", "AddDamage", "SetComponentActive", "AnimationInt", "AnimationIntAdd", "AnimationIntSubtract", "AnimationIntMultiply", "AnimationIntDivide", "AddVelocity", "SetVelocity", "AddAngularVelocity", "SetAngularVelocity", "AddForce", "SetUIText", "CallUdonMethod"], e.data.photonEmojis = ["Angry", "Blushing", "Crying", "Frown", "Hand Wave", "Hang Ten", "In Love", "Jack O Lantern", "Kiss", "Laugh", "Skull", "Smile", "Spooky Ghost", "Stoic", "Sunglasses", "Thinking", "Thumbs Down", "Thumbs Up", "Tongue Out", "Wow", "Bats", "Cloud", "Fire", "Snow Fall", "Snowball", "Splash", "Web", "Beer", "Candy", "Candy Cane", "Candy Corn", "Champagne", "Drink", "Gingerbread", "Ice Cream", "Pineapple", "Pizza", "Tomato", "Beachball", "Coal", "Confetti", "Gift", "Gifts", "Life Ring", "Mistletoe", "Money", "Neon Shades", "Sun Lotion", "Boo", "Broken Heart", "Exclamation", "Go", "Heart", "Music Note", "Question", "Stop", "Zzz"], e.methods.startLobbyWatcherLoop = function() {
                    this.photonLobbyWatcherLoop || (this.photonLobbyWatcherLoop = !0, this.photonLobbyWatcher())
                }, e.methods.photonLobbyWatcherLoopStop = function() {
                    this.photonLobbyWatcherLoop = !1, this.photonLobbyTimeout = [], this.photonLobbyBots = [], AppApi.ExecuteVrOverlayFunction("updateHudTimeout", "[]"), this.updatePhotonLobbyBotSize(0)
                }, e.methods.photonLobbyWatcher = function() {
                    if (this.photonLobbyWatcherLoop)
                        if (this.photonLobbyCurrent.size <= 1) this.photonLobbyWatcherLoopStop();
                        else {
                            var e = Date.now(),
                                t = this.lastLocationDestinationTime + 5e3,
                                a = this.lastLocation.date + 3e4;
                            if (e < t || e < a || this.lastLocation.playerList.size <= 1) p.iK((() => this.photonLobbyWatcher()), 500);
                            else {
                                var i = [];
                                if (this.photonEvent7List.forEach(((t, a) => {
                                        var s = e - Date.parse(t);
                                        if (s > this.photonLobbyTimeoutThreshold) {
                                            if (this.photonLobbyJointime.has(a)) var {
                                                joinTime: r
                                            } = this.photonLobbyJointime.get(a);
                                            (!r || r + 12e4 < e) && i.unshift({
                                                userId: this.getUserIdFromPhotonId(a),
                                                displayName: this.getDisplayNameFromPhotonId(a),
                                                time: Math.round(s / 1e3)
                                            })
                                        }
                                    })), this.photonLobbyTimeout.length > 0 || i.length > 0) {
                                    if (i.sort((function(e, t) {
                                            return e.time > t.time ? 1 : e.time < t.time ? -1 : 0
                                        })), this.timeoutHudOverlay) {
                                        if ("VIP" === this.timeoutHudOverlayFilter || "Friends" === this.timeoutHudOverlayFilter) {
                                            var s = [];
                                            i.forEach((e => {
                                                ("VIP" === this.timeoutHudOverlayFilter && y.cachedFavoritesByObjectId.has(e.userId) || "Friends" === this.timeoutHudOverlayFilter && this.friends.has(e.userId)) && s.push(e)
                                            }))
                                        } else s = i;
                                        AppApi.ExecuteVrOverlayFunction("updateHudTimeout", JSON.stringify(s))
                                    }
                                    this.photonLobbyTimeout = i, this.getCurrentInstanceUserList()
                                }
                                this.photonBotCheck(e), p.iK((() => this.photonLobbyWatcher()), 500)
                            }
                        }
                }, e.methods.photonBotCheck = function(e) {
                    var t = [];
                    this.photonLobbyCurrent.forEach(((a, i) => {
                        if (this.photonLobbyJointime.has(i)) var {
                            joinTime: s,
                            hasInstantiated: r,
                            avatarEyeHeight: o
                        } = this.photonLobbyJointime.get(i);
                        var n = "";
                        if (o < 0 ? n = "Photon bot has joined, invalid avatarEyeHeight" : s && s + 11e3 < e && !r && (n = "Potential photon bot has joined, failed to instantiate after 10 seconds"), n && i !== this.photonLobbyCurrentUser) {
                            if (!this.photonLobbyBots.includes(i)) {
                                this.addEntryPhotonEvent({
                                    photonId: i,
                                    text: n,
                                    type: "PhotonBot",
                                    color: "yellow",
                                    created_at: (new Date).toJSON()
                                });
                                var d = {
                                    created_at: (new Date).toJSON(),
                                    type: "Event",
                                    data: `${n} ${this.getDisplayNameFromPhotonId(i)} (${this.getUserIdFromPhotonId(i)})`
                                };
                                this.queueGameLogNoty(d), this.addGameLog(d), L.addGamelogEventToDatabase(d)
                            }
                            t.unshift(i)
                        }
                    })), this.photonLobbyBots.length !== t.length && this.updatePhotonLobbyBotSize(t.length), this.photonLobbyBots = t
                }, e.methods.updatePhotonLobbyBotSize = function(e) {
                    AppApi.ExecuteVrFeedFunction("updatePhotonLobbyBotSize", `${e}`)
                }, e.data.photonEventTableFilter = "", e.methods.photonEventTableFilterChange = function() {
                    this.photonEventTable.filters[0].value = this.photonEventTableFilter, this.photonEventTablePrevious.filters[0].value = this.photonEventTableFilter
                }, e.data.photonEventTable = {
                    data: [],
                    filters: [{
                        prop: ["displayName", "text"],
                        value: ""
                    }],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    pageSize: 10,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [5, 10, 15, 25, 50]
                    }
                }, e.data.photonEventTablePrevious = {
                    data: [],
                    filters: [{
                        prop: ["displayName", "text"],
                        value: ""
                    }],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    pageSize: 10,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [5, 10, 15, 25, 50]
                    }
                }, e.methods.addEntryPhotonEvent = function(e) {
                    var t = !1;
                    e.photonId === this.photonLobbyMaster && (t = !0);
                    var a = {
                        displayName: this.getDisplayNameFromPhotonId(e.photonId),
                        userId: this.getUserIdFromPhotonId(e.photonId),
                        isMaster: t,
                        ...e
                    };
                    this.photonEventTable.data.unshift(a), this.photonEventOverlay && ("VIP" === this.photonEventOverlayFilter || "Friends" === this.photonEventOverlayFilter ? a.userId && ("VIP" === this.photonEventOverlayFilter && y.cachedFavoritesByObjectId.has(a.userId) || "Friends" === this.photonEventOverlayFilter && this.friends.has(a.userId)) && AppApi.ExecuteVrOverlayFunction("addEntryHudFeed", JSON.stringify(a)) : AppApi.ExecuteVrOverlayFunction("addEntryHudFeed", JSON.stringify(a)))
                }, e.methods.getDisplayNameFromPhotonId = function(e) {
                    var t = "";
                    if (e) {
                        var a = this.photonLobby.get(e);
                        t = `ID:${e}`, void 0 !== a && void 0 !== a.displayName && (t = a.displayName)
                    }
                    return t
                }, e.methods.getUserIdFromPhotonId = function(e) {
                    var t = "";
                    if (e) {
                        var a = this.photonLobby.get(e);
                        void 0 !== a && void 0 !== a.id && (t = a.id)
                    }
                    return t
                }, e.methods.showUserFromPhotonId = function(e) {
                    if (e) {
                        var t = this.photonLobby.get(e);
                        void 0 !== t ? void 0 !== t.id ? this.showUserDialog(t.id) : void 0 !== t.displayName && this.lookupUser(t) : this.$message({
                            message: "유저 정보가 없습니다.",
                            type: "error"
                        })
                    }
                }, e.methods.getPhotonIdFromDisplayName = function(e) {
                    var t = "";
                    return e && this.photonLobbyCurrent.forEach(((a, i) => {
                        void 0 !== a && a.displayName === e && (t = i)
                    })), t
                }, e.methods.sortPhotonId = function(e, t, a) {
                    var i = this.getPhotonIdFromDisplayName(e[a]),
                        s = this.getPhotonIdFromDisplayName(t[a]);
                    return i < s ? 1 : i > s ? -1 : 0
                }, e.methods.parsePhotonEvent = function(e, t) {
                    if (7 === e.Code) this.photonEvent7List.set(e.Sender, t);
                    else if (226 === e.Code);
                    else if (253 === e.Code) this.parsePhotonUser(e.Parameters[253], e.Parameters[251].user, t), this.parsePhotonAvatarChange(e.Parameters[253], e.Parameters[251].user, e.Parameters[251].avatarDict, t), this.parsePhotonAvatar(e.Parameters[251].avatarDict), this.parsePhotonAvatar(e.Parameters[251].favatarDict), void 0 !== e.Parameters[251].inVRMode && this.photonLobbyInVrMode.set(e.Parameters[253], e.Parameters[251].inVRMode);
                    else if (255 === e.Code) {
                        void 0 !== e.Parameters[249] && (this.parsePhotonUser(e.Parameters[254], e.Parameters[249].user, t), this.parsePhotonAvatarChange(e.Parameters[254], e.Parameters[249].user, e.Parameters[249].avatarDict, t), this.parsePhotonAvatar(e.Parameters[249].avatarDict), this.parsePhotonAvatar(e.Parameters[249].favatarDict)), void 0 !== e.Parameters[249].inVRMode && this.photonLobbyInVrMode.set(e.Parameters[254], e.Parameters[249].inVRMode), this.parsePhotonLobbyIds(e.Parameters[252]);
                        var a = !1;
                        this.photonLobbyCurrentUser === e.Parameters[254] && (a = !0), this.photonLobbyJointime.set(e.Parameters[254], {
                            joinTime: Date.parse(t),
                            hasInstantiated: a,
                            inVRMode: e.Parameters[249].inVRMode,
                            avatarEyeHeight: e.Parameters[249].avatarEyeHeight
                        });
                        var i = this.photonLobbyCurrent.get(e.Parameters[254]);
                        this.photonUserJoin(e.Parameters[254], i, t), this.checkPhotonBotJoin(e.Parameters[254], e.Parameters[249], t), this.startLobbyWatcherLoop()
                    } else if (254 === e.Code) this.checkPhotonBotLeave(e.Parameters[254], t), this.photonUserLeave(e.Parameters[254], t), this.photonLobbyCurrent.delete(e.Parameters[254]), this.photonLobbyJointime.delete(e.Parameters[254]), this.photonLobbyInVrMode.delete(e.Parameters[254]), this.photonEvent7List.delete(e.Parameters[254]), this.parsePhotonLobbyIds(e.Parameters[252]), void 0 !== e.Parameters[203] && this.setPhotonLobbyMaster(e.Parameters[203], t);
                    else if (4 === e.Code) this.setPhotonLobbyMaster(e.Parameters[254], t);
                    else if (33 === e.Code) {
                        if (21 === e.Parameters[245][0])
                            if (e.Parameters[245][1]) {
                                var s = e.Parameters[245][1],
                                    o = e.Parameters[245][10],
                                    n = e.Parameters[245][11];
                                void 0 !== (i = this.photonLobby.get(s)) && void 0 !== i.id ? this.photonModerationUpdate(i, s, o, n, t) : this.moderationEventQueue.set(s, {
                                    block: o,
                                    mute: n,
                                    gameLogDate: t
                                })
                            } else {
                                var d = e.Parameters[245][10],
                                    l = e.Parameters[245][11],
                                    c = new Map;
                                d.forEach((e => {
                                    l.includes(e) ? c.set(e, {
                                        isMute: !0,
                                        isBlock: !0
                                    }) : c.set(e, {
                                        isMute: !1,
                                        isBlock: !0
                                    })
                                })), l.forEach((e => {
                                    c.has(e) || c.set(e, {
                                        isMute: !0,
                                        isBlock: !1
                                    })
                                })), c.forEach((({
                                    isMute: e,
                                    isBlock: a
                                }, i) => {
                                    var s = this.photonLobby.get(i);
                                    void 0 !== s && void 0 !== s.id ? this.photonModerationUpdate(s, i, a, e, t) : this.moderationEventQueue.set(i, {
                                        block: a,
                                        mute: e,
                                        gameLogDate: t
                                    })
                                }))
                            }
                    } else if (202 === e.Code) {
                        this.photonLobby.has(e.Parameters[254]) || this.photonLobby.set(e.Parameters[254]), this.photonLobbyCurrent.has(e.Parameters[254]) || this.photonLobbyCurrent.set(e.Parameters[254]);
                        var u = this.photonLobbyJointime.get(e.Parameters[254]);
                        void 0 !== u && this.photonLobbyJointime.set(e.Parameters[254], {
                            ...u,
                            hasInstantiated: !0
                        })
                    } else if (6 === e.Code) {
                        var h = e.Parameters[254];
                        AppApi.DeserializeVrcEvent(e.Parameters[245]).then((e => {
                            try {
                                var a = JSON.parse(e)
                            } catch {
                                return void console.error("error parsing DeserializeVrcEvent json:", e)
                            }
                            if ("ReceiveVoiceStatsSyncRPC" !== a.EventType && "initUSpeakSenderRPC" !== a.EventType && "SanityCheck" !== a.EventType && ("UdonSyncRunProgramAsRPC" !== a.EventType || "Beep" === a.Data[0]) && "InformOfBadConnection" !== a.EventType && "SetTimerRPC" !== a.EventType && "IncrementPortalPlayerCountRPC" !== a.EventType && "PlayEffect" !== a.EventType && "PlayEmoteRPC" !== a.EventType && "CancelRPC" !== a.EventType && "_SendOnSpawn" !== a.EventType && "RefreshAvatar" !== a.EventType && "InternalApplyOverrideRPC" !== a.EventType)
                                if (this.debugPhotonLogging && console.log("VrcEvent:", a), "_InstantiateObject" !== a.EventType || "Portals/PortalInternalDynamic" !== a.Data[0])
                                    if ("_DestroyObject" === a.EventType && this.lastPortalList.has(a.Data[0])) {
                                        var i = a.Data[0],
                                            s = this.lastPortalList.get(i),
                                            o = r(Date.parse(t) - s);
                                        this.addEntryPhotonEvent({
                                            photonId: h,
                                            text: `DeletedPortal ${o}`,
                                            type: "DeletedPortal",
                                            created_at: t
                                        })
                                    } else if ("ConfigurePortal" !== a.EventType) {
                                if (a.Type > 34) {
                                    var n = {
                                        created_at: t,
                                        type: "Event",
                                        data: `${p} called non existent RPC ${a.Type}`
                                    };
                                    this.addPhotonEventToGameLog(n)
                                }
                                if (14 === a.Type) {
                                    if ("ChangeVisibility" === a.EventType) {
                                        if (!0 === a.Data[0]) var d = "EnableCamera";
                                        else if (!1 === a.Data[0]) d = "DisableCamera"
                                    } else if ("UdonSyncRunProgramAsRPC" === a.EventType && "Beep" === a.Data[0]) {
                                        if (!this.isDanceWorld(this.lastLocation.location)) return;
                                        d = "Beep"
                                    } else if ("ReloadAvatarNetworkedRPC" === a.EventType) d = "AvatarReset";
                                    else if ("SpawnEmojiRPC" === a.EventType) d = `SpawnEmoji ${this.photonEmojis[a.Data]}`;
                                    else {
                                        var l = "";
                                        a.Data && (l = ` ${JSON.stringify(a.Data).replace(/"([^(")"]+)":/g,"$1:")}`);
                                        d = `${a.EventType}${l}`
                                    }
                                    this.addEntryPhotonEvent({
                                        photonId: h,
                                        text: d,
                                        type: "Event",
                                        created_at: t
                                    })
                                } else {
                                    var c = "";
                                    if (a.EventType && (c = ` ${JSON.stringify(a.EventType).replace(/"([^(")"]+)":/g,"$1:")}`), this.debugPhotonLogging) {
                                        var u = `RPC ${p=this.getDisplayNameFromPhotonId(h)} ${this.photonEventType[a.Type]}${c}`;
                                        console.log("VrcRpc:", u)
                                    }
                                }
                            } else {
                                var p, m = `${a.Data[0]}:${a.Data[1]}`;
                                if (this.lastPortalId && (this.lastPortalList.set(this.lastPortalId, Date.parse(t)), this.lastPortalId = ""), p = this.getDisplayNameFromPhotonId(h)) {
                                    var g = {
                                        id: this.getUserIdFromPhotonId(h),
                                        displayName: p
                                    };
                                    this.parsePhotonPortalSpawn(t, m, g)
                                }
                            } else this.lastPortalId = a.Data[3]
                        }))
                    }
                }, e.methods.parsePhotonPortalSpawn = async function(e, t, a) {
                    var i = y.parseLocation(t),
                        s = await y.getCachedWorld({
                            worldId: i.worldId
                        });
                    this.portalDownloadWorldCache(s.ref, a), this.addPhotonEventToGameLog({
                        created_at: e,
                        type: "PortalSpawn",
                        displayName: a.displayName,
                        location: this.lastLocation.location,
                        userId: a.id,
                        instanceId: t,
                        worldName: s.ref.name
                    })
                }, e.methods.addPhotonEventToGameLog = function(e) {
                    this.queueGameLogNoty(e), this.addGameLog(e), "PortalSpawn" === e.type ? L.addGamelogPortalSpawnToDatabase(e) : "Event" === e.type && L.addGamelogEventToDatabase(e)
                }, e.methods.parsePhotonLobbyIds = function(e) {
                    for (var t of (e.forEach((e => {
                            this.photonLobby.has(e) || this.photonLobby.set(e), this.photonLobbyCurrent.has(e) || this.photonLobbyCurrent.set(e)
                        })), this.photonLobbyCurrent.keys())) e.includes(t) || this.photonLobbyCurrent.delete(t)
                }, e.methods.setPhotonLobbyMaster = function(e, t) {
                    this.photonLobbyMaster !== e && (0 !== this.photonLobbyMaster && this.addEntryPhotonEvent({
                        photonId: e,
                        text: "Photon Master Migrate",
                        type: "PhotonMasterMigrate",
                        created_at: t
                    }), this.photonLobbyMaster = e)
                }, e.methods.checkPhotonBotJoin = function(e, t, a) {
                    var i = "",
                        s = [];
                    if ("object" == typeof this.currentInstanceWorld.unityPackages)
                        for (var r of this.currentInstanceWorld.unityPackages) s.push(r.platform);
                    if (t.avatarEyeHeight < 0) i = "Photon bot has joined, invalid avatarEyeHeight", this.photonLobbyBots.unshift(e);
                    else if ("android" !== t.user.last_platform || t.inVRMode) {
                        if ("android" === t.user.last_platform && !s.includes("android")) i = "User joined as Quest in PC only world"
                    } else var i = "User joined as Quest in desktop mode";
                    if (i) {
                        this.addEntryPhotonEvent({
                            photonId: e,
                            text: i,
                            type: "PhotonBot",
                            color: "yellow",
                            created_at: a
                        });
                        var o = {
                            created_at: (new Date).toJSON(),
                            type: "Event",
                            data: `${i} - ${this.getDisplayNameFromPhotonId(e)} (${this.getUserIdFromPhotonId(e)})`
                        };
                        this.queueGameLogNoty(o), this.addGameLog(o), L.addGamelogEventToDatabase(o)
                    }
                }, e.methods.checkPhotonBotLeave = function(e, t) {
                    var a = "",
                        i = this.photonLobbyJointime.get(e);
                    if (this.photonLobbyBots.includes(e)) a = "Photon bot has left", void 0 !== i && (a = `Photon bot has left ${r(Date.now()-i.joinTime)}`);
                    else if (void 0 !== i && !i.hasInstantiated) {
                        a = `Bot/Player left without instantiating ${r(Date.now()-i.joinTime)}`
                    }
                    a && this.addEntryPhotonEvent({
                        photonId: e,
                        text: a,
                        type: "PhotonBot",
                        color: "yellow",
                        created_at: t
                    })
                }, e.methods.parsePhotonUser = async function(e, t, a) {
                    var i = [];
                    void 0 !== t.tags && (i = t.tags);
                    var s = y.cachedUsers.get(t.id),
                        r = {
                            id: t.id,
                            username: t.username,
                            displayName: t.displayName,
                            developerType: t.developerType,
                            profilePicOverride: t.profilePicOverride,
                            currentAvatarImageUrl: t.currentAvatarImageUrl,
                            currentAvatarThumbnailImageUrl: t.currentAvatarThumbnailImageUrl,
                            userIcon: t.userIcon,
                            last_platform: t.last_platform,
                            allowAvatarCopying: t.allowAvatarCopying,
                            status: t.status,
                            statusDescription: t.statusDescription,
                            bio: t.bio,
                            tags: i
                        };
                    if (this.photonLobby.set(e, r), this.photonLobbyCurrent.set(e, r), this.photonLobbyUserDataUpdate(e, r, a), Date.parse(a) + 6e4 > Date.now()) {
                        if (void 0 === s || void 0 === s.id) s = (await y.getUser({
                            userId: t.id
                        })).ref, r.last_platform !== s.last_platform && this.addEntryPhotonEvent({
                            photonId: e,
                            text: `API/Photon platform mismatch ${s.last_platform}/${r.last_platform}`,
                            type: "PhotonBot",
                            color: "yellow",
                            created_at: Date.parse(a)
                        });
                        else if (!s.isFriend && this.lastLocation.playerList.has(s.displayName)) {
                            var {
                                joinTime: o
                            } = this.lastLocation.playerList.get(s.displayName);
                            o || (o = Date.parse(a)), s.$location_at = o, s.$online_for = o
                        }
                        void 0 !== s.id && s.currentAvatarImageUrl !== t.currentAvatarImageUrl && y.applyUser({
                            ...s,
                            currentAvatarImageUrl: t.currentAvatarImageUrl,
                            currentAvatarThumbnailImageUrl: t.currentAvatarThumbnailImageUrl
                        })
                    }
                    if (void 0 !== s && void 0 !== s.id && (this.photonLobby.set(e, s), this.photonLobbyCurrent.set(e, s), this.moderationEventQueue.has(e))) {
                        var {
                            block: n,
                            mute: d,
                            gameLogDate: a
                        } = this.moderationEventQueue.get(e);
                        this.moderationEventQueue.delete(e), this.photonModerationUpdate(s, e, n, d, a)
                    }
                }, e.methods.photonLobbyUserDataUpdate = function(e, t, a) {
                    var i = this.photonLobbyUserData.get(e);
                    void 0 === i || e === this.photonLobbyCurrentUser || t.status === i.status && t.statusDescription === i.statusDescription || this.addEntryPhotonEvent({
                        photonId: e,
                        type: "ChangeStatus",
                        status: t.status,
                        previousStatus: i.status,
                        statusDescription: t.statusDescription,
                        previousStatusDescription: i.statusDescription,
                        created_at: Date.parse(a)
                    }), this.photonLobbyUserData.set(e, t)
                }, e.methods.photonUserJoin = function(e, t, a) {
                    e !== this.photonLobbyCurrentUser && this.photonEventOverlayJoinLeave && this.addEntryPhotonEvent({
                        photonId: e,
                        text: "has joined",
                        type: "OnPlayerJoined",
                        created_at: a
                    })
                }, e.methods.photonUserLeave = function(e, t) {
                    this.photonEventOverlayJoinLeave && this.addEntryPhotonEvent({
                        photonId: e,
                        text: "has left",
                        type: "OnPlayerLeft",
                        created_at: t
                    })
                }, e.methods.photonModerationUpdate = function(e, t, i, s, r) {
                    L.getModeration(e.id).then((o => {
                        var n = "",
                            d = "";
                        if (i ? (n = "Blocked", d = "Blocked") : s && (n = "Muted", d = "Muted"), o.userId && (!i && o.block ? (n = "Unblocked", d = "Unblocked") : !s && o.mute && (n = "Unmuted", d = "Unmuted"), i === o.block && s === o.mute && (n = "")), d && this.addEntryPhotonEvent({
                                photonId: t,
                                text: `Moderation ${d}`,
                                type: "Moderation",
                                color: "yellow",
                                created_at: r
                            }), n) {
                            var l = {
                                created_at: (new Date).toJSON(),
                                userId: e.id,
                                displayName: e.displayName,
                                type: n
                            };
                            this.queueModerationNoty(l);
                            var c = {
                                created_at: r,
                                userId: e.id,
                                displayName: e.displayName,
                                type: n
                            };
                            this.moderationAgainstTable.forEach((t => {
                                t.userId === e.id && t.type === n && a(this.moderationAgainstTable, t)
                            })), this.moderationAgainstTable.push(c), this.updateSharedFeed(!0)
                        }
                        i || s ? L.setModeration({
                            userId: e.id,
                            updatedAt: r,
                            displayName: e.displayName,
                            block: i,
                            mute: s
                        }) : L.deleteModeration(e.id)
                    }))
                }, e.methods.parsePhotonAvatarChange = function(e, t, a, i) {
                    var s = this.photonLobbyAvatars.get(t.id);
                    s && s !== a.id && e !== this.photonLobbyCurrentUser && this.checkVRChatCache(a).then((s => {
                        var r = !1;
                        s[0] > 0 && (r = !0);
                        var o = {
                            created_at: (new Date).toJSON(),
                            type: "AvatarChange",
                            userId: t.id,
                            displayName: t.displayName,
                            name: a.name,
                            description: a.description,
                            avatarId: a.id,
                            authorId: a.authorId,
                            releaseStatus: a.releaseStatus,
                            imageUrl: a.imageUrl,
                            thumbnailImageUrl: a.thumbnailImageUrl
                        };
                        this.queueGameLogNoty(o), this.addGameLog(o), this.addEntryPhotonEvent({
                            photonId: e,
                            displayName: t.displayName,
                            userId: t.id,
                            text: `ChangeAvatar ${a.name}`,
                            type: "AvatarChange",
                            created_at: i,
                            avatar: a,
                            inCache: r
                        })
                    })), this.photonLobbyAvatars.set(t.id, a.id)
                }, e.methods.parsePhotonAvatar = function(e) {
                    var t = [];
                    void 0 !== e.tags && (t = e.tags), y.applyAvatar({
                        id: e.id,
                        authorId: e.authorId,
                        authorName: e.authorName,
                        updated_at: e.updated_at,
                        description: e.description,
                        featured: e.featured,
                        imageUrl: e.imageUrl,
                        thumbnailImageUrl: e.thumbnailImageUrl,
                        name: e.name,
                        releaseStatus: e.releaseStatus,
                        version: e.version,
                        tags: t
                    })
                }, e.methods.addGameLogVideo = async function(e, t, a) {
                    var i = e.videoUrl,
                        s = "",
                        r = "",
                        o = "",
                        n = "",
                        d = "",
                        l = 8;
                    if (void 0 !== e.displayName && (d = e.displayName), void 0 !== e.videoPos && (l = e.videoPos), !this.isDanceWorld(t) || "YouTube" === e.videoId) {
                        try {
                            var c = new URL(i);
                            "https://t-ne.x0.to" === c.origin && (c = new URL(c.searchParams.get("url")));
                            var u = c.pathname,
                                h = c.searchParams.get("v");
                            if (u && 12 === u.length && (s = u.substring(1, 12)), h && 11 === h.length && (s = h), this.youTubeApi && s) {
                                var p = await this.lookupYouTubeVideo(s);
                                (p || 0 !== p.pageInfo.totalResults) && (r = "YouTube", o = p.items[0].snippet.title, n = this.convertYoutubeTime(p.items[0].contentDetails.duration))
                            }
                        } catch {
                            console.error(`Invalid URL: ${c}`)
                        }
                        var m = {
                            created_at: e.dt,
                            type: "VideoPlay",
                            videoUrl: i,
                            videoId: r,
                            videoName: o,
                            videoLength: n,
                            location: t,
                            displayName: d,
                            userId: a,
                            videoPos: l
                        };
                        this.setNowPlaying(m)
                    }
                }, e.methods.addGameLogPyPyDance = function(e, t) {
                    var a = /VideoPlay\(PyPyDance\) "(.+?)",([\d.]+),([\d.]+),"(.*)"/g.exec(e.data);
                    if (a) {
                        var i = a[1],
                            s = Number(a[2]),
                            r = Number(a[3]),
                            o = a[4].split("("),
                            n = o.pop().slice(0, -1),
                            d = o.join("(");
                        if ("URL " === d) var l = "YouTube";
                        else {
                            l = d.substr(0, d.indexOf(":") - 1);
                            d = d.substr(d.indexOf(":") + 2)
                        }
                        var c = d.slice(0, -1);
                        if ("Random" === n && (n = ""), i !== this.nowPlaying.url) {
                            var u = "";
                            if (n)
                                for (var h of y.cachedUsers.values())
                                    if (h.displayName === n) {
                                        u = h.id;
                                        break
                                    } if ("YouTube" === l) {
                                p = {
                                    dt: e.dt,
                                    videoUrl: i,
                                    displayName: n,
                                    videoPos: s,
                                    videoId: l
                                };
                                this.addGameLogVideo(p, t, u)
                            } else {
                                p = {
                                    created_at: e.dt,
                                    type: "VideoPlay",
                                    videoUrl: i,
                                    videoId: l,
                                    videoName: c,
                                    videoLength: r,
                                    location: t,
                                    displayName: n,
                                    userId: u,
                                    videoPos: s
                                };
                                this.setNowPlaying(p)
                            }
                        } else {
                            var p = {
                                created_at: e.dt,
                                videoUrl: i,
                                videoLength: r,
                                videoPos: s
                            };
                            this.setNowPlaying(p)
                        }
                    } else console.error("failed to parse", e.data)
                }, e.methods.addGameLogVRDancing = function(e, t) {
                    var a = /VideoPlay\(VRDancing\) "(.+?)",([\d.]+),([\d.]+),(-?[\d.]+),"(.+?)","(.+?)"/g.exec(e.data);
                    if (a) {
                        var i = a[1],
                            s = Number(a[2]),
                            r = Number(a[3]),
                            o = Number(a[4]),
                            n = a[5],
                            d = a[6];
                        if (-1 === o && (o = "YouTube"), i !== this.nowPlaying.url) {
                            var l = "";
                            if (n)
                                for (var c of y.cachedUsers.values())
                                    if (c.displayName === n) {
                                        l = c.id;
                                        break
                                    } if ("YouTube" === o) {
                                u = {
                                    dt: e.dt,
                                    videoUrl: i,
                                    displayName: n,
                                    videoPos: s,
                                    videoId: o
                                };
                                this.addGameLogVideo(u, t, l)
                            } else {
                                u = {
                                    created_at: e.dt,
                                    type: "VideoPlay",
                                    videoUrl: i,
                                    videoId: o,
                                    videoName: d,
                                    videoLength: r,
                                    location: t,
                                    displayName: n,
                                    userId: l,
                                    videoPos: s
                                };
                                this.setNowPlaying(u)
                            }
                        } else {
                            var u = {
                                created_at: e.dt,
                                videoUrl: i,
                                videoLength: r,
                                videoPos: s
                            };
                            this.setNowPlaying(u)
                        }
                    } else console.error("failed to parse", e.data)
                }, e.methods.addGameLogZuwaZuwaDance = function(e, t) {
                    var a = /VideoPlay\(ZuwaZuwaDance\) "(.+?)",([\d.]+),([\d.]+),(-?[\d.]+),"(.+?)","(.+?)"/g.exec(e.data);
                    if (a) {
                        var i = a[1],
                            s = Number(a[2]),
                            r = Number(a[3]),
                            o = Number(a[4]),
                            n = a[5],
                            d = a[6];
                        if (0 === o && (o = "YouTube"), i !== this.nowPlaying.url) {
                            var l = "";
                            if (n)
                                for (var c of y.cachedUsers.values())
                                    if (c.displayName === n) {
                                        l = c.id;
                                        break
                                    } if ("YouTube" === o) {
                                u = {
                                    dt: e.dt,
                                    videoUrl: i,
                                    displayName: n,
                                    videoPos: s,
                                    videoId: o
                                };
                                this.addGameLogVideo(u, t, l)
                            } else {
                                u = {
                                    created_at: e.dt,
                                    type: "VideoPlay",
                                    videoUrl: i,
                                    videoId: o,
                                    videoName: d,
                                    videoLength: r,
                                    location: t,
                                    displayName: n,
                                    userId: l,
                                    videoPos: s
                                };
                                this.setNowPlaying(u)
                            }
                        } else {
                            var u = {
                                created_at: e.dt,
                                videoUrl: i,
                                videoLength: r,
                                videoPos: s
                            };
                            this.setNowPlaying(u)
                        }
                    } else console.error("failed to parse", e.data)
                }, e.methods.lookupYouTubeVideo = async function(e) {
                    var t = null,
                        a = "AIzaSyA-iUQCpWf5afEL3NanEOSxbzziPMU3bxY";
                    this.youTubeApiKey && (a = this.youTubeApiKey);
                    try {
                        var i = await C.execute({
                                url: `https://www.googleapis.com/youtube/v3/videos?id=${encodeURIComponent(e)}&part=snippet,contentDetails&key=${a}`,
                                method: "GET",
                                headers: {
                                    "User-Agent": m,
                                    Referer: "https://vrcx.pypy.moe"
                                }
                            }),
                            s = JSON.parse(i.data);
                        if (this.debugWebRequests && console.log(s, i), 200 !== i.status) throw new Error(`Error: ${i.data}`);
                        t = s
                    } catch {
                        console.error(`YouTube video lookup failed for ${e}`)
                    }
                    return t
                }, e.data.nowPlaying = {
                    url: "",
                    name: "",
                    length: 0,
                    startTime: 0,
                    offset: 0,
                    elapsed: 0,
                    percentage: 0,
                    remainingText: "",
                    playing: !1
                }, e.methods.clearNowPlaying = function() {
                    this.nowPlaying = {
                        url: "",
                        name: "",
                        length: 0,
                        startTime: 0,
                        offset: 0,
                        elapsed: 0,
                        percentage: 0,
                        remainingText: "",
                        playing: !1
                    }, this.updateVrNowPlaying()
                }, e.methods.setNowPlaying = function(e) {
                    if (this.nowPlaying.url !== e.videoUrl) {
                        this.queueGameLogNoty(e), this.addGameLog(e), L.addGamelogVideoPlayToDatabase(e);
                        var t = "";
                        e.displayName && (t = ` (${e.displayName})`);
                        var a = `${e.videoName}${t}`;
                        this.nowPlaying = {
                            url: e.videoUrl,
                            name: a,
                            length: e.videoLength,
                            startTime: Date.parse(e.created_at) / 1e3,
                            offset: e.videoPos,
                            elapsed: 0,
                            percentage: 0,
                            remainingText: ""
                        }
                    } else this.nowPlaying = {
                        ...this.nowPlaying,
                        length: e.videoLength,
                        startTime: Date.parse(e.created_at) / 1e3,
                        offset: e.videoPos,
                        elapsed: 0,
                        percentage: 0,
                        remainingText: ""
                    };
                    this.updateVrNowPlaying(), !this.nowPlaying.playing && e.videoLength > 0 && (this.nowPlaying.playing = !0, this.updateNowPlaying())
                }, e.methods.updateNowPlaying = function() {
                    var e = this.nowPlaying;
                    if (this.nowPlaying.playing) {
                        var t = Date.now() / 1e3;
                        e.elapsed = Math.round(10 * (t - e.startTime + e.offset)) / 10, e.elapsed >= e.length ? this.clearNowPlaying() : (e.remainingText = this.formatSeconds(e.length - e.elapsed), e.percentage = Math.round(100 * e.elapsed / e.length * 10) / 10, this.updateVrNowPlaying(), p.iK((() => this.updateNowPlaying()), 1e3))
                    } else this.nowPlaying.playing = !1
                }, e.methods.updateVrNowPlaying = function() {
                    var e = JSON.stringify(this.nowPlaying);
                    AppApi.ExecuteVrFeedFunction("nowPlayingUpdate", e), AppApi.ExecuteVrOverlayFunction("nowPlayingUpdate", e)
                }, e.methods.formatSeconds = function(e) {
                    var t = function(e, t) {
                            return `000${e}`.slice(-1 * t)
                        },
                        a = parseFloat(e).toFixed(3),
                        i = Math.floor(a / 60 / 60),
                        s = Math.floor(a / 60) % 60,
                        r = Math.floor(a - 60 * s),
                        o = "";
                    return i > "0" && (o = `${t(i,2)}:`), `${o+t(s,2)}:${t(r,2)}`
                }, e.methods.convertYoutubeTime = function(e) {
                    var t = e.match(/\d+/g);
                    e.indexOf("M") >= 0 && -1 === e.indexOf("H") && -1 === e.indexOf("S") && (t = [0, t[0], 0]), e.indexOf("H") >= 0 && -1 === e.indexOf("M") && (t = [t[0], 0, t[1]]), e.indexOf("H") >= 0 && -1 === e.indexOf("M") && -1 === e.indexOf("S") && (t = [t[0], 0, 0]);
                    var a = 0;
                    return 3 === t.length && (a += 3600 * parseInt(t[0], 10), a += 60 * parseInt(t[1], 10), a += parseInt(t[2], 10)), 2 === t.length && (a += 60 * parseInt(t[0], 10), a += parseInt(t[1], 10)), 1 === t.length && (a += parseInt(t[0], 10)), a
                }, e.methods.updateDiscord = function() {
                    if (this.discordActive && this.isGameRunning && (this.lastLocation.location || this.lastLocation$.tag)) {
                        var e = this.lastLocation$;
                        if (this.lastLocation.location !== this.lastLocation$.tag) {
                            if (this.lastLocation.location && Discord.SetActive(!0), Discord.SetTimestamps(this.lastLocation.date, 0), (e = y.parseLocation(this.lastLocation.location)).worldName = "", e.worldCapacity = 0, e.joinUrl = "", e.accessName = "", e.worldId) {
                                var t = y.cachedWorlds.get(e.worldId);
                                if (t ? (e.worldName = t.name, e.worldCapacity = 2 * t.capacity) : y.getWorld({
                                        worldId: e.worldId
                                    }).then((t => (e.worldName = t.ref.name, e.worldCapacity = 2 * t.ref.capacity, t))), this.isGameNoVR) var a = "Desktop";
                                else a = "VR";
                                switch (e.accessType) {
                                    case "public":
                                        e.joinUrl = g(e.worldId, e.instanceId), e.accessName = `Public #${e.instanceName} (${a})`;
                                        break;
                                    case "invite+":
                                        e.accessName = `Invite+ #${e.instanceName} (${a})`;
                                        break;
                                    case "invite":
                                        e.accessName = `Invite #${e.instanceName} (${a})`;
                                        break;
                                    case "friends":
                                        e.accessName = `Friends #${e.instanceName} (${a})`;
                                        break;
                                    case "friends+":
                                        e.accessName = `Friends+ #${e.instanceName} (${a})`
                                }
                            }
                            this.lastLocation$ = e
                        }
                        var i = !1;
                        switch (!this.discordHideInvite || "invite" !== e.accessType && "invite+" !== e.accessType || (i = !0), y.currentUser.status) {
                            case "active":
                                e.statusName = "Online", e.statusImage = "active";
                                break;
                            case "join me":
                                e.statusName = "Join Me", e.statusImage = "joinme";
                                break;
                            case "ask me":
                                e.statusName = "Ask Me", e.statusImage = "askme", i = !0;
                                break;
                            case "busy":
                                e.statusName = "Do Not Disturb", e.statusImage = "busy", i = !0
                        }
                        var s = "883308884863901717",
                            r = "vrchat",
                            o = `${e.worldId}:${e.instanceName}`,
                            n = this.lastLocation.playerList.size,
                            d = e.worldCapacity,
                            l = "Join",
                            c = e.joinUrl;
                        this.discordJoinButton || (l = "", c = ""), this.discordInstance || (n = 0, d = 0), i && (o = "", n = 0, d = 0, l = "", c = ""), !i && this.isDanceWorld(e.tag) && ("wrld_f20326da-f1ac-45fc-a062-609723b097b1" === e.worldId ? (s = "784094509008551956", r = "pypy") : "wrld_42377cf1-c54f-45ed-8996-5875b0573a83" === e.worldId || "wrld_dd6d2888-dbdc-47c2-bc98-3d631b2acd7c" === e.worldId ? (s = "846232616054030376", r = "vr_dancing") : "wrld_52bdcdab-11cd-4325-9655-0fb120846945" === e.worldId && (s = "939473404808007731", r = "zuwa_zuwa_dance"), this.nowPlaying.name && (e.worldName = this.nowPlaying.name), this.nowPlaying.playing && Discord.SetTimestamps(Date.now(), 1e3 * (this.nowPlaying.startTime - this.nowPlaying.offset + this.nowPlaying.length))), Discord.SetAssets(r, "Powered by VRCX", e.statusImage, e.statusName, o, n, d, l, c, s), e.worldName.length < 2 && (e.worldName += "ﾠ".repeat(2 - e.worldName.length)), i ? (Discord.SetText("Private", ""), Discord.SetTimestamps(0, 0)) : this.discordInstance ? Discord.SetText(e.worldName, e.accessName) : Discord.SetText(e.worldName, "")
                    }
                }, e.methods.lookupUser = async function(e) {
                    if (e.userId) this.showUserDialog(e.userId);
                    else if (e.displayName && "ID:" !== e.displayName.substring(0, 3)) {
                        for (var t of y.cachedUsers.values())
                            if (t.displayName === e.displayName) return void this.showUserDialog(t.id);
                        try {
                            var a = encodeURIComponent(e.displayName.toLowerCase()),
                                i = await y.getUserByUsername({
                                    username: a
                                });
                            if (i.ref.displayName === e.displayName) return void this.showUserDialog(i.ref.id)
                        } catch (e) {}
                        for (var t of (this.searchText = e.displayName, await this.searchUser(), this.searchUserResults))
                            if (t.displayName === e.displayName) return this.searchText = "", this.clearSearch(), void this.showUserDialog(t.id);
                        this.$refs.searchTab.currentName = "0", this.$refs.menu.activeIndex = "search"
                    }
                }, e.data.searchText = "", e.data.searchUserResults = [], e.data.searchUserParams = {}, e.data.searchWorldResults = [], e.data.searchWorldOption = "", e.data.searchWorldParams = {}, e.data.searchAvatarResults = [], e.data.searchAvatarPage = [], e.data.searchAvatarPageNum = 0, e.data.searchAvatarFilter = "", e.data.searchAvatarSort = "", e.data.searchAvatarFilterRemote = "", e.data.isSearchUserLoading = !1, e.data.isSearchWorldLoading = !1, e.data.isSearchAvatarLoading = !1, y.$on("LOGIN", (function() {
                    e.searchText = "", e.searchUserResults = [], e.searchUserParams = {}, e.searchWorldResults = [], e.searchWorldOption = "", e.searchWorldParams = {}, e.searchAvatarResults = [], e.searchAvatarPage = [], e.searchAvatarPageNum = 0, e.searchAvatarFilter = "", e.searchAvatarSort = "", e.searchAvatarFilterRemote = "", e.isSearchUserLoading = !1, e.isSearchWorldLoading = !1, e.isSearchAvatarLoading = !1
                })), e.methods.clearSearch = function() {
                    this.searchText = "", this.searchUserParams = {}, this.searchWorldParams = {}, this.searchUserResults = [], this.searchWorldResults = [], this.searchAvatarResults = [], this.searchAvatarPage = [], this.searchAvatarPageNum = 0
                }, e.methods.search = function() {
                    switch (this.$refs.searchTab.currentName) {
                        case "0":
                            this.searchUser();
                            break;
                        case "1":
                            this.searchWorld({});
                            break;
                        case "2":
                            this.searchAvatar()
                    }
                }, e.methods.searchUser = async function() {
                    this.searchUserParams = {
                        n: 10,
                        offset: 0,
                        search: this.searchText
                    }, await this.moreSearchUser()
                }, e.methods.moreSearchUser = async function(e) {
                    var t = this.searchUserParams;
                    e && (t.offset += t.n * e, t.offset < 0 && (t.offset = 0)), this.isSearchUserLoading = !0, await y.getUsers(t).finally((() => {
                        this.isSearchUserLoading = !1
                    })).then((e => {
                        var t = new Map;
                        for (var a of e.json) {
                            var i = y.cachedUsers.get(a.id);
                            void 0 !== i && t.set(i.id, i)
                        }
                        return this.searchUserResults = Array.from(t.values()), e
                    }))
                }, e.data.searchWorldLabs = !1, e.methods.searchWorld = function(e) {
                    this.searchWorldOption = "";
                    var t = {
                        n: 10,
                        offset: 0
                    };
                    switch (e.sortHeading) {
                        case "featured":
                            t.sort = "order", t.featured = "true";
                            break;
                        case "trending":
                            t.sort = "popularity", t.featured = "false";
                            break;
                        case "updated":
                            t.sort = "updated";
                            break;
                        case "created":
                            t.sort = "created";
                            break;
                        case "publication":
                            t.sort = "publicationDate";
                            break;
                        case "shuffle":
                            t.sort = "shuffle";
                            break;
                        case "active":
                            this.searchWorldOption = "active";
                            break;
                        case "recent":
                            this.searchWorldOption = "recent";
                            break;
                        case "favorite":
                            this.searchWorldOption = "favorites";
                            break;
                        case "labs":
                            t.sort = "labsPublicationDate";
                            break;
                        case "heat":
                            t.sort = "heat", t.featured = "false";
                            break;
                        default:
                            t.sort = "relevance", t.search = this.searchText
                    }
                    t.order = e.sortOrder || "descending", "mine" === e.sortOwnership && (t.user = "me", t.releaseStatus = "all"), e.tag && (t.tag = e.tag), this.searchWorldLabs || (t.tag ? t.tag += ",system_approved" : t.tag = "system_approved"), this.searchWorldParams = t, this.moreSearchWorld()
                }, e.methods.moreSearchWorld = function(e) {
                    var t = this.searchWorldParams;
                    e && (t.offset += t.n * e, t.offset < 0 && (t.offset = 0)), this.isSearchWorldLoading = !0, y.getWorlds(t, this.searchWorldOption).finally((() => {
                        this.isSearchWorldLoading = !1
                    })).then((e => {
                        var t = new Map;
                        for (var a of e.json) {
                            var i = y.cachedWorlds.get(a.id);
                            void 0 !== i && t.set(i.id, i)
                        }
                        return this.searchWorldResults = Array.from(t.values()), e
                    }))
                }, e.methods.searchAvatar = async function() {
                    this.isSearchAvatarLoading = !0, this.searchAvatarFilter || (this.searchAvatarFilter = "all"), this.searchAvatarSort || (this.searchAvatarSort = "name"), this.searchAvatarFilterRemote || (this.searchAvatarFilterRemote = "all");
                    var e = new Map,
                        t = this.searchText.toUpperCase();
                    if (t) {
                        if ("all" === this.searchAvatarFilterRemote || "local" === this.searchAvatarFilterRemote)
                            for (var a of y.cachedAvatars.values()) {
                                var i = a.name.toUpperCase().includes(t);
                                if (!i && a.description && (i = a.description.toUpperCase().includes(t)), !i && a.authorName && (i = a.authorName.toUpperCase().includes(t)), i) switch (this.searchAvatarFilter) {
                                    case "all":
                                        e.set(a.id, a);
                                        break;
                                    case "public":
                                        "public" === a.releaseStatus && e.set(a.id, a);
                                        break;
                                    case "private":
                                        "private" === a.releaseStatus && e.set(a.id, a)
                                }
                            }
                        if (("all" === this.searchAvatarFilterRemote || "remote" === this.searchAvatarFilterRemote) && this.avatarRemoteDatabase && t.length >= 3) {
                            var s = await this.lookupAvatars("search", t);
                            s && "object" == typeof s && s.forEach((t => {
                                e.set(t.id, t)
                            }))
                        }
                        this.isSearchAvatarLoading = !1
                    } else {
                        for (var a of y.cachedAvatars.values())
                            if (a.authorId === y.currentUser.id) switch (this.searchAvatarFilter) {
                                case "all":
                                    e.set(a.id, a);
                                    break;
                                case "public":
                                    "public" === a.releaseStatus && e.set(a.id, a);
                                    break;
                                case "private":
                                    "private" === a.releaseStatus && e.set(a.id, a)
                            }
                        this.isSearchAvatarLoading = !1
                    }
                    var r = Array.from(e.values());
                    switch (this.searchAvatarSort) {
                        case "updated":
                            r.sort($);
                            break;
                        case "created":
                            r.sort(_);
                            break;
                        case "name":
                            r.sort(F)
                    }
                    this.searchAvatarPageNum = 0, this.searchAvatarResults = r, this.searchAvatarPage = r.slice(0, 10)
                }, e.methods.moreSearchAvatar = function(e) {
                    if (-1 === e) {
                        this.searchAvatarPageNum--;
                        var t = 10 * this.searchAvatarPageNum
                    }
                    if (1 === e) {
                        this.searchAvatarPageNum++;
                        t = 10 * this.searchAvatarPageNum
                    }
                    this.searchAvatarPage = this.searchAvatarResults.slice(t, t + 10)
                }, e.data.favoriteObjects = new Map, e.data.favoriteFriends_ = [], e.data.favoriteWorlds_ = [], e.data.favoriteAvatars_ = [], e.data.sortFavoriteFriends = !1, e.data.sortFavoriteWorlds = !1, e.data.sortFavoriteAvatars = !1, y.$on("LOGIN", (function() {
                    e.favoriteObjects.clear(), e.favoriteFriends_ = [], e.favoriteWorlds_ = [], e.favoriteAvatars_ = [], e.sortFavoriteFriends = !1, e.sortFavoriteWorlds = !1, e.sortFavoriteAvatars = !1
                })), y.$on("FAVORITE", (function(t) {
                    e.applyFavorite(t.ref.type, t.ref.favoriteId)
                })), y.$on("FAVORITE:@DELETE", (function(t) {
                    e.applyFavorite(t.ref.type, t.ref.favoriteId)
                })), y.$on("USER", (function(t) {
                    e.applyFavorite("friend", t.ref.id)
                })), y.$on("WORLD", (function(t) {
                    e.applyFavorite("world", t.ref.id)
                })), y.$on("AVATAR", (function(t) {
                    e.applyFavorite("avatar", t.ref.id)
                })), e.methods.applyFavorite = function(e, t) {
                    var i = y.cachedFavoritesByObjectId.get(t),
                        s = this.favoriteObjects.get(t);
                    if (void 0 !== i) {
                        var r = !1;
                        if (void 0 === s) {
                            if (s = {
                                    id: t,
                                    type: e,
                                    groupKey: i.$groupKey,
                                    ref: null,
                                    name: ""
                                }, this.favoriteObjects.set(t, s), "friend" === e) void 0 === (o = y.cachedUsers.get(t)) ? void 0 !== (o = this.friendLog.get(t)) && o.displayName && (s.name = o.displayName) : (s.ref = o, s.name = o.displayName);
                            else if ("world" === e) {
                                void 0 !== (o = y.cachedWorlds.get(t)) && (s.ref = o, s.name = o.name)
                            } else if ("avatar" === e) {
                                void 0 !== (o = y.cachedAvatars.get(t)) && (s.ref = o, s.name = o.name)
                            }
                            r = !0
                        } else {
                            if (s.type !== e && (r = !0, "friend" === e ? a(this.favoriteFriends_, s) : "world" === e ? a(this.favoriteWorlds_, s) : "avatar" === e && a(this.favoriteAvatars_, s)), "friend" === e) void 0 !== (o = y.cachedUsers.get(t)) && (s.ref !== o && (s.ref = o), s.name !== o.displayName && (s.name = o.displayName, this.sortFavoriteFriends = !0));
                            else if ("world" === e) {
                                void 0 !== (o = y.cachedWorlds.get(t)) && (s.ref !== o && (s.ref = o), s.name !== o.name && (s.name = o.name, this.sortFavoriteWorlds = !0))
                            } else if ("avatar" === e) {
                                var o;
                                void 0 !== (o = y.cachedAvatars.get(t)) && (s.ref !== o && (s.ref = o), s.name !== o.name && (s.name = o.name, this.sortFavoriteAvatars = !0))
                            }
                        }
                        r && ("friend" === e ? (this.favoriteFriends_.push(s), this.sortFavoriteFriends = !0) : "world" === e ? (this.favoriteWorlds_.push(s), this.sortFavoriteWorlds = !0) : "avatar" === e && (this.favoriteAvatars_.push(s), this.sortFavoriteAvatars = !0))
                    } else void 0 !== s && (this.favoriteObjects.delete(t), "friend" === e ? a(this.favoriteFriends_, s) : "world" === e ? a(this.favoriteWorlds_, s) : "avatar" === e && a(this.favoriteAvatars_, s))
                }, e.methods.deleteFavorite = function(e) {
                    this.$confirm("즐겨찾기를 삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && y.deleteFavorite({
                                objectId: e
                            })
                        }
                    })
                }, e.methods.changeFavoriteGroupName = function(e) {
                    this.$prompt("새 이름을 입력해주세요.", "그룹 이름 변경", {
                        distinguishCancelAndClose: !0,
                        cancelButtonText: "취소",
                        confirmButtonText: "변경",
                        inputPlaceholder: "이름",
                        inputValue: e.displayName,
                        inputPattern: /\S+/,
                        inputErrorMessage: "이름을 입력해주세요.",
                        callback: (t, a) => {
                            "confirm" === t && y.saveFavoriteGroup({
                                type: e.type,
                                group: e.name,
                                displayName: a.inputValue
                            }).then((e => (this.$message({
                                message: "이름이 변경되었습니다.",
                                type: "success"
                            }), e)))
                        }
                    })
                }, e.methods.clearFavoriteGroup = function(e) {
                    this.$confirm("그룹을 삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && y.clearFavoriteGroup({
                                type: e.type,
                                group: e.name
                            })
                        }
                    })
                }, e.computed.favoriteFriends = function() {
                    return this.sortFavoriteFriends && (this.sortFavoriteFriends = !1, this.favoriteFriends_.sort(F)), this.favoriteFriends_
                }, e.computed.favoriteWorlds = function() {
                    return this.sortFavoriteWorlds && (this.sortFavoriteWorlds = !1, this.favoriteWorlds_.sort(F)), this.favoriteWorlds_
                }, e.computed.favoriteAvatars = function() {
                    return this.sortFavoriteAvatars && (this.sortFavoriteAvatars = !1, this.favoriteAvatars_.sort(F)), this.favoriteAvatars_
                }, e.data.friendLog = new Map, e.data.friendLogTable = {
                    data: [],
                    filters: [{
                        prop: "type",
                        value: [],
                        filterFn: (e, t) => t.value.some((t => t === e.type))
                    }, {
                        prop: "displayName",
                        value: ""
                    }],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "created_at",
                            order: "descending"
                        }
                    },
                    pageSize: e.data.tablePageSize,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [10, 15, 25, 50, 100]
                    }
                }, y.$on("USER:CURRENT", (function(t) {
                    e.updateFriendships(t.ref)
                })), y.$on("USER", (function(t) {
                    e.updateFriendship(t.ref)
                })), y.$on("FRIEND:ADD", (function(t) {
                    e.addFriendship(t.params.userId)
                })), y.$on("FRIEND:DELETE", (function(t) {
                    e.deleteFriendship(t.params.userId)
                })), y.$on("FRIEND:REQUEST", (function(t) {
                    var a = this.cachedUsers.get(t.params.userId);
                    if (void 0 !== a) {
                        var i = {
                            created_at: (new Date).toJSON(),
                            type: "FriendRequest",
                            userId: a.id,
                            displayName: a.displayName
                        };
                        e.friendLogTable.data.push(i), L.addFriendLogHistory(i)
                    }
                })), y.$on("FRIEND:REQUEST:CANCEL", (function(t) {
                    var a = this.cachedUsers.get(t.params.userId);
                    if (void 0 !== a) {
                        var i = {
                            created_at: (new Date).toJSON(),
                            type: "CancelFriendRequst",
                            userId: a.id,
                            displayName: a.displayName
                        };
                        e.friendLogTable.data.push(i), L.addFriendLogHistory(i)
                    }
                })), e.data.friendLogInitStatus = !1, e.methods.initFriendLog = async function(e) {
                    var t = [],
                        a = await y.refreshFriends();
                    for (var i of a) {
                        var s = y.applyUser(i),
                            r = {
                                userId: s.id,
                                displayName: s.displayName,
                                trustLevel: s.$trustLevel
                            };
                        this.friendLog.set(i.id, r), t.unshift(r)
                    }
                    L.setFriendLogCurrentArray(t), w.setBool(`friendLogInit_${e}`, !0), this.friendLogInitStatus = !0
                }, e.methods.migrateFriendLog = function(e) {
                    VRCXStorage.Remove(`${e}_friendLogUpdatedAt`), VRCXStorage.Remove(`${e}_friendLog`), this.friendLogTable.data = VRCXStorage.GetArray(`${e}_friendLogTable`), L.addFriendLogHistoryArray(this.friendLogTable.data), VRCXStorage.Remove(`${e}_friendLogTable`), w.setBool(`friendLogInit_${e}`, !0)
                }, e.methods.getFriendLog = async function() {
                    var e = await L.getFriendLogCurrent();
                    for (var t of e) this.friendLog.set(t.userId, t);
                    this.friendLogTable.data = [], this.friendLogTable.data = await L.getFriendLogHistory(), await y.refreshFriends(), this.friendLogInitStatus = !0
                }, e.methods.addFriendship = function(e) {
                    if (this.friendLogInitStatus && !this.friendLog.has(e)) {
                        var t = y.cachedUsers.get(e);
                        void 0 !== t && y.getFriendStatus({
                            userId: e
                        }).then((a => {
                            if (a.json.isFriend && !this.friendLog.has(e)) {
                                var i = {
                                    created_at: (new Date).toJSON(),
                                    type: "Friend",
                                    userId: e,
                                    displayName: t.displayName
                                };
                                this.friendLogTable.data.push(i), L.addFriendLogHistory(i), this.queueFriendLogNoty(i);
                                var s = {
                                    userId: e,
                                    displayName: t.displayName,
                                    trustLevel: t.$trustLevel
                                };
                                this.friendLog.set(e, s), L.setFriendLogCurrent(s), this.notifyMenu("friendLog"), this.deleteFriendRequest(e), this.updateSharedFeed(!0)
                            }
                        }))
                    }
                }, e.methods.deleteFriendRequest = function(t) {
                    for (var a = e.notificationTable.data, i = a.length - 1; i >= 0; i--)
                        if ("friendRequest" === a[i].type && a[i].senderUserId === t) return void a.splice(i, 1)
                }, e.methods.deleteFriendship = function(e) {
                    var t = this.friendLog.get(e);
                    void 0 !== t && y.getFriendStatus({
                        userId: e
                    }).then((a => {
                        if (!a.json.isFriend && this.friendLog.has(e)) {
                            var i = {
                                created_at: (new Date).toJSON(),
                                type: "Unfriend",
                                userId: e,
                                displayName: t.displayName
                            };
                            this.friendLogTable.data.push(i), L.addFriendLogHistory(i), this.queueFriendLogNoty(i), this.friendLog.delete(e), L.deleteFriendLogCurrent(e), this.notifyMenu("friendLog"), this.updateSharedFeed(!0)
                        }
                    }))
                }, e.methods.updateFriendships = function(e) {
                    var t = new Set;
                    for (var a of e.friends) t.add(a), this.addFriendship(a);
                    for (var a of this.friendLog.keys()) a === y.currentUser.id ? (this.friendLog.delete(a), L.deleteFriendLogCurrent(a)) : t.has(a) || this.deleteFriendship(a)
                }, e.methods.updateFriendship = function(e) {
                    var t = this.friendLog.get(e.id);
                    if (this.friendLogInitStatus && void 0 !== t) {
                        if (t.displayName !== e.displayName) {
                            if (t.displayName) {
                                var a = {
                                    created_at: (new Date).toJSON(),
                                    type: "DisplayName",
                                    userId: e.id,
                                    displayName: e.displayName,
                                    previousDisplayName: t.displayName
                                };
                                this.friendLogTable.data.push(a), L.addFriendLogHistory(a), this.queueFriendLogNoty(a);
                                var i = {
                                    userId: e.id,
                                    displayName: e.displayName,
                                    trustLevel: e.$trustLevel
                                };
                                this.friendLog.set(e.id, i), L.setFriendLogCurrent(i), t.displayName = e.displayName, this.notifyMenu("friendLog"), this.updateSharedFeed(!0)
                            }
                            y.getFriendStatus({
                                userId: e.id
                            }).then((a => {
                                if (a.json.isFriend && this.friendLog.has(e.id) && !t.displayName) {
                                    var i = {
                                        created_at: (new Date).toJSON(),
                                        type: "Friend",
                                        userId: e.id,
                                        displayName: e.displayName
                                    };
                                    this.friendLogTable.data.push(i), L.addFriendLogHistory(i), this.queueFriendLogNoty(i);
                                    var s = {
                                        userId: e.id,
                                        displayName: e.displayName,
                                        trustLevel: e.$trustLevel
                                    };
                                    this.friendLog.set(e.id, s), L.setFriendLogCurrent(s), t.displayName = e.displayName, this.notifyMenu("friendLog"), this.updateSharedFeed(!0)
                                }
                            }))
                        }
                        if (e.$trustLevel && t.trustLevel && t.trustLevel !== e.$trustLevel) {
                            var s = {
                                created_at: (new Date).toJSON(),
                                type: "TrustLevel",
                                userId: e.id,
                                displayName: e.displayName,
                                trustLevel: e.$trustLevel,
                                previousTrustLevel: t.trustLevel
                            };
                            this.friendLogTable.data.push(s), L.addFriendLogHistory(s), this.queueFriendLogNoty(s);
                            var r = {
                                userId: e.id,
                                displayName: e.displayName,
                                trustLevel: e.$trustLevel
                            };
                            this.friendLog.set(e.id, r), L.setFriendLogCurrent(r), this.notifyMenu("friendLog"), this.updateSharedFeed(!0)
                        }
                        t.trustLevel = e.$trustLevel
                    }
                }, e.methods.deleteFriendLog = function(e) {
                    this.$confirm("로그를 삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && a(this.friendLogTable.data, e) && L.deleteFriendLogHistory(e.rowId)
                        }
                    })
                }, e.data.playerModerationTable = {
                    data: [],
                    lastRunLength: 0,
                    filters: [{
                        prop: "type",
                        value: [],
                        filterFn: (e, t) => t.value.some((t => t === e.type))
                    }, {
                        prop: ["sourceDisplayName", "targetDisplayName"],
                        value: ""
                    }],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "created",
                            order: "descending"
                        }
                    },
                    pageSize: e.data.tablePageSize,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [10, 15, 25, 50, 100]
                    }
                }, y.$on("LOGIN", (function() {
                    e.playerModerationTable.data = []
                })), y.$on("PLAYER-MODERATION", (function(t) {
                    for (var {
                            ref: a
                        } = t, i = e.playerModerationTable.data, {
                            length: s
                        } = i, r = 0; r < s; ++r)
                        if (i[r].id === a.id) return void(a.$isDeleted ? i.splice(r, 1) : o().set(i, r, a));
                    !1 === a.$isDeleted && e.playerModerationTable.data.push(a)
                })), y.$on("PLAYER-MODERATION:@DELETE", (function(t) {
                    for (var {
                            ref: a
                        } = t, i = e.playerModerationTable.data, {
                            length: s
                        } = i, r = 0; r < s; ++r)
                        if (i[r].id === a.id) return void i.splice(r, 1)
                })), e.methods.deletePlayerModeration = function(e) {
                    this.$confirm("차단 로그를 삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && y.deletePlayerModeration({
                                moderated: e.targetUserId,
                                type: e.type
                            })
                        }
                    })
                }, e.data.notificationTable = {
                    data: [],
                    filters: [{
                        prop: "type",
                        value: [],
                        filterFn: (e, t) => t.value.some((t => t === e.type))
                    }, {
                        prop: "senderUsername",
                        value: ""
                    }],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "created_at",
                            order: "descending"
                        }
                    },
                    pageSize: e.data.tablePageSize,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [10, 15, 25, 50, 100]
                    }
                }, y.$on("LOGIN", (function() {
                    e.notificationTable.data = []
                })), e.data.unseenNotifications = [], y.$on("NOTIFICATION", (function(t) {
                    for (var {
                            ref: a
                        } = t, i = e.notificationTable.data, {
                            length: s
                        } = i, r = 0; r < s; ++r)
                        if (i[r].id === a.id) return void o().set(i, r, a);
                    a.senderUserId !== this.currentUser.id && ("friendRequest" !== a.type && "hiddenFriendRequest" !== a.type && L.addNotificationToDatabase(a), e.notifyMenu("notification"), e.unseenNotifications.push(a.id), e.queueNotificationNoty(a)), e.notificationTable.data.push(a), e.updateSharedFeed(!0)
                })), y.$on("NOTIFICATION:SEE", (function(t) {
                    var {
                        notificationId: i
                    } = t.params;
                    a(e.unseenNotifications, i), 0 === e.unseenNotifications.length && e.selectMenu("notification")
                })), e.methods.acceptNotification = function(e) {
                    this.$confirm("친구 요청을 수락합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && y.acceptNotification({
                                notificationId: e.id
                            })
                        }
                    })
                }, e.methods.hideNotification = function(e) {
                    this.$confirm(`${e.type}을(를) 거절합니다. 계속 하시겠습니까?`, "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && ("hiddenFriendRequest" === e.type ? y.deleteHiddenFriendRequest({
                                notificationId: e.id
                            }, e.senderUserId) : y.hideNotification({
                                notificationId: e.id
                            }))
                        }
                    })
                }, e.methods.deleteNotificationLog = function(e) {
                    this.$confirm(`${e.type}을(를) 삭제합니다. 계속 하시겠습니까?`, "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && (a(this.notificationTable.data, e), "friendRequest" !== e.type && "hiddenFriendRequest" !== e.type && L.deleteNotification(e.id))
                        }
                    })
                }, e.methods.acceptRequestInvite = function(e) {
                    this.$confirm("초대를 보냅니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            if ("confirm" === t) {
                                var a = y.parseLocation(this.lastLocation.location);
                                y.getCachedWorld({
                                    worldId: a.worldId
                                }).then((t => {
                                    y.sendInvite({
                                        instanceId: this.lastLocation.location,
                                        worldId: this.lastLocation.location,
                                        worldName: t.ref.name,
                                        rsvp: !0
                                    }, e.senderUserId).then((t => (this.$message("초대를 보냈습니다."), y.hideNotification({
                                        notificationId: e.id
                                    }), t)))
                                }))
                            }
                        }
                    })
                }, e.methods.saveTableFilters = function() {
                    w.setString("VRCX_friendLogTableFilters", JSON.stringify(this.friendLogTable.filters[0].value)), w.setString("VRCX_playerModerationTableFilters", JSON.stringify(this.playerModerationTable.filters[0].value)), w.setString("VRCX_notificationTableFilters", JSON.stringify(this.notificationTable.filters[0].value))
                }, w.getString("VRCX_feedTableFilters") && (e.data.feedTable.filter = JSON.parse(w.getString("VRCX_feedTableFilters")), e.data.feedTable.vip = w.getBool("VRCX_feedTableVIPFilter")), w.getString("VRCX_gameLogTableFilters") && (e.data.gameLogTable.filter = JSON.parse(w.getString("VRCX_gameLogTableFilters"))), w.getString("VRCX_friendLogTableFilters") && (e.data.friendLogTable.filters[0].value = JSON.parse(w.getString("VRCX_friendLogTableFilters"))), w.getString("VRCX_playerModerationTableFilters") && (e.data.playerModerationTable.filters[0].value = JSON.parse(w.getString("VRCX_playerModerationTableFilters"))), w.getString("VRCX_notificationTableFilters") && (e.data.notificationTable.filters[0].value = JSON.parse(w.getString("VRCX_notificationTableFilters"))), e.data.configTreeData = [], e.data.currentUserTreeData = [], e.data.pastDisplayNameTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "updated_at",
                            order: "descending"
                        }
                    },
                    layout: "table"
                }, e.data.VRCPlusIconsTable = [], e.data.galleryTable = [], e.data.inviteMessageTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    layout: "table"
                }, e.data.inviteResponseMessageTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    layout: "table"
                }, e.data.inviteRequestMessageTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    layout: "table"
                }, e.data.inviteRequestResponseMessageTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    layout: "table"
                }, e.data.friendsListTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "$friendNum",
                            order: "descending"
                        }
                    },
                    pageSize: 100,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [50, 100, 250, 500]
                    }
                }, e.data.downloadHistoryTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    pageSize: 10,
                    paginationProps: {
                        small: !0,
                        layout: "prev,pager,next",
                        pageSizes: [10, 25, 50, 100]
                    }
                }, e.data.downloadQueueTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    layout: "table"
                }, e.data.socialStatusHistoryTable = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini"
                    },
                    layout: "table"
                }, e.data.currentInstanceUserList = {
                    data: [],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "photonId",
                            order: "descending"
                        }
                    },
                    layout: "table"
                }, e.data.visits = 0, e.data.openVR = w.getBool("openVR"), e.data.openVRAlways = w.getBool("openVRAlways"), e.data.overlaybutton = w.getBool("VRCX_overlaybutton"), e.data.hidePrivateFromFeed = w.getBool("VRCX_hidePrivateFromFeed"), e.data.hideDevicesFromFeed = w.getBool("VRCX_hideDevicesFromFeed"), e.data.hideCpuUsageFromFeed = w.getBool("VRCX_hideCpuUsageFromFeed"), e.data.overlayNotifications = w.getBool("VRCX_overlayNotifications"), e.data.overlayWrist = w.getBool("VRCX_overlayWrist"), e.data.xsNotifications = w.getBool("VRCX_xsNotifications"), e.data.imageNotifications = w.getBool("VRCX_imageNotifications"), e.data.desktopToast = w.getString("VRCX_desktopToast"), e.data.minimalFeed = w.getBool("VRCX_minimalFeed"), e.data.displayVRCPlusIconsAsAvatar = w.getBool("displayVRCPlusIconsAsAvatar"), e.data.hideTooltips = w.getBool("VRCX_hideTooltips"), e.data.notificationTTS = w.getString("VRCX_notificationTTS"), e.data.notificationTTSVoice = w.getString("VRCX_notificationTTSVoice"), e.data.notificationTimeout = w.getString("VRCX_notificationTimeout"), e.data.worldAutoCacheInvite = w.getString("VRCX_worldAutoCacheInvite"), e.data.worldAutoCacheGPS = w.getString("VRCX_worldAutoCacheGPS"), e.data.worldAutoCacheInviteFilter = w.getBool("VRCX_worldAutoCacheInviteFilter"), e.data.worldAutoCacheGPSFilter = w.getBool("VRCX_worldAutoCacheGPSFilter"), e.data.portalAutoCache = w.getString("VRCX_portalAutoCache"), e.data.autoSweepVRChatCache = w.getBool("VRCX_autoSweepVRChatCache"), e.data.vrBackgroundEnabled = w.getBool("VRCX_vrBackgroundEnabled"), e.data.legendColorOverride = w.getBool("VRCX_legendColorOverride"), e.data.asideWidth = w.getInt("VRCX_asidewidth"), e.data.autoUpdateVRCX = w.getString("VRCX_autoUpdateVRCX"), e.data.branch = w.getString("VRCX_branch"), e.data.maxTableSize = w.getInt("VRCX_maxTableSize"), L.setmaxTableSize(e.data.maxTableSize), e.data.photonLobbyTimeoutThreshold = w.getString("VRCX_photonLobbyTimeoutThreshold"), e.data.clearVRCXCacheFrequency = w.getString("VRCX_clearVRCXCacheFrequency"), e.data.nextClearVRCXCacheCheck = w.getString("VRCX_clearVRCXCacheFrequency"), e.data.avatarRemoteDatabase = w.getBool("VRCX_avatarRemoteDatabase"), e.data.avatarRemoteDatabaseProvider = w.getString("VRCX_avatarRemoteDatabaseProvider"), e.methods.saveOpenVROption = function() {
                    w.setBool("openVR", this.openVR), w.setBool("openVRAlways", this.openVRAlways), w.setBool("VRCX_overlaybutton", this.overlaybutton), w.setBool("VRCX_hidePrivateFromFeed", this.hidePrivateFromFeed), w.setBool("VRCX_hideDevicesFromFeed", this.hideDevicesFromFeed), w.setBool("VRCX_hideCpuUsageFromFeed", this.hideCpuUsageFromFeed), w.setBool("VRCX_overlayNotifications", this.overlayNotifications), w.setBool("VRCX_overlayWrist", this.overlayWrist), w.setBool("VRCX_xsNotifications", this.xsNotifications), w.setBool("VRCX_imageNotifications", this.imageNotifications), w.setString("VRCX_desktopToast", this.desktopToast), w.setBool("VRCX_minimalFeed", this.minimalFeed), w.setBool("displayVRCPlusIconsAsAvatar", this.displayVRCPlusIconsAsAvatar), w.setBool("VRCX_hideTooltips", this.hideTooltips), w.setString("VRCX_worldAutoCacheInvite", this.worldAutoCacheInvite), w.setString("VRCX_worldAutoCacheGPS", this.worldAutoCacheGPS), w.setBool("VRCX_worldAutoCacheInviteFilter", this.worldAutoCacheInviteFilter), w.setBool("VRCX_worldAutoCacheGPSFilter", this.worldAutoCacheGPSFilter), w.setString("VRCX_portalAutoCache", this.portalAutoCache), w.setBool("VRCX_autoSweepVRChatCache", this.autoSweepVRChatCache), w.setBool("VRCX_vrBackgroundEnabled", this.vrBackgroundEnabled), w.setBool("VRCX_avatarRemoteDatabase", this.avatarRemoteDatabase), this.updateSharedFeed(!0), this.updateVRConfigVars(), AppApi.ExecuteVrOverlayFunction("notyClear", "")
                }, e.methods.saveLegendColorOverride = function() {
                    w.setBool("VRCX_legendColorOverride", this.legendColorOverride), y.cachedUsers.forEach((e => {
                        y.applyUserTrustLevel(e)
                    }))
                }, e.data.TTSvoices = speechSynthesis.getVoices(), e.methods.saveNotificationTTS = function() {
                    speechSynthesis.cancel(), "Never" === w.getString("VRCX_notificationTTS") && "Never" !== this.notificationTTS && this.speak("Notification text-to-speech enabled"), w.setString("VRCX_notificationTTS", this.notificationTTS), this.updateVRConfigVars()
                }, e.data.themeMode = w.getString("VRCX_ThemeMode"), e.data.themeMode || (e.data.themeMode = "system");
                var V = () => window.matchMedia("(prefers-color-scheme: dark)").matches;
                e.data.isDarkMode = "system" === e.data.themeMode ? V() : w.getBool("isDarkMode"), l.disabled = !1 === e.data.isDarkMode, e.watch.isDarkMode = function() {
                    w.setBool("isDarkMode", this.isDarkMode), l.disabled = !1 === this.isDarkMode, this.updateVRConfigVars()
                }, window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (t => {
                    e._data.isDarkMode = t && t.matches
                })), e.watch.themeMode = function() {
                    w.setString("VRCX_ThemeMode", this.themeMode), "system" === this.themeMode ? this.isDarkMode = V() : this.isDarkMode = "dark" === this.themeMode
                }, e.data.isStartAtWindowsStartup = w.getBool("VRCX_StartAtWindowsStartup"), e.data.isStartAsMinimizedState = "true" === VRCXStorage.Get("VRCX_StartAsMinimizedState"), e.data.isCloseToTray = w.getBool("VRCX_CloseToTray");
                var k = function() {
                    w.setBool("VRCX_StartAtWindowsStartup", this.isStartAtWindowsStartup), VRCXStorage.Set("VRCX_StartAsMinimizedState", this.isStartAsMinimizedState.toString()), w.setBool("VRCX_CloseToTray", this.isCloseToTray), AppApi.SetStartup(this.isStartAtWindowsStartup)
                };
                if (e.watch.isStartAtWindowsStartup = k, e.watch.isStartAsMinimizedState = k, e.watch.isCloseToTray = k, e.data.photonEventOverlay = w.getBool("VRCX_PhotonEventOverlay"), e.data.timeoutHudOverlay = w.getBool("VRCX_TimeoutHudOverlay"), e.data.timeoutHudOverlayFilter = w.getString("VRCX_TimeoutHudOverlayFilter"), e.data.photonEventOverlayFilter = w.getString("VRCX_PhotonEventOverlayFilter"), e.data.photonEventOverlayJoinLeave = w.getBool("VRCX_PhotonEventOverlayJoinLeave"), e.data.photonLoggingEnabled = w.getBool("VRCX_photonLoggingEnabled"), e.methods.saveEventOverlay = function() {
                        w.setBool("VRCX_PhotonEventOverlay", this.photonEventOverlay), w.setBool("VRCX_TimeoutHudOverlay", this.timeoutHudOverlay), w.setString("VRCX_TimeoutHudOverlayFilter", this.timeoutHudOverlayFilter), w.setString("VRCX_PhotonEventOverlayFilter", this.photonEventOverlayFilter), w.setBool("VRCX_PhotonEventOverlayJoinLeave", this.photonEventOverlayJoinLeave), this.timeoutHudOverlay || AppApi.ExecuteVrOverlayFunction("updateHudTimeout", "[]")
                    }, w.getString("VRCX_notificationPosition") || (e.data.notificationPosition = "topCenter", w.setString("VRCX_notificationPosition", e.data.notificationPosition)), w.getString("VRCX_notificationTimeout") || (e.data.notificationTimeout = 3e3, w.setString("VRCX_notificationTimeout", e.data.notificationTimeout)), w.getString("VRCX_notificationTTSVoice") || (e.data.notificationTTSVoice = "0", w.setString("VRCX_notificationTTSVoice", e.data.notificationTTSVoice)), w.getString("VRCX_desktopToast") || (e.data.desktopToast = "Never", w.setString("VRCX_desktopToast", e.data.desktopToast)), w.getString("VRCX_notificationTTS") || (e.data.notificationTTS = "Never", w.setString("VRCX_notificationTTS", e.data.notificationTTS)), w.getString("VRCX_worldAutoCacheInvite") || (e.data.worldAutoCacheInvite = "Never", w.setString("VRCX_worldAutoCacheInvite", e.data.worldAutoCacheInvite)), w.getString("VRCX_worldAutoCacheGPS") || (e.data.worldAutoCacheGPS = "Never", w.setString("VRCX_worldAutoCacheGPS", e.data.worldAutoCacheGPS)), w.getString("VRCX_portalAutoCache") || (e.data.portalAutoCache = "Off", w.setString("VRCX_portalAutoCache", e.data.portalAutoCache)), w.getBool("VRCX_vrBackgroundEnabled") || (e.data.vrBackgroundEnabled = !1, w.setBool("VRCX_vrBackgroundEnabled", e.data.vrBackgroundEnabled)), w.getBool("VRCX_legendColorOverride") || (e.data.legendColorOverride = !1, w.setBool("VRCX_legendColorOverride", e.data.legendColorOverride)), w.getInt("VRCX_asidewidth") || (e.data.asideWidth = 236, w.setInt("VRCX_asidewidth", e.data.asideWidth)), w.getString("VRCX_autoUpdateVRCX") || (e.data.autoUpdateVRCX = "Notify", w.setString("VRCX_autoUpdateVRCX", e.data.autoUpdateVRCX)), w.getString("VRCX_branch") || (e.data.branch = "Stable", "VRCX.PyPyDance.Companion" === m.substring(0, 24) && (e.data.branch = "Beta"), w.setString("VRCX_branch", e.data.branch)), w.getString("VRCX_lastVRCXVersion") ? w.getString("VRCX_lastVRCXVersion") < m && w.setString("VRCX_lastVRCXVersion", m) : w.setString("VRCX_lastVRCXVersion", m), w.getInt("VRCX_maxTableSize") || (e.data.maxTableSize = 1e3, w.getInt("VRCX_maxTableSize", e.data.maxTableSize), L.setmaxTableSize(e.data.maxTableSize)), w.getString("VRCX_photonLobbyTimeoutThreshold") || (e.data.photonLobbyTimeoutThreshold = 3e3, w.setString("VRCX_photonLobbyTimeoutThreshold", e.data.photonLobbyTimeoutThreshold)), w.getString("VRCX_clearVRCXCacheFrequency") || (e.data.clearVRCXCacheFrequency = 172800, w.setString("VRCX_clearVRCXCacheFrequency", e.data.clearVRCXCacheFrequency)), w.getString("VRCX_TimeoutHudOverlayFilter") || (e.data.timeoutHudOverlayFilter = "Everyone", w.setString("VRCX_TimeoutHudOverlayFilter", e.data.timeoutHudOverlayFilter)), w.getString("VRCX_PhotonEventOverlayFilter") || (e.data.photonEventOverlayFilter = "Everyone", w.setString("VRCX_PhotonEventOverlayFilter", e.data.photonEventOverlayFilter)), w.getBool("VRCX_PhotonEventOverlayJoinLeave") || (e.data.photonEventOverlayJoinLeave = !1, w.setBool("VRCX_PhotonEventOverlayJoinLeave", e.data.photonEventOverlayJoinLeave)), !w.getString("sharedFeedFilters")) {
                    w.setString("sharedFeedFilters", JSON.stringify({
                        noty: {
                            Location: "Off",
                            OnPlayerJoined: "VIP",
                            OnPlayerLeft: "VIP",
                            OnPlayerJoining: "VIP",
                            Online: "VIP",
                            Offline: "VIP",
                            GPS: "Off",
                            Status: "Off",
                            invite: "Friends",
                            requestInvite: "Friends",
                            inviteResponse: "Friends",
                            requestInviteResponse: "Friends",
                            friendRequest: "On",
                            Friend: "On",
                            Unfriend: "On",
                            DisplayName: "VIP",
                            TrustLevel: "VIP",
                            PortalSpawn: "Everyone",
                            Event: "On",
                            VideoPlay: "Off",
                            BlockedOnPlayerJoined: "Off",
                            BlockedOnPlayerLeft: "Off",
                            MutedOnPlayerJoined: "Off",
                            MutedOnPlayerLeft: "Off",
                            AvatarChange: "Off",
                            Blocked: "Off",
                            Unblocked: "Off",
                            Muted: "Off",
                            Unmuted: "Off"
                        },
                        wrist: {
                            Location: "On",
                            OnPlayerJoined: "Everyone",
                            OnPlayerLeft: "Everyone",
                            OnPlayerJoining: "Friends",
                            Online: "Friends",
                            Offline: "Friends",
                            GPS: "Friends",
                            Status: "Friends",
                            invite: "Friends",
                            requestInvite: "Friends",
                            inviteResponse: "Friends",
                            requestInviteResponse: "Friends",
                            friendRequest: "On",
                            Friend: "On",
                            Unfriend: "On",
                            DisplayName: "Friends",
                            TrustLevel: "Friends",
                            PortalSpawn: "Everyone",
                            Event: "On",
                            VideoPlay: "On",
                            BlockedOnPlayerJoined: "Off",
                            BlockedOnPlayerLeft: "Off",
                            MutedOnPlayerJoined: "Off",
                            MutedOnPlayerLeft: "Off",
                            AvatarChange: "Everyone",
                            Blocked: "On",
                            Unblocked: "On",
                            Muted: "On",
                            Unmuted: "On"
                        }
                    }))
                }
                e.data.sharedFeedFilters = JSON.parse(w.getString("sharedFeedFilters")), e.data.sharedFeedFilters.noty.Blocked || (e.data.sharedFeedFilters.noty.Blocked = "Off", e.data.sharedFeedFilters.noty.Unblocked = "Off", e.data.sharedFeedFilters.noty.Muted = "Off", e.data.sharedFeedFilters.noty.Unmuted = "Off", e.data.sharedFeedFilters.wrist.Blocked = "On", e.data.sharedFeedFilters.wrist.Unblocked = "On", e.data.sharedFeedFilters.wrist.Muted = "On", e.data.sharedFeedFilters.wrist.Unmuted = "On"), w.getString("VRCX_trustColor") || w.setString("VRCX_trustColor", JSON.stringify({
                    untrusted: "#CCCCCC",
                    basic: "#1778FF",
                    known: "#2BCF5C",
                    trusted: "#FF7B42",
                    veteran: "#B18FFF",
                    legend: "#FFD000",
                    legendary: "#FF69B4",
                    vip: "#FF2626",
                    troll: "#782F2F"
                })), e.data.trustColor = JSON.parse(w.getString("VRCX_trustColor")), e.methods.updatetrustColor = function() {
                    var t = e.trustColor;
                    t ? w.setString("VRCX_trustColor", JSON.stringify(t)) : (t = JSON.parse(w.getString("VRCX_trustColor")), e.trustColor = t), null !== document.getElementById("trustColor") && (document.getElementById("trustColor").outerHTML = "");
                    var a = document.createElement("style");
                    a.id = "trustColor", a.type = "text/css";
                    var i = "";
                    for (var s in t) i += `.x-tag-${s} { color: ${t[s]} !important; border-color: ${t[s]} !important; } `;
                    a.innerHTML = i, document.getElementsByTagName("head")[0].appendChild(a)
                }, e.methods.updatetrustColor(), e.methods.saveSharedFeedFilters = function() {
                    this.notyFeedFiltersDialog.visible = !1, this.wristFeedFiltersDialog.visible = !1, w.setString("sharedFeedFilters", JSON.stringify(this.sharedFeedFilters)), this.updateSharedFeed(!0)
                }, e.methods.cancelSharedFeedFilters = function() {
                    this.notyFeedFiltersDialog.visible = !1, this.wristFeedFiltersDialog.visible = !1, this.sharedFeedFilters = JSON.parse(w.getString("sharedFeedFilters"))
                }, e.data.notificationPosition = w.getString("VRCX_notificationPosition"), e.methods.changeNotificationPosition = function() {
                    w.setString("VRCX_notificationPosition", this.notificationPosition), this.updateVRConfigVars()
                }, e.data.youTubeApi = w.getBool("VRCX_youtubeAPI"), e.data.youTubeApiKey = w.getString("VRCX_youtubeAPIKey"), e.data.progressPie = w.getBool("VRCX_progressPie"), e.data.progressPieFilter = w.getBool("VRCX_progressPieFilter");
                var M = function() {
                    AppApi.ExecuteVrFeedFunction("updateDownloadProgress", `${e.downloadProgress}`)
                };
                e.watch.downloadProgress = M, e.methods.updateVRConfigVars = function() {
                    var e = "relax";
                    this.isDarkMode && (e = "sunset");
                    var t = {
                            overlayNotifications: this.overlayNotifications,
                            hideDevicesFromFeed: this.hideDevicesFromFeed,
                            hideCpuUsageFromFeed: this.hideCpuUsageFromFeed,
                            minimalFeed: this.minimalFeed,
                            notificationPosition: this.notificationPosition,
                            notificationTimeout: this.notificationTimeout,
                            notificationTheme: e,
                            backgroundEnabled: this.vrBackgroundEnabled,
                            dtHour12: this.dtHour12
                        },
                        a = JSON.stringify(t);
                    AppApi.ExecuteVrFeedFunction("configUpdate", a), AppApi.ExecuteVrOverlayFunction("configUpdate", a)
                }, e.methods.isDanceWorld = function(e) {
                    var t = y.parseLocation(e);
                    return !!["wrld_f20326da-f1ac-45fc-a062-609723b097b1", "wrld_42377cf1-c54f-45ed-8996-5875b0573a83", "wrld_dd6d2888-dbdc-47c2-bc98-3d631b2acd7c", "wrld_52bdcdab-11cd-4325-9655-0fb120846945"].includes(t.worldId)
                }, e.methods.updateVRLastLocation = function() {
                    var e = !1;
                    this.progressPie && (e = !0, this.progressPieFilter && (this.isDanceWorld(this.lastLocation.location) || (e = !1)));
                    var t = {
                            date: this.lastLocation.date,
                            location: this.lastLocation.location,
                            name: this.lastLocation.name,
                            playerList: Array.from(this.lastLocation.playerList.values()),
                            friendList: Array.from(this.lastLocation.friendList.values()),
                            progressPie: e,
                            onlineFor: y.currentUser.$online_for
                        },
                        a = JSON.stringify(t);
                    AppApi.ExecuteVrFeedFunction("lastLocationUpdate", a), AppApi.ExecuteVrOverlayFunction("lastLocationUpdate", a)
                }, e.methods.vrInit = function() {
                    M(), this.updatePhotonLobbyBotSize(this.photonLobbyBots.length), this.updateVRConfigVars(), this.updateVRLastLocation(), this.updateVrNowPlaying(), this.updateSharedFeed(!0), this.onlineFriendCount = 0, this.updateOnlineFriendCoutner()
                }, y.$on("LOGIN", (function() {
                    e.currentUserTreeData = [], e.pastDisplayNameTable.data = []
                })), y.$on("USER:CURRENT", (function(t) {
                    t.ref.pastDisplayNames && (e.pastDisplayNameTable.data = t.ref.pastDisplayNames)
                })), y.$on("VISITS", (function(t) {
                    e.visits = t.json
                })), e.methods.logout = function() {
                    this.$confirm("로그아웃 합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: e => {
                            "confirm" === e && y.logout()
                        }
                    })
                }, e.methods.resetHome = function() {
                    this.$confirm("홈 월드를 리셋합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: e => {
                            "confirm" === e && y.saveCurrentUser({
                                homeLocation: ""
                            }).then((e => (this.$message({
                                message: "홈 월드가 리셋되었습니다.",
                                type: "success"
                            }), e)))
                        }
                    })
                }, e.methods.updateOpenVR = function(e, t, a) {
                    if (this.openVR && !t && a && (e || this.openVRAlways)) {
                        var i = !1;
                        (this.overlayNotifications || this.progressPie || this.photonEventOverlay || this.timeoutHudOverlay) && (i = !0), AppApi.SetVR(!0, i, this.overlayWrist, this.overlaybutton)
                    } else AppApi.SetVR(!1, !1, !1, !1)
                }, e.methods.getTTSVoiceName = function() {
                    var e = speechSynthesis.getVoices();
                    return 0 === e.length ? "" : (this.notificationTTSVoice >= e.length && (this.notificationTTSVoice = 0, w.setString("VRCX_notificationTTSVoice", this.notificationTTSVoice)), e[this.notificationTTSVoice].name)
                }, e.methods.changeTTSVoice = function(e) {
                    this.notificationTTSVoice = e, w.setString("VRCX_notificationTTSVoice", this.notificationTTSVoice);
                    var t = speechSynthesis.getVoices();
                    if (0 !== t.length) {
                        var a = t[e].name;
                        speechSynthesis.cancel(), this.speak(a)
                    }
                }, e.methods.speak = function(e) {
                    var t = new SpeechSynthesisUtterance,
                        a = speechSynthesis.getVoices();
                    if (0 !== a.length) {
                        var i = 0;
                        this.notificationTTSVoice < a.length && (i = this.notificationTTSVoice), t.voice = a[i], t.text = e, speechSynthesis.speak(t)
                    }
                }, e.methods.refreshConfigTreeData = function() {
                    this.configTreeData = D(y.cachedConfig)
                }, e.methods.refreshCurrentUserTreeData = function() {
                    this.currentUserTreeData = D(y.currentUser)
                }, e.methods.promptUserIdDialog = function() {
                    this.$prompt("User URL 또는 ID (UUID)를 입력해주세요.", "직접 엑세스", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputPattern: /\S+/,
                        inputErrorMessage: "User URL/ID 가 필요합니다.",
                        callback: (e, t) => {
                            if ("confirm" === e && t.inputValue)
                                if ("https://vrchat." === t.inputValue.substring(0, 15)) {
                                    var a = this.parseUserUrl(t.inputValue);
                                    a ? this.showUserDialog(a) : this.$message({
                                        message: "잘못된 URL 입니다.",
                                        type: "error"
                                    })
                                } else this.showUserDialog(t.inputValue)
                        }
                    })
                }, e.methods.promptUsernameDialog = function() {
                    this.$prompt("Username을 입력해주세요.", "직접 엑세스", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputPattern: /\S+/,
                        inputErrorMessage: "Username이 필요합니다.",
                        callback: (e, t) => {
                            "confirm" === e && t.inputValue && this.lookupUser({
                                displayName: t.inputValue
                            })
                        }
                    })
                }, e.methods.promptWorldDialog = function() {
                    this.$prompt("World URL 또는 ID (UUID)를 입력해주세요.", "직접 엑세스", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputPattern: /\S+/,
                        inputErrorMessage: "World URL/ID 가 필요합니다.",
                        callback: (e, t) => {
                            if ("confirm" === e && t.inputValue)
                                if ("https://vrchat." === t.inputValue.substring(0, 15)) {
                                    var a = this.parseLocationUrl(t.inputValue);
                                    a ? this.showWorldDialog(a) : this.$message({
                                        message: "잘못된 URL 입니다.",
                                        type: "error"
                                    })
                                } else this.showWorldDialog(t.inputValue)
                        }
                    })
                }, e.methods.promptAvatarDialog = function() {
                    this.$prompt("Avatar URL 또는 ID (UUID)를 입력해주세요.", "직접 엑세스", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputPattern: /\S+/,
                        inputErrorMessage: "Avatar URL/ID 가 필요합니다.",
                        callback: (e, t) => {
                            if ("confirm" === e && t.inputValue)
                                if ("https://vrchat." === t.inputValue.substring(0, 15)) {
                                    var a = this.parseAvatarUrl(t.inputValue);
                                    a ? this.showAvatarDialog(a) : this.$message({
                                        message: "잘못된 URL 입니다.",
                                        type: "error"
                                    })
                                } else this.showAvatarDialog(t.inputValue)
                        }
                    })
                }, e.methods.promptOmniDirectDialog = function() {
                    this.$prompt("User/World/Instance/Avatar URL 또는 ID (UUID)를 입력해주세요.", "직접 엑세스", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputPattern: /\S+/,
                        inputErrorMessage: "URL/ID 가 필요합니다.",
                        callback: (e, t) => {
                            if ("confirm" === e && t.inputValue) {
                                var a = t.inputValue,
                                    i = a.substring(0, 15);
                                if ("https://vrch.at" === i) AppApi.FollowUrl(a).then((e => {
                                    var t = e;
                                    if ("https://vrchat.com" === t.substring(0, 18) && (t = t.substring(18)), "/home/launch?" === t.substring(0, 13)) {
                                        var a = new URLSearchParams(t.substring(13)),
                                            i = a.get("worldId"),
                                            s = a.get("instanceId");
                                        if (s) {
                                            var r = `${i}:${s}`;
                                            this.showWorldDialog(r)
                                        } else i && this.showWorldDialog(i)
                                    } else this.$message({
                                        message: "잘못된 URL 입니다.",
                                        type: "error"
                                    })
                                }));
                                else if ("https://vrchat." === i) {
                                    var s = new URL(a),
                                        r = s.pathname;
                                    if ("/user/" === r.substring(5, 11)) {
                                        var o = r.substring(11);
                                        this.showUserDialog(o)
                                    } else if ("/avatar/" === r.substring(5, 13)) {
                                        var n = r.substring(13);
                                        this.showAvatarDialog(n)
                                    } else if ("/world/" === r.substring(5, 12)) {
                                        var d = r.substring(12);
                                        this.showWorldDialog(d)
                                    } else if ("/launch" === r.substring(5, 12)) {
                                        var l = new URLSearchParams(s.search),
                                            c = (d = l.get("worldId"), l.get("instanceId"));
                                        if (c) {
                                            var u = `${d}:${c}`;
                                            this.showWorldDialog(u)
                                        } else d && this.showWorldDialog(d)
                                    } else this.$message({
                                        message: "잘못된 URL 입니다.",
                                        type: "error"
                                    })
                                } else "usr_" === a.substring(0, 4) ? this.showUserDialog(a) : "wrld_" === a.substring(0, 5) ? this.showWorldDialog(a) : "avtr_" === a.substring(0, 5) ? this.showAvatarDialog(a) : this.$message({
                                    message: "잘못된 ID/URL 입니다.",
                                    type: "error"
                                })
                            }
                        }
                    })
                }, e.methods.promptNotificationTimeout = function() {
                    this.$prompt("시간(초)을 입력해주세요.", "알림 표시 시간", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: this.notificationTimeout / 1e3,
                        inputPattern: /\d+$/,
                        inputErrorMessage: "유효한 숫자가 필요합니다.",
                        callback: (e, t) => {
                            "confirm" === e && t.inputValue && !isNaN(t.inputValue) && (this.notificationTimeout = Math.trunc(1e3 * Number(t.inputValue)), w.setString("VRCX_notificationTimeout", this.notificationTimeout), this.updateVRConfigVars())
                        }
                    })
                }, e.methods.promptRenameAvatar = function(e) {
                    this.$prompt("아바타 이름을 입력해주세요.", "아바타 이름 변경", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: e.ref.name,
                        inputErrorMessage: "유효한 이름이 필요합니다.",
                        callback: (t, a) => {
                            "confirm" === t && a.inputValue !== e.ref.name && y.saveAvatar({
                                id: e.id,
                                name: a.inputValue
                            }).then((e => (this.$message({
                                message: "아바타 이름이 변경되었습니다.",
                                type: "success"
                            }), e)))
                        }
                    })
                }, e.methods.promptChangeAvatarDescription = function(e) {
                    this.$prompt("아바타 설명을 입력해주세요.", "설명 변경", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: e.ref.description,
                        inputErrorMessage: "유효한 설명이 필요합니다.",
                        callback: (t, a) => {
                            "confirm" === t && a.inputValue !== e.ref.description && y.saveAvatar({
                                id: e.id,
                                description: a.inputValue
                            }).then((e => (this.$message({
                                message: "아바타 설명이 변경되었습니다.",
                                type: "success"
                            }), e)))
                        }
                    })
                }, e.methods.promptRenameWorld = function(e) {
                    this.$prompt("월드 이름을 입력해주세요.", "월드 이름 바꾸기", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: e.ref.name,
                        inputErrorMessage: "유효한 이름이 필요합니다.",
                        callback: (t, a) => {
                            "confirm" === t && a.inputValue !== e.ref.name && y.saveWorld({
                                id: e.id,
                                name: a.inputValue
                            }).then((e => (this.$message({
                                message: "월드 이름이 변경되었습니다.",
                                type: "success"
                            }), e)))
                        }
                    })
                }, e.methods.promptChangeWorldDescription = function(e) {
                    this.$prompt("월드 설명을 입력해주세요.", "설명 변경", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: e.ref.description,
                        inputErrorMessage: "유효한 설명이 필요합니다.",
                        callback: (t, a) => {
                            "confirm" === t && a.inputValue !== e.ref.description && y.saveWorld({
                                id: e.id,
                                description: a.inputValue
                            }).then((e => (this.$message({
                                message: "월드 설명이 변경되었습니다.",
                                type: "success"
                            }), e)))
                        }
                    })
                }, e.methods.promptChangeWorldCapacity = function(e) {
                    this.$prompt("월드의 최대 인원수를 입력해주세요. 최대: 40", "최대 인원수 변경", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: e.ref.capacity,
                        inputPattern: /\d+$/,
                        inputErrorMessage: "유효한 숫자가 필요합니다.",
                        callback: (t, a) => {
                            "confirm" === t && a.inputValue !== e.ref.capacity && y.saveWorld({
                                id: e.id,
                                capacity: a.inputValue
                            }).then((e => (this.$message({
                                message: "월드의 최대 인원수가 변경되었습니다.",
                                type: "success"
                            }), e)))
                        }
                    })
                }, e.methods.promptChangeWorldYouTubePreview = function(e) {
                    this.$prompt("월드의 유튜브 미리보기 URL을 입력해주세요. 경고: 한번 추가된 미리보기는 제거할 수 없습니다.", "YouTube 미리보기 변경", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: e.ref.previewYoutubeId,
                        inputErrorMessage: "유효한 YouTube URL이 필요합니다.",
                        callback: (t, a) => {
                            if ("confirm" === t && a.inputValue !== e.ref.previewYoutubeId) {
                                if (a.inputValue.length > 11) try {
                                    var i = new URL(a.inputValue),
                                        s = i.pathname,
                                        r = i.searchParams.get("v");
                                    s && 12 === s.length && (a.inputValue = s.substring(1, 12)), r && 11 === r.length && (a.inputValue = r)
                                } catch {
                                    return void this.$message({
                                        message: "잘못된 YouTube URL 입니다.",
                                        type: "error"
                                    })
                                }
                                a.inputValue !== e.ref.previewYoutubeId && y.saveWorld({
                                    id: e.id,
                                    previewYoutubeId: a.inputValue
                                }).then((e => (this.$message({
                                    message: "월드의 YouTube 미리보기가 변경되었습니다.",
                                    type: "success"
                                }), e)))
                            }
                        }
                    })
                }, e.methods.promptMaxTableSizeDialog = function() {
                    this.$prompt("숫자를 입력해주세요.", "Max Table Size", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "저장",
                        cancelButtonText: "취소",
                        inputValue: this.maxTableSize,
                        inputPattern: /\d+$/,
                        inputErrorMessage: "유효한 숫자가 필요합니다.",
                        callback: (e, t) => {
                            "confirm" === e && t.inputValue && (this.maxTableSize = t.inputValue, w.setString("VRCX_maxTableSize", this.maxTableSize), L.setmaxTableSize(this.maxTableSize), this.feedTableLookup(), this.gameLogTableLookup())
                        }
                    })
                }, e.methods.setTablePageSize = function(e) {
                    this.tablePageSize = e, this.feedTable.pageSize = e, this.gameLogTable.pageSize = e, this.friendLogTable.pageSize = e, this.playerModerationTable.pageSize = e, this.notificationTable.pageSize = e, w.setInt("VRCX_tablePageSize", e)
                }, e.methods.promptPhotonLobbyTimeoutThreshold = function() {
                    this.$prompt("시간(초)을 입력해주세요. (기본값: 3)", "User Timeout Threshold", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: this.photonLobbyTimeoutThreshold / 1e3,
                        inputPattern: /\d+$/,
                        inputErrorMessage: "유효한 숫자가 필요합니다.",
                        callback: (e, t) => {
                            "confirm" === e && t.inputValue && !isNaN(t.inputValue) && (this.photonLobbyTimeoutThreshold = Math.trunc(1e3 * Number(t.inputValue)), w.setString("VRCX_photonLobbyTimeoutThreshold", this.photonLobbyTimeoutThreshold))
                        }
                    })
                }, e.methods.promptAutoClearVRCXCacheFrequency = function() {
                    this.$prompt("시간을 입력해주세요. (기본값: 24, 비활성화: 0)", "VRCX 캐시 비우기 주기", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: this.clearVRCXCacheFrequency / 3600 / 2,
                        inputPattern: /\d+$/,
                        inputErrorMessage: "유효한 숫자가 필요합니다.",
                        callback: (e, t) => {
                            "confirm" === e && t.inputValue && !isNaN(t.inputValue) && (this.clearVRCXCacheFrequency = Math.trunc(3600 * Number(t.inputValue) * 2), w.setString("VRCX_clearVRCXCacheFrequency", this.clearVRCXCacheFrequency))
                        }
                    })
                }, e.methods.promptSetAvatarRemoteDatabase = function() {
                    this.$prompt("Enter avatar database provider URL", "Avatar Database Provider", {
                        distinguishCancelAndClose: !0,
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        inputValue: this.avatarRemoteDatabaseProvider,
                        inputPattern: /\S+/,
                        inputErrorMessage: "유효한 URL이 필요합니다.",
                        callback: (e, t) => {
                            "confirm" === e && t.inputValue && (this.avatarRemoteDatabaseProvider = t.inputValue, w.setString("VRCX_avatarRemoteDatabaseProvider", this.avatarRemoteDatabaseProvider))
                        }
                    })
                };
                var G = e => {
                    var t = 0;
                    document.querySelectorAll(".v-modal,.el-dialog__wrapper").forEach((a => {
                        var i = Number(a.style.zIndex) || 0;
                        i && i > t && a !== e && (t = i)
                    })), t && (e.style.zIndex = t + 1)
                };
                e.data.userDialog = {
                    visible: !1,
                    loading: !1,
                    id: "",
                    ref: {},
                    friend: {},
                    isFriend: !1,
                    incomingRequest: !1,
                    outgoingRequest: !1,
                    isBlock: !1,
                    isMute: !1,
                    isHideAvatar: !1,
                    isFavorite: !1,
                    $location: {},
                    users: [],
                    instance: {},
                    worlds: [],
                    avatars: [],
                    isWorldsLoading: !1,
                    isFavoriteWorldsLoading: !1,
                    isAvatarsLoading: !1,
                    worldSorting: "update",
                    avatarSorting: "update",
                    avatarReleaseStatus: "all",
                    treeData: [],
                    memo: "",
                    $avatarInfo: {
                        ownerId: "",
                        avatarName: "",
                        fileCreatedAt: ""
                    },
                    joinCount: 0,
                    timeSpent: 0,
                    lastSeen: ""
                }, e.watch["userDialog.memo"] = function() {
                    var e = this.userDialog;
                    this.saveMemo(e.id, e.memo)
                }, e.methods.getFaviconUrl = function(e) {
                    try {
                        return `https://icons.duckduckgo.com/ip2/${new URL(e).host}.ico`
                    } catch (e) {
                        return ""
                    }
                }, y.$on("LOGOUT", (function() {
                    e.userDialog.visible = !1
                })), y.$on("USER", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.userDialog;
                    !1 !== i.visible && i.id === a.id && (i.ref = a, e.applyUserDialogLocation())
                })), y.$on("WORLD", (function(t) {
                    var a = e.userDialog;
                    !1 !== a.visible && a.$location.worldId === t.ref.id && e.applyUserDialogLocation()
                })), y.$on("FRIEND:STATUS", (function(t) {
                    var a = e.userDialog;
                    if (!1 !== a.visible && a.id === t.params.userId) {
                        var {
                            json: i
                        } = t;
                        a.isFriend = i.isFriend, a.incomingRequest = i.incomingRequest, a.outgoingRequest = i.outgoingRequest
                    }
                })), y.$on("FRIEND:REQUEST", (function(t) {
                    var a = e.userDialog;
                    !1 !== a.visible && a.id === t.params.userId && (t.json.success ? a.isFriend = !0 : a.outgoingRequest = !0)
                })), y.$on("FRIEND:REQUEST:CANCEL", (function(t) {
                    var a = e.userDialog;
                    !1 !== a.visible && a.id === t.params.userId && (a.outgoingRequest = !1)
                })), y.$on("NOTIFICATION", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.userDialog;
                    !1 === i.visible || a.$isDeleted || "friendRequest" !== a.type || a.senderUserId !== i.id || (i.incomingRequest = !0)
                })), y.$on("NOTIFICATION:ACCEPT", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.userDialog;
                    !1 !== i.visible && void 0 !== a && "friendRequest" === a.type && a.senderUserId === i.id && (i.isFriend = !0)
                })), y.$on("NOTIFICATION:EXPIRE", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.userDialog;
                    !1 !== i.visible && "friendRequest" === a.type && a.senderUserId === i.id && (i.incomingRequest = !1)
                })), y.$on("FRIEND:DELETE", (function(t) {
                    var a = e.userDialog;
                    !1 !== a.visible && a.id === t.params.userId && (a.isFriend = !1)
                })), y.$on("PLAYER-MODERATION:@SEND", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.userDialog;
                    !1 === i.visible || a.$isDeleted || a.targetUserId !== i.id && a.sourceUserId !== this.currentUser.id || ("block" === a.type ? i.isBlock = !0 : "mute" === a.type ? i.isMute = !0 : "hideAvatar" === a.type && (i.isHideAvatar = !0), e.$message({
                        message: "유저 moderated 되었습니다.",
                        type: "success"
                    }))
                })), y.$on("PLAYER-MODERATION:@DELETE", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.userDialog;
                    !1 !== i.visible && a.targetUserId === i.id && a.sourceUserId === this.currentUser.id && ("block" === a.type ? i.isBlock = !1 : "mute" === a.type ? i.isMute = !1 : "hideAvatar" === a.type && (i.isHideAvatar = !1))
                })), y.$on("FAVORITE", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.userDialog;
                    !1 === i.visible || a.$isDeleted || a.favoriteId !== i.id || (i.isFavorite = !0)
                })), y.$on("FAVORITE:@DELETE", (function(t) {
                    var a = e.userDialog;
                    !1 !== a.visible && a.id === t.ref.favoriteId && (a.isFavorite = !1)
                })), e.methods.showUserDialog = function(e) {
                    this.$nextTick((() => G(this.$refs.userDialog.$el)));
                    var t = this.userDialog;
                    t.currentAvatarThumbnailImageUrl = "", t.userIcon = "", t.id = e, t.treeData = [], t.memo = "", this.getMemo(e).then((a => {
                        t.memo = a;
                        var i = this.friends.get(e);
                        if (i)
                            if (i.memo = String(a || ""), a) {
                                var s = a.split("\n");
                                i.$nickName = s[0]
                            } else i.$nickName = ""
                    })), t.visible = !0, t.loading = !0, t.avatars = [], t.worlds = [], t.instance = {
                        id: "",
                        occupants: 0,
                        friendCount: 0
                    }, t.lastSeen = "", t.joinCount = 0, t.timeSpent = 0, y.getCachedUser({
                        userId: e
                    }).catch((e => {
                        throw t.loading = !1, t.visible = !1, this.$message({
                            message: "유저 로딩에 실패하였습니다.",
                            type: "error"
                        }), e
                    })).then((a => {
                        if (a.ref.id === t.id) {
                            for (var i of (t.loading = !1, t.ref = a.ref, t.friend = this.friends.get(t.id), t.isFriend = Boolean(t.friend), t.incomingRequest = !1, t.outgoingRequest = !1, t.isBlock = !1, t.isMute = !1, t.isHideAvatar = !1, y.cachedPlayerModerations.values())) !1 === i.$isDeleted && i.targetUserId === t.id && i.sourceUserId === y.currentUser.id && ("block" === i.type ? t.isBlock = !0 : "mute" === i.type ? t.isMute = !0 : "hideAvatar" === i.type && (t.isHideAvatar = !0));
                            t.isFavorite = y.cachedFavoritesByObjectId.has(t.id), this.applyUserDialogLocation(), "0" === this.$refs.userDialogTabs.currentName ? this.userDialogLastActiveTab = "Info" : "1" === this.$refs.userDialogTabs.currentName ? (this.userDialogLastActiveTab = "Worlds", this.setUserDialogWorlds(e), this.userDialogLastWorld !== e && (this.userDialogLastWorld = e, this.refreshUserDialogWorlds())) : "2" === this.$refs.userDialogTabs.currentName ? (this.userDialogLastActiveTab = "Favorite Worlds", this.userDialogLastFavoriteWorld !== e && (this.userDialogLastFavoriteWorld = e, this.getUserFavoriteWorlds(e))) : "3" === this.$refs.userDialogTabs.currentName ? (this.userDialogLastActiveTab = "Avatars", this.setUserDialogAvatars(e), this.userDialogLastAvatar = e, e === y.currentUser.id && 0 === t.avatars.length && this.refreshUserDialogAvatars(), this.setUserDialogAvatarsRemote(e)) : "4" === this.$refs.userDialogTabs.currentName && (this.userDialogLastActiveTab = "JSON", this.refreshUserDialogTreeData()), y.getFriendStatus({
                                userId: t.id
                            }), a.cache && y.getUser(a.params);
                            var s = y.parseLocation(t.ref.location);
                            s.worldId && this.lastLocation.location !== s.tag && y.getInstance({
                                worldId: s.worldId,
                                instanceId: s.instanceId
                            });
                            var r = !1;
                            this.lastLocation.playerList.has(t.ref.displayName) && (r = !0), L.getUserStats(t.ref, r).then((e => {
                                e.userId === t.id && (t.lastSeen = e.created_at, t.joinCount = e.joinCount, t.timeSpent = e.timeSpent)
                            }))
                        }
                        return a
                    })), this.showUserDialogHistory.delete(e), this.showUserDialogHistory.add(e)
                }, e.methods.applyUserDialogLocation = function() {
                    var e = this.userDialog,
                        t = y.parseLocation(e.ref.location);
                    (e.$location = t, t.userId) && (void 0 === (d = y.cachedUsers.get(t.userId)) ? y.getUser({
                        userId: t.userId
                    }).then((e => (o().set(t, "user", e.ref), e))) : t.user = d);
                    var a = [],
                        i = 0,
                        s = this.lastLocation.playerList;
                    if (this.lastLocation.location === t.tag && s.size > 0) {
                        void 0 === (d = y.cachedUsers.get(y.currentUser.id)) && (d = y.currentUser), s.has(d.displayName) && a.push(d);
                        var r = this.lastLocation.friendList;
                        for (var n of r.values()) {
                            for (var d, l = !0, c = 0; c < a.length; c++) {
                                var u = a[c];
                                if (n.displayName === u.displayName) {
                                    l = !1;
                                    break
                                }
                            }
                            if (l) void 0 !== (d = y.cachedUsers.get(n.userId)) && a.push(d)
                        }
                        i = a.length - 1
                    } else if (!1 === t.isOffline) {
                        for (var n of this.friends.values())
                            if (void 0 !== n.ref && n.ref.location === t.tag) {
                                if ("online" !== n.state && "private" === n.ref.location) continue;
                                a.push(n.ref)
                            } i = a.length
                    }
                    a.sort(O), e.users = a, t.worldId && this.lastLocation.location === e.ref.location && (e.instance = {
                        id: e.ref.location,
                        occupants: this.lastLocation.playerList.size
                    }), (t.isOffline || t.isPrivate || "" === t.worldId) && (e.instance = {
                        id: e.ref.location,
                        occupants: 0
                    }), e.instance.friendCount = i
                }, y.$on("LOGIN", (function() {
                    e.currentInstanceUserList.data = []
                })), y.$on("USER:APPLY", (function(t) {
                    if (e.lastLocation.playerList.has(t.displayName)) {
                        var a = e.lastLocation.playerList.get(t.displayName);
                        a.userId || (a.userId = t.id, e.lastLocation.playerList.set(t.displayName, a), e.lastLocation.friendList.has(t.displayName) && e.lastLocation.friendList.set(t.displayName, a)), e.photonLobby.forEach(((a, i) => {
                            void 0 !== a && a.displayName === t.displayName && a !== t && (e.photonLobby.set(i, t), e.photonLobbyCurrent.has(i) && e.photonLobbyCurrent.set(i, t))
                        })), e.getCurrentInstanceUserList()
                    }
                })), e.methods.getCurrentInstanceUserList = function() {
                    var t = [],
                        a = function(a) {
                            var i = "",
                                s = 0,
                                r = !1;
                            e.photonLobbyCurrent.forEach(((e, t) => {
                                (0 === s || s > t) && (s = t), void 0 !== e && (void 0 !== a.id && void 0 !== e.id && e.id === a.id || void 0 !== a.displayName && void 0 !== e.displayName && e.displayName === a.displayName) && (i = t)
                            }));
                            var o = !1;
                            0 !== e.photonLobbyMaster ? i === e.photonLobbyMaster && (o = !0) : i === s && (o = !0);
                            var n = e.photonLobbyInVrMode.get(i),
                                d = 0;
                            void 0 !== a.id && (r = e.friends.has(a.id), "VIP" === e.timeoutHudOverlayFilter || "Friends" === e.timeoutHudOverlayFilter ? e.photonLobbyTimeout.forEach((e => {
                                e.userId === a.id && (d = e.time)
                            })) : e.photonLobbyTimeout.forEach((e => {
                                e.displayName === a.displayName && (d = e.time)
                            }))), t.push({
                                ref: a,
                                timer: a.$location_at,
                                photonId: i,
                                isMaster: o,
                                inVrMode: n,
                                isFriend: r,
                                timeoutTime: d
                            })
                        },
                        i = this.lastLocation.playerList;
                    if (i.size > 0) {
                        var s = y.cachedUsers.get(y.currentUser.id);
                        for (var r of (void 0 === s && (s = y.currentUser), i.has(s.displayName) && a(s), i.values()))
                            if (r.displayName !== y.currentUser.displayName) {
                                for (var o = !0, n = 0; n < t.length; n++) {
                                    var d = t[n];
                                    if (r.displayName === d.displayName) {
                                        o = !1;
                                        break
                                    }
                                }
                                if (o)
                                    if (void 0 !== (s = y.cachedUsers.get(r.userId))) {
                                        if (!s.isFriend || "ask me" === s.status || "busy" === s.status) {
                                            var {
                                                joinTime: l
                                            } = this.lastLocation.playerList.get(s.displayName);
                                            l || (l = Date.now()), s.$location_at = l
                                        }
                                        a(s)
                                    } else {
                                        var {
                                            joinTime: l
                                        } = this.lastLocation.playerList.get(r.displayName);
                                        l || (l = Date.now()), a(s = {
                                            displayName: r.displayName,
                                            $location_at: l,
                                            $online_for: l
                                        })
                                    }
                            }
                    }
                    this.currentInstanceUserList.data = t, this.updateTimers()
                }, e.data.currentInstanceWorld = {}, e.data.currentInstanceLocation = {}, e.methods.updateCurrentInstanceWorld = function(e) {
                    if (this.currentInstanceWorld = {}, this.currentInstanceLocation = {}, e) {
                        var t = y.parseLocation(e);
                        this.currentInstanceLocation = t, y.cachedWorlds.get(t.worldId) ? y.getWorld({
                            worldId: t.worldId
                        }).then((e => {
                            this.currentInstanceWorld = e.ref;
                            var {
                                isPC: t,
                                isQuest: a
                            } = this.getAvailablePlatforms(e.ref.unityPackages);
                            this.currentInstanceWorld.$isPC = t, this.currentInstanceWorld.$isQuest = a
                        })) : y.getCachedWorld({
                            worldId: t.worldId
                        }).then((e => {
                            this.currentInstanceWorld = e.ref;
                            var {
                                isPC: t,
                                isQuest: a
                            } = this.getAvailablePlatforms(e.ref.unityPackages);
                            this.currentInstanceWorld.$isPC = t, this.currentInstanceWorld.$isQuest = a
                        }))
                    }
                }, e.methods.getAvailablePlatforms = function(e) {
                    var t = !1,
                        a = !1;
                    if ("object" == typeof e)
                        for (var i of e) "standalonewindows" === i.platform ? t = !0 : "android" === i.platform && (a = !0);
                    return {
                        isPC: t,
                        isQuest: a
                    }
                }, e.methods.selectCurrentInstanceRow = function(e) {
                    if (null !== e) {
                        var t = e.ref;
                        t.id ? this.showUserDialog(t.id) : this.lookupUser(t)
                    }
                }, e.methods.updateTimers = function() {
                    for (var e of A) e.update()
                }, e.methods.setUserDialogWorlds = function(e) {
                    var t = [];
                    for (var a of y.cachedWorlds.values()) a.authorId === e && t.push(a);
                    this.sortUserDialogWorlds(t)
                }, e.methods.sortUserDialogWorlds = function(e) {
                    var t = this.userDialog;
                    "update" === t.worldSorting ? e.sort($) : e.sort(F), t.worlds = e
                }, e.methods.setUserDialogAvatars = function(e) {
                    var t = new Set;
                    for (var a of (this.userDialogAvatars.forEach((e => {
                            t.add(e.id, e)
                        })), y.cachedAvatars.values())) a.authorId !== e || t.has(a.id) || this.userDialog.avatars.push(a);
                    this.sortUserDialogAvatars(this.userDialog.avatars)
                }, e.methods.setUserDialogAvatarsRemote = async function(e) {
                    if (this.avatarRemoteDatabase && e !== y.currentUser.id) {
                        var t = await this.lookupAvatars("authorId", e),
                            a = new Set;
                        this.userDialogAvatars.forEach((e => {
                            a.add(e.id, e)
                        })), t && "object" == typeof t && t.forEach((e => {
                            e.id && !a.has(e.id) && this.userDialog.avatars.push(e)
                        }))
                    }
                    this.sortUserDialogAvatars(this.userDialog.avatars)
                }, e.methods.lookupAvatars = async function(e, t) {
                    if ("search" === e) var a = "&n=5000";
                    else a = "";
                    var i = new Map;
                    try {
                        var s = await C.execute({
                                url: `${this.avatarRemoteDatabaseProvider}?${e}=${encodeURIComponent(t)}${a}`,
                                method: "GET",
                                headers: {
                                    "User-Agent": m,
                                    Referer: "https://vrcx.pypy.moe"
                                }
                            }),
                            r = JSON.parse(s.data);
                        if (this.debugWebRequests && console.log(r, s), 200 !== s.status || "object" != typeof r) throw new Error(`Error: ${s.data}`);
                        r.forEach((e => {
                            if (!i.has(e.Id)) {
                                var t = {
                                    authorId: "",
                                    authorName: "",
                                    name: "",
                                    description: "",
                                    id: "",
                                    imageUrl: "",
                                    created_at: "0001-01-01T00:00:00.0000000Z",
                                    updated_at: "0001-01-01T00:00:00.0000000Z",
                                    releaseStatus: "public",
                                    ...e,
                                    thumbnailImageUrl: e.imageUrl
                                };
                                i.set(t.id, t)
                            }
                        }))
                    } catch {
                        console.error(`Avatar lookup failed for ${t}`)
                    }
                    return i
                }, e.methods.sortUserDialogAvatars = function(e) {
                    var t = this.userDialog;
                    "update" === t.avatarSorting ? e.sort($) : e.sort(F), t.avatars = e
                }, e.methods.refreshUserDialogWorlds = function() {
                    var e = this.userDialog;
                    if (!e.isWorldsLoading) {
                        e.isWorldsLoading = !0;
                        var t = {
                            n: 50,
                            offset: 0,
                            sort: "updated",
                            order: "descending",
                            userId: e.id,
                            releaseStatus: "public"
                        };
                        t.userId === y.currentUser.id && (t.user = "me", t.releaseStatus = "all");
                        var a = new Map;
                        for (var i of y.cachedWorlds.values()) i.authorId === e.id && y.cachedWorlds.delete(i.id);
                        y.bulk({
                            fn: "getWorlds",
                            N: -1,
                            params: t,
                            handle: e => {
                                for (var t of e.json) {
                                    var i = y.cachedWorlds.get(t.id);
                                    void 0 !== i && a.set(i.id, i)
                                }
                            },
                            done: () => {
                                if (e.id === t.userId) {
                                    var i = Array.from(a.values());
                                    this.sortUserDialogWorlds(i)
                                }
                                e.isWorldsLoading = !1
                            }
                        })
                    }
                }, e.methods.refreshUserDialogAvatars = function(e) {
                    var t = this.userDialog;
                    if (!t.isAvatarsLoading) {
                        t.isAvatarsLoading = !0, e && (t.loading = !0);
                        for (let e of y.cachedAvatars.values()) e.authorId === t.id && y.cachedAvatars.delete(e.id);
                        var a = new Map;
                        y.bulk({
                            fn: "getAvatars",
                            N: -1,
                            params: {
                                n: 50,
                                offset: 0,
                                sort: "updated",
                                order: "descending",
                                releaseStatus: "all",
                                user: "me"
                            },
                            handle: e => {
                                for (var t of e.json) {
                                    var i = y.cachedAvatars.get(t.id);
                                    void 0 !== i && a.set(i.id, i)
                                }
                            },
                            done: () => {
                                var i = Array.from(a.values());
                                if (this.sortUserDialogAvatars(i), t.isAvatarsLoading = !1, e) {
                                    t.loading = !1;
                                    for (let t of i)
                                        if (T(t.imageUrl) === e) return void this.showAvatarDialog(t.id);
                                    this.$message({
                                        message: "나의 아바타를 찾을 수 없습니다.",
                                        type: "error"
                                    })
                                }
                            }
                        })
                    }
                };
                e.methods.userDialogCommand = function(e) {
                    var t = this.userDialog;
                    if (!1 !== t.visible)
                        if ("Refresh" === e) this.showUserDialog(t.id);
                        else if ("Add Favorite" === e) this.showFavoriteDialog("friend", t.id);
                    else if ("Edit Social Status" === e) this.showSocialStatusDialog();
                    else if ("Edit Language" === e) this.showLanguageDialog();
                    else if ("Edit Bio" === e) this.showBioDialog();
                    else if ("Logout" === e) this.logout();
                    else if ("Request Invite" === e) y.sendRequestInvite({
                        platform: "standalonewindows"
                    }, t.id).then((e => (this.$message("초대 요청을 보냈습니다."), e)));
                    else if ("Invite Message" === e) {
                        var a = y.parseLocation(this.lastLocation.location);
                        y.getCachedWorld({
                            worldId: a.worldId
                        }).then((e => {
                            this.showSendInviteDialog({
                                instanceId: this.lastLocation.location,
                                worldId: this.lastLocation.location,
                                worldName: e.ref.name
                            }, t.id)
                        }))
                    } else if ("Request Invite Message" === e) this.showSendInviteRequestDialog({
                        platform: "standalonewindows"
                    }, t.id);
                    else if ("Invite" === e) {
                        a = y.parseLocation(this.lastLocation.location);
                        y.getCachedWorld({
                            worldId: a.worldId
                        }).then((e => {
                            y.sendInvite({
                                instanceId: this.lastLocation.location,
                                worldId: this.lastLocation.location,
                                worldName: e.ref.name
                            }, t.id).then((e => (this.$message("초대를 보냈습니다."), e)))
                        }))
                    } else if ("Show Avatar Author" === e) {
                        var {
                            currentAvatarImageUrl: i
                        } = t.ref;
                        this.showAvatarAuthorDialog(t.id, t.$avatarInfo.ownerId, i)
                    } else if ("Show Fallback Avatar Details" === e) {
                        var {
                            fallbackAvatar: s
                        } = t.ref;
                        s ? this.showAvatarDialog(s) : this.$message({
                            message: "fallback 아바타가 설정되지 않았습니다.",
                            type: "error"
                        })
                    } else "Previous Images" === e ? this.displayPreviousImages("User", "Display") : "Previous Instances" === e ? this.showPreviousInstancesUserDialog(t.ref) : "Manage Gallery" === e ? this.showGalleryDialog() : "Copy User" === e ? this.copyUser(t.id) : this.$confirm(`${e} 계속 하시겠습니까?`, "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: a => {
                            "confirm" === a && ((e, t) => {
                                switch (e) {
                                    case "Delete Favorite":
                                        y.deleteFavorite({
                                            objectId: t
                                        });
                                        break;
                                    case "Accept Friend Request":
                                        "" === (a = y.getFriendRequest(t)) ? y.sendFriendRequest({
                                            userId: t
                                        }): y.acceptNotification({
                                            notificationId: a
                                        });
                                        break;
                                    case "Decline Friend Request":
                                        var a;
                                        "" === (a = y.getFriendRequest(t)) ? y.cancelFriendRequest({
                                            userId: t
                                        }): y.hideNotification({
                                            notificationId: a
                                        });
                                        break;
                                    case "Cancel Friend Request":
                                        y.cancelFriendRequest({
                                            userId: t
                                        });
                                        break;
                                    case "Send Friend Request":
                                        y.sendFriendRequest({
                                            userId: t
                                        });
                                        break;
                                    case "Unblock":
                                        y.deletePlayerModeration({
                                            moderated: t,
                                            type: "block"
                                        });
                                        break;
                                    case "Block":
                                        y.sendPlayerModeration({
                                            moderated: t,
                                            type: "block"
                                        });
                                        break;
                                    case "Unmute":
                                        y.deletePlayerModeration({
                                            moderated: t,
                                            type: "mute"
                                        });
                                        break;
                                    case "Mute":
                                        y.sendPlayerModeration({
                                            moderated: t,
                                            type: "mute"
                                        });
                                        break;
                                    case "Show Avatar":
                                        y.deletePlayerModeration({
                                            moderated: t,
                                            type: "hideAvatar"
                                        });
                                        break;
                                    case "Hide Avatar":
                                        y.sendPlayerModeration({
                                            moderated: t,
                                            type: "hideAvatar"
                                        });
                                        break;
                                    case "Unfriend":
                                        y.deleteFriend({
                                            userId: t
                                        })
                                }
                            })(e, t.id)
                        }
                    })
                }, e.methods.refreshUserDialogTreeData = function() {
                    var e = this.userDialog;
                    e.treeData = D(e.ref)
                }, e.methods.changeUserDialogWorldSorting = function() {
                    var e = this.userDialog;
                    this.sortUserDialogWorlds(e.worlds)
                }, e.methods.changeUserDialogAvatarSorting = function() {
                    var e = this.userDialog;
                    this.sortUserDialogAvatars(e.avatars)
                }, e.computed.userDialogAvatars = function() {
                    var {
                        avatars: e,
                        avatarReleaseStatus: t
                    } = this.userDialog;
                    return "public" === t || "private" === t ? e.filter((e => e.releaseStatus === t)) : e
                }, e.data.worldDialog = {
                    visible: !1,
                    loading: !1,
                    id: "",
                    $location: {},
                    ref: {},
                    isFavorite: !1,
                    rooms: [],
                    treeData: [],
                    fileCreatedAt: "",
                    fileSize: "",
                    inCache: !1,
                    cacheSize: 0,
                    cacheLocked: !1,
                    lastVisit: "",
                    visitCount: 0,
                    timeSpent: 0,
                    isPC: !1,
                    isQuest: !1
                }, y.$on("LOGOUT", (function() {
                    e.worldDialog.visible = !1
                })), y.$on("WORLD", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.worldDialog;
                    if (!1 !== i.visible && i.id === a.id) {
                        for (var s of (i.ref = a, e.applyWorldDialogInstances(), i.rooms)) 0 === s.occupants && y.getInstance({
                            worldId: i.id,
                            instanceId: s.id
                        });
                        if (i.rooms.sort((function(e, t) {
                                return t.users.length - e.users.length || t.occupants - e.occupants
                            })), "Loading" === i.fileSize) {
                            var r = "";
                            for (let t = a.unityPackages.length - 1; t > -1; t--) {
                                var o = a.unityPackages[t];
                                if ("standalonewindows" === o.platform && e.compareUnityVersion(o.unityVersion)) {
                                    r = o.assetUrl;
                                    break
                                }
                            }
                            var n = T(r),
                                d = parseInt(S(r), 10);
                            n && y.getBundles(n).then((e => {
                                var {
                                    versions: t
                                } = e.json;
                                for (let e = t.length - 1; e > -1; e--) {
                                    var a = t[e];
                                    if (a.version === d) {
                                        i.fileCreatedAt = a.created_at, i.fileSize = `${(a.file.sizeInBytes/1048576).toFixed(2)} MiB`;
                                        break
                                    }
                                }
                            })).catch((() => {
                                i.fileSize = "Error"
                            }))
                        }
                    }
                })), y.$on("FAVORITE", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.worldDialog;
                    !1 === i.visible || a.$isDeleted || a.favoriteId !== i.id || (i.isFavorite = !0)
                })), y.$on("FAVORITE:@DELETE", (function(t) {
                    var a = e.worldDialog;
                    !1 !== a.visible && a.id === t.ref.favoriteId && (a.isFavorite = !1)
                })), e.methods.showWorldDialog = function(e) {
                    this.$nextTick((() => G(this.$refs.worldDialog.$el)));
                    var t = this.worldDialog,
                        a = y.parseLocation(e);
                    if ("" !== a.worldId) {
                        t.id = a.worldId, t.$location = a, t.treeData = [], t.fileCreatedAt = "", t.fileSize = "Loading", t.visible = !0, t.loading = !0, t.inCache = !1, t.cacheSize = 0, t.cacheLocked = !1, t.rooms = [], t.lastVisit = "", t.visitCount = "", t.timeSpent = 0, t.isPC = !1, t.isQuest = !1;
                        var i = !1;
                        y.parseLocation(this.lastLocation.location).worldId === t.id && (i = !0), L.getLastVisit(t.id, i).then((e => {
                            e.worldId === t.id && (t.lastVisit = e.created_at)
                        })), L.getVisitCount(t.id).then((e => {
                            e.worldId === t.id && (t.visitCount = e.visitCount)
                        })), L.getTimeSpentInWorld(t.id).then((e => {
                            e.worldId === t.id && (t.timeSpent = e.timeSpent)
                        })), y.getCachedWorld({
                            worldId: a.worldId
                        }).catch((e => {
                            throw t.loading = !1, t.visible = !1, this.$message({
                                message: "월드 로딩에 실패하였습니다.",
                                type: "error"
                            }), e
                        })).then((e => {
                            if (t.id === e.ref.id) {
                                t.loading = !1, t.ref = e.ref, t.isFavorite = y.cachedFavoritesByObjectId.has(t.id);
                                var {
                                    isPC: a,
                                    isQuest: i
                                } = this.getAvailablePlatforms(e.ref.unityPackages);
                                t.isPC = a, t.isQuest = i, this.updateVRChatWorldCache(), e.cache && y.getWorld(e.params).catch((e => {
                                    throw e
                                })).then((e => (t.id === e.ref.id && (t.ref = e.ref, this.updateVRChatWorldCache()), e)))
                            }
                            return e
                        }))
                    }
                }, e.methods.applyWorldDialogInstances = function() {
                    var e = this.worldDialog,
                        t = {};
                    for (var [a, i] of e.ref.instances) t[a] = {
                        id: a,
                        occupants: i,
                        friendCount: 0,
                        users: []
                    };
                    var {
                        instanceId: s
                    } = e.$location;
                    s && void 0 === t[s] && (t[s] = {
                        id: s,
                        occupants: 0,
                        friendCount: 0,
                        users: []
                    });
                    var r = y.parseLocation(this.lastLocation.location),
                        n = this.lastLocation.playerList;
                    if (r.worldId === e.id) {
                        var d = this.lastLocation.friendList;
                        t[(g = {
                            id: r.instanceId,
                            occupants: n.size,
                            friendCount: d.size,
                            users: []
                        }).id] = g;
                        var l = y.cachedUsers.get(y.currentUser.id);
                        for (var c of (void 0 === l && (l = y.currentUser), n.has(l.displayName) && g.users.push(l), d.values())) {
                            for (var u = !0, h = 0; h < g.users.length; h++) {
                                var p = g.users[h];
                                if (c.displayName === p.displayName) {
                                    u = !1;
                                    break
                                }
                            }
                            if (u) void 0 !== (l = y.cachedUsers.get(c.userId)) && g.users.push(l)
                        }
                    }
                    for (var {
                            ref: l
                        } of this.friends.values())
                        if (void 0 !== l && void 0 !== l.$location && l.$location.worldId === e.id && l.$location.instanceId !== r.instanceId) {
                            var {
                                instanceId: s
                            } = l.$location;
                            void 0 === (g = t[s]) && (g = {
                                id: s,
                                occupants: 0,
                                friendCount: 0,
                                users: []
                            }, t[s] = g), g.users.push(l)
                        } var m = [];
                    for (var g of Object.values(t)) {
                        const t = y.parseLocation(`${e.id}:${g.id}`);
                        if (g.location = t.tag, g.$location = t, t.userId) void 0 === (l = y.cachedUsers.get(t.userId)) ? y.getUser({
                            userId: t.userId
                        }).then((e => (o().set(t, "user", e.ref), e))) : t.user = l;
                        0 === g.friendCount && (g.friendCount = g.users.length), g.users.sort(O), m.push(g)
                    }
                    for (var f of m)
                        if (0 === f.occupants)
                            for (var g of e.rooms)
                                if (g.id === f.id) {
                                    f.occupants = g.occupants;
                                    break
                                } m.sort((function(e, t) {
                        return t.users.length - e.users.length || t.occupants - e.occupants
                    })), e.rooms = m
                }, e.methods.worldDialogCommand = function(e) {
                    var t = this.worldDialog;
                    if (!1 !== t.visible) switch (e) {
                        case "Refresh":
                            this.showWorldDialog(t.id);
                            break;
                        case "New Instance":
                            this.showNewInstanceDialog(t.$location.tag);
                            break;
                        case "Add Favorite":
                            this.showFavoriteDialog("world", t.id);
                            break;
                        case "Rename":
                            this.promptRenameWorld(t);
                            break;
                        case "Change Image":
                            this.displayPreviousImages("World", "Change");
                            break;
                        case "Previous Images":
                            this.displayPreviousImages("World", "Display");
                            break;
                        case "Previous Instances":
                            this.showPreviousInstancesWorldDialog(t.ref);
                            break;
                        case "Change Description":
                            this.promptChangeWorldDescription(t);
                            break;
                        case "Change Capacity":
                            this.promptChangeWorldCapacity(t);
                            break;
                        case "Change YouTube Preview":
                            this.promptChangeWorldYouTubePreview(t);
                            break;
                        case "Change Tags":
                            this.showSetWorldTagsDialog();
                            break;
                        case "Download Unity Package":
                            this.openExternalLink(this.worldDialog.ref.unityPackageUrl);
                            break;
                        default:
                            this.$confirm(`${e} 계속 하시겠습니까?`, "계속 하시겠습니까?", {
                                confirmButtonText: "확인",
                                cancelButtonText: "취소",
                                type: "info",
                                callback: a => {
                                    if ("confirm" === a) switch (e) {
                                        case "Delete Favorite":
                                            y.deleteFavorite({
                                                objectId: t.id
                                            });
                                            break;
                                        case "Make Home":
                                            y.saveCurrentUser({
                                                homeLocation: t.id
                                            }).then((e => (this.$message({
                                                message: "홈 월드가 업데이트 되었습니다.",
                                                type: "success"
                                            }), e)));
                                            break;
                                        case "Reset Home":
                                            y.saveCurrentUser({
                                                homeLocation: ""
                                            }).then((e => (this.$message({
                                                message: "홈 월드가 리셋되었습니다.",
                                                type: "success"
                                            }), e)));
                                            break;
                                        case "Publish":
                                            y.publishWorld({
                                                worldId: t.id
                                            }).then((e => (this.$message({
                                                message: "월드가 개시되었습니다. ",
                                                type: "success"
                                            }), e)));
                                            break;
                                        case "Unpublish":
                                            y.unpublishWorld({
                                                worldId: t.id
                                            }).then((e => (this.$message({
                                                message: "월드가 개시 해제 되었습니다.",
                                                type: "success"
                                            }), e)));
                                            break;
                                        case "Delete":
                                            y.deleteWorld({
                                                worldId: t.id
                                            }).then((e => (this.$message({
                                                message: "월드가 삭제되었습니다. ",
                                                type: "success"
                                            }), t.visible = !1, e)))
                                    }
                                }
                            })
                    }
                }, e.methods.refreshWorldDialogTreeData = function() {
                    var e = this.worldDialog;
                    e.treeData = D(e.ref)
                }, e.computed.worldDialogPlatform = function() {
                    var {
                        ref: e
                    } = this.worldDialog, t = [];
                    if (e.unityPackages)
                        for (var a of e.unityPackages) {
                            var i = "PC";
                            "standalonewindows" === a.platform ? i = "PC" : "android" === a.platform ? i = "Quest" : a.platform && ({
                                platform: i
                            } = a), t.push(`${i}/${a.unityVersion}`)
                        }
                    return t.join(", ")
                }, e.data.avatarDialog = {
                    visible: !1,
                    loading: !1,
                    id: "",
                    ref: {},
                    isFavorite: !1,
                    isQuestFallback: !1,
                    treeData: [],
                    fileSize: "",
                    inCache: !1,
                    cacheSize: 0,
                    cacheLocked: !1
                }, y.$on("LOGOUT", (function() {
                    e.avatarDialog.visible = !1
                })), y.$on("FAVORITE", (function(t) {
                    var {
                        ref: a
                    } = t, i = e.avatarDialog;
                    !1 === i.visible || a.$isDeleted || a.favoriteId !== i.id || (i.isFavorite = !0)
                })), y.$on("FAVORITE:@DELETE", (function(t) {
                    var a = e.avatarDialog;
                    !1 !== a.visible && a.id === t.ref.favoriteId && (a.isFavorite = !1)
                })), e.methods.showAvatarDialog = function(e) {
                    this.$nextTick((() => G(this.$refs.avatarDialog.$el)));
                    var t = this.avatarDialog;
                    t.visible = !0, t.loading = !0, t.id = e, t.treeData = [], t.fileSize = "", t.inCache = !1, t.cacheSize = 0, t.cacheLocked = !1, t.isQuestFallback = !1, t.isFavorite = y.cachedFavoritesByObjectId.has(e);
                    var a = y.cachedAvatars.get(e);
                    void 0 === a || (t.ref = a, this.updateVRChatAvatarCache(), "public" === a.releaseStatus || a.authorId === y.currentUser.id) ? y.getAvatar({
                        avatarId: e
                    }).then((e => {
                        var {
                            ref: a
                        } = e;
                        t.ref = a, this.updateVRChatAvatarCache(), a.imageUrl !== y.currentUser.currentAvatarImageUrl || a.assetUrl || (t.ref.assetUrl = y.currentUser.currentAvatarAssetUrl), /quest/.test(a.tags) && (t.isQuestFallback = !0);
                        var i = "";
                        for (let e = a.unityPackages.length - 1; e > -1; e--) {
                            var s = a.unityPackages[e];
                            if ("standalonewindows" === s.platform && this.compareUnityVersion(s.unityVersion)) {
                                i = s.assetUrl;
                                break
                            }
                        }
                        var r = T(i),
                            o = parseInt(S(i), 10);
                        r || (r = T(a.assetUrl), o = parseInt(S(a.assetUrl), 10)), t.fileSize = "", r && (t.fileSize = "Loading", y.getBundles(r).then((e => {
                            var {
                                versions: a
                            } = e.json;
                            for (let e = a.length - 1; e > -1; e--) {
                                var i = a[e];
                                if (i.version === o) {
                                    t.fileSize = `${(i.file.sizeInBytes/1048576).toFixed(2)} MiB`;
                                    break
                                }
                            }
                        })).catch((() => {
                            t.fileSize = "Error"
                        })))
                    })).catch((e => {
                        throw t.loading = !1, t.visible = !1, this.$message({
                            message: "아바타 로딩에 실패하였습니다.",
                            type: "error"
                        }), e
                    })).finally((() => {
                        t.loading = !1
                    })) : t.loading = !1
                }, e.methods.avatarDialogCommand = function(e) {
                    var t = this.avatarDialog;
                    if (!1 !== t.visible) switch (e) {
                        case "Refresh":
                            this.showAvatarDialog(t.id);
                            break;
                        case "Rename":
                            this.promptRenameAvatar(t);
                            break;
                        case "Change Image":
                            this.displayPreviousImages("Avatar", "Change");
                            break;
                        case "Previous Images":
                            this.displayPreviousImages("Avatar", "Display");
                            break;
                        case "Change Description":
                            this.promptChangeAvatarDescription(t);
                            break;
                        case "Download Unity Package":
                            this.openExternalLink(this.avatarDialog.ref.unityPackageUrl);
                            break;
                        case "Add Favorite":
                            this.showFavoriteDialog("avatar", t.id);
                            break;
                        default:
                            this.$confirm(`${e} 계속 하시겠습니까?`, "계속 하시겠습니까?", {
                                confirmButtonText: "확인",
                                cancelButtonText: "취소",
                                type: "info",
                                callback: a => {
                                    if ("confirm" === a) switch (e) {
                                        case "Delete Favorite":
                                            y.deleteFavorite({
                                                objectId: t.id
                                            });
                                            break;
                                        case "Select Avatar":
                                            y.selectAvatar({
                                                avatarId: t.id
                                            }).then((e => (this.$message({
                                                message: "아바타가 변경되었습니다. ",
                                                type: "success"
                                            }), e)));
                                            break;
                                        case "Select Fallback Avatar":
                                            y.selectFallbackAvatar({
                                                avatarId: t.id
                                            }).then((e => (this.$message({
                                                message: "Fallback 아바타가 변경되었습니다. ",
                                                type: "success"
                                            }), e)));
                                            break;
                                        case "Make Public":
                                            y.saveAvatar({
                                                id: t.id,
                                                releaseStatus: "public"
                                            }).then((e => (this.$message({
                                                message: "아바타가 공개(public) 상태로 변경되었습니다. ",
                                                type: "success"
                                            }), e)));
                                            break;
                                        case "Make Private":
                                            y.saveAvatar({
                                                id: t.id,
                                                releaseStatus: "private"
                                            }).then((e => (this.$message({
                                                message: "아바타가 비공개(private) 상태로 변경되었습니다. ",
                                                type: "success"
                                            }), e)));
                                            break;
                                        case "Delete":
                                            y.deleteAvatar({
                                                avatarId: t.id
                                            }).then((e => (this.$message({
                                                message: "아바타가 삭제되었습니다. ",
                                                type: "success"
                                            }), t.visible = !1, e)))
                                    }
                                }
                            })
                    }
                }, e.methods.checkAvatarCache = function(e) {
                    var t = "";
                    for (var a of y.cachedAvatars.values()) T(a.imageUrl) === e && (t = a.id);
                    return t
                }, e.methods.checkAvatarCacheRemote = async function(e, t) {
                    var a = "";
                    if (this.avatarRemoteDatabase) {
                        var i = await this.lookupAvatars("authorId", t);
                        i && "object" == typeof i && i.forEach((t => {
                            T(t.imageUrl) === e && (a = t.id)
                        }))
                    }
                    return a
                }, e.methods.showAvatarAuthorDialog = async function(e, t, a) {
                    var i = T(a);
                    if (i)
                        if (e === y.currentUser.id) this.showAvatarDialog(y.currentUser.currentAvatar);
                        else {
                            var s = await this.checkAvatarCache(i);
                            if (!s) {
                                var r = await this.getAvatarName(a);
                                r.ownerId === y.currentUser.id && this.refreshUserDialogAvatars(i)
                            }
                            s || (s = await this.checkAvatarCacheRemote(i, r.ownerId)), s || (r.ownerId === e ? this.$message({
                                message: "이 아바타는 개인(비공개) 아바타 입니다.",
                                type: "warning"
                            }) : this.showUserDialog(r.ownerId)), s && this.showAvatarDialog(s)
                        }
                    else this.$message({
                        message: "죄송합니다. 제작자를 찾을 수 없습니다.",
                        type: "error"
                    })
                }, e.methods.refreshAvatarDialogTreeData = function() {
                    var e = this.avatarDialog;
                    e.treeData = D(e.ref)
                }, e.computed.avatarDialogPlatform = function() {
                    var {
                        ref: e
                    } = this.avatarDialog, t = [];
                    if (e.unityPackages)
                        for (var a of e.unityPackages) {
                            var i = "PC";
                            "standalonewindows" === a.platform ? i = "PC" : "android" === a.platform ? i = "Quest" : a.platform && ({
                                platform: i
                            } = a), t.push(`${i}/${a.unityVersion}`)
                        }
                    return t.join(", ")
                }, e.data.favoriteDialog = {
                    visible: !1,
                    loading: !1,
                    type: "",
                    objectId: "",
                    groups: []
                }, y.$on("LOGOUT", (function() {
                    e.favoriteDialog.visible = !1
                })), e.methods.addFavorite = function(e) {
                    var t = this.favoriteDialog;
                    t.loading = !0, y.addFavorite({
                        type: t.type,
                        favoriteId: t.objectId,
                        tags: e.name
                    }).finally((() => {
                        t.loading = !1
                    })).then((e => (t.visible = !1, e)))
                }, e.methods.addFavoriteAvatar = function(e, t) {
                    y.addFavorite({
                        type: "avatar",
                        favoriteId: e.id,
                        tags: t.name
                    })
                }, e.methods.moveFavorite = function(e, t, a) {
                    y.deleteFavorite({
                        objectId: e.id
                    }).then((() => {
                        y.addFavorite({
                            type: a,
                            favoriteId: e.id,
                            tags: t.name
                        })
                    }))
                }, e.methods.showFavoriteDialog = function(e, t) {
                    this.$nextTick((() => G(this.$refs.favoriteDialog.$el)));
                    var a = this.favoriteDialog;
                    a.type = e, a.objectId = t, "friend" === e ? (a.groups = y.favoriteFriendGroups, a.visible = !0) : "world" === e ? (a.groups = y.favoriteWorldGroups, a.visible = !0) : "avatar" === e && (a.groups = y.favoriteAvatarGroups, a.visible = !0)
                }, e.data.inviteDialog = {
                    visible: !1,
                    loading: !1,
                    worldId: "",
                    worldName: "",
                    userIds: []
                }, y.$on("LOGOUT", (function() {
                    e.inviteDialog.visible = !1
                })), e.methods.sendInvite = function() {
                    this.$confirm("초대를 보냅니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: e => {
                            var t = this.inviteDialog;
                            if ("confirm" === e && !0 !== t.loading)
                                if ("busy" !== this.API.currentUser.status || !0 !== t.userIds.includes(this.API.currentUser.id)) {
                                    t.loading = !0;
                                    var a = () => {
                                        if (t.userIds.length > 0) {
                                            var e = t.userIds.shift();
                                            y.sendInvite({
                                                instanceId: t.worldId,
                                                worldId: t.worldId,
                                                worldName: t.worldName
                                            }, e).finally(a)
                                        } else t.loading = !1, t.visible = !1, this.$message({
                                            message: "초대를 보냈습니다.",
                                            type: "success"
                                        })
                                    };
                                    a()
                                } else this.$message({
                                    message: "'방해 금지' 모드에서는 스스로에게 초대를 보낼 수 없습니다.",
                                    type: "error"
                                })
                        }
                    })
                }, e.methods.showInviteDialog = function(e) {
                    this.$nextTick((() => G(this.$refs.inviteDialog.$el)));
                    var t = y.parseLocation(e);
                    t.isOffline || t.isPrivate || "" === t.worldId || y.getCachedWorld({
                        worldId: t.worldId
                    }).then((e => {
                        var a = this.inviteDialog;
                        a.userIds = [], a.worldId = t.tag, a.worldName = e.ref.name, a.visible = !0
                    }))
                }, e.data.socialStatusDialog = {
                    visible: !1,
                    loading: !1,
                    status: "",
                    statusDescription: ""
                }, y.$on("LOGOUT", (function() {
                    e.socialStatusDialog.visible = !1
                })), e.methods.saveSocialStatus = function() {
                    var e = this.socialStatusDialog;
                    e.loading || (e.loading = !0, y.saveCurrentUser({
                        status: e.status,
                        statusDescription: e.statusDescription
                    }).finally((() => {
                        e.loading = !1
                    })).then((t => (e.visible = !1, this.$message({
                        message: "상태가 변경되었습니다.",
                        type: "success"
                    }), t))))
                }, e.methods.showSocialStatusDialog = function() {
                    this.$nextTick((() => G(this.$refs.socialStatusDialog.$el)));
                    for (var e = this.socialStatusDialog, {
                            statusHistory: t
                        } = y.currentUser, a = [], i = 0; i < t.length; ++i) {
                        var s = {
                            no: i + 1,
                            status: t[i]
                        };
                        a.push(s)
                    }
                    this.socialStatusHistoryTable.data = a, e.status = y.currentUser.status, e.statusDescription = y.currentUser.statusDescription, e.visible = !0
                }, e.methods.setSocialStatusFromHistory = function(e) {
                    null !== e && (this.socialStatusDialog.statusDescription = e.status)
                }, e.data.languageDialog = {
                    visible: !1,
                    loading: !1,
                    languageChoice: !1,
                    languageValue: "",
                    languages: function() {
                        var e = [];
                        for (var t in f) {
                            var a = f[t];
                            e.push({
                                key: t,
                                value: a
                            })
                        }
                        return e
                    }()
                }, y.$on("LOGOUT", (function() {
                    e.languageDialog.visible = !1
                })), e.methods.addUserLanguage = function(e) {
                    if (e === String(e)) {
                        var t = this.languageDialog;
                        t.loading = !0, y.addUserTags({
                            tags: [`language_${e}`]
                        }).finally((function() {
                            t.loading = !1
                        }))
                    }
                }, e.methods.removeUserLanguage = function(e) {
                    if (e === String(e)) {
                        var t = this.languageDialog;
                        t.loading = !0, y.removeUserTags({
                            tags: [`language_${e}`]
                        }).finally((function() {
                            t.loading = !1
                        }))
                    }
                }, e.methods.showLanguageDialog = function() {
                    this.$nextTick((() => G(this.$refs.languageDialog.$el))), this.languageDialog.visible = !0
                }, e.data.bioDialog = {
                    visible: !1,
                    loading: !1,
                    bio: "",
                    bioLinks: []
                }, y.$on("LOGOUT", (function() {
                    e.bioDialog.visible = !1
                })), e.methods.saveBio = function() {
                    var e = this.bioDialog;
                    e.loading || (e.loading = !0, y.saveCurrentUser({
                        bio: e.bio,
                        bioLinks: e.bioLinks
                    }).finally((() => {
                        e.loading = !1
                    })).then((t => (e.visible = !1, this.$message({
                        message: "소개가 업데이트 되었습니다.",
                        type: "success"
                    }), t))))
                }, e.methods.showBioDialog = function() {
                    this.$nextTick((() => G(this.$refs.bioDialog.$el)));
                    var e = this.bioDialog;
                    e.bio = y.currentUser.bio, e.bioLinks = y.currentUser.bioLinks.slice(), e.visible = !0
                }, e.data.newInstanceDialog = {
                    visible: !1,
                    loading: !1,
                    worldId: "",
                    instanceId: "",
                    instanceName: "",
                    userId: "",
                    accessType: "",
                    region: "",
                    strict: !1,
                    location: "",
                    url: ""
                }, y.$on("LOGOUT", (function() {
                    e.newInstanceDialog.visible = !1
                })), e.methods.buildInstance = function() {
                    var e = this.newInstanceDialog,
                        t = [];
                    e.instanceName ? (e.instanceName = e.instanceName.replace(/[^A-Za-z0-9]/g, ""), t.push(e.instanceName)) : t.push((99999 * Math.random() + 1).toFixed(0)), e.userId || (e.userId = y.currentUser.id);
                    var a = e.userId;
                    "public" !== e.accessType && ("friends+" === e.accessType ? t.push(`~hidden(${a})`) : "friends" === e.accessType ? t.push(`~friends(${a})`) : t.push(`~private(${a})`), "invite+" === e.accessType && t.push("~canRequestInvite")), "US West" === e.region ? t.push("~region(us)") : "US East" === e.region ? t.push("~region(use)") : "Europe" === e.region ? t.push("~region(eu)") : "Japan" === e.region && t.push("~region(jp)"), "public" !== e.accessType && t.push(`~nonce(${(0,h.Z)()})`), "invite" !== e.accessType && "friends" !== e.accessType && (e.strict = !1), e.strict && t.push("~strict"), e.instanceId = t.join("")
                }, e.methods.selfInvite = function(e) {
                    var t = y.parseLocation(e);
                    t.isOffline || t.isPrivate || "" === t.worldId || ("busy" !== y.currentUser.status ? y.selfInvite({
                        instanceId: t.instanceId,
                        worldId: t.worldId
                    }) : this.$message({
                        message: "'방해 금지' 모드에서는 스스로에게 초대를 보낼 수 없습니다.",
                        type: "error"
                    }))
                };
                var x = function() {
                        var t = e.newInstanceDialog;
                        t.instanceId ? t.location = `${t.worldId}:${t.instanceId}` : t.location = t.worldId, t.url = g(t.worldId, t.instanceId)
                    },
                    W = function() {
                        w.setString("instanceDialogAccessType", this.newInstanceDialog.accessType), w.setString("instanceRegion", this.newInstanceDialog.region), w.setString("instanceDialogInstanceName", this.newInstanceDialog.instanceName), this.newInstanceDialog.userId === y.currentUser.id ? w.setString("instanceDialogUserId", "") : w.setString("instanceDialogUserId", this.newInstanceDialog.userId), w.setBool("instanceDialogStrict", this.newInstanceDialog.strict), e.buildInstance(), x()
                    };
                e.watch["newInstanceDialog.worldId"] = x, e.watch["newInstanceDialog.instanceName"] = W, e.watch["newInstanceDialog.accessType"] = W, e.watch["newInstanceDialog.region"] = W, e.watch["newInstanceDialog.userId"] = W, e.watch["newInstanceDialog.strict"] = W, e.methods.showNewInstanceDialog = function(e) {
                    this.$nextTick((() => G(this.$refs.newInstanceDialog.$el)));
                    var t = y.parseLocation(e);
                    if (!t.isOffline && !t.isPrivate && "" !== t.worldId) {
                        var a = this.newInstanceDialog;
                        a.worldId = t.worldId, a.accessType = "public", null !== w.getString("instanceDialogAccessType") && (a.accessType = w.getString("instanceDialogAccessType")), a.region = "US West", null !== w.getString("instanceRegion") && (a.region = w.getString("instanceRegion")), a.instanceName = "", null !== w.getString("instanceDialogInstanceName") && (a.instanceName = w.getString("instanceDialogInstanceName")), a.userId = "", null !== w.getString("instanceDialogUserId") && (a.userId = w.getString("instanceDialogUserId")), a.strict = !1, this.buildInstance(), a.visible = !0
                    }
                }, e.methods.makeHome = function(e) {
                    this.$confirm("이 월드를 홈으로 설정합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && y.saveCurrentUser({
                                homeLocation: e
                            }).then((e => (this.$message({
                                message: "홈 월드가 업데이트 되었습니다.",
                                type: "success"
                            }), e)))
                        }
                    })
                }, e.data.launchArguments = VRCXStorage.Get("launchArguments"), e.data.launchOptionsDialog = {
                    visible: !1,
                    arguments: ""
                }, y.$on("LOGOUT", (function() {
                    e.launchOptionsDialog.visible = !1
                })), e.methods.updateLaunchOptions = function() {
                    var e = this.launchOptionsDialog;
                    e.visible = !1;
                    var t = String(e.arguments).replace(/\s+/g, " ").trim();
                    this.launchArguments = t, VRCXStorage.Set("launchArguments", t), this.$message({
                        message: "업데이트 되었습니다.",
                        type: "success"
                    })
                }, e.methods.showLaunchOptions = function() {
                    this.$nextTick((() => G(this.$refs.launchOptionsDialog.$el)));
                    var e = this.launchOptionsDialog;
                    e.arguments = this.launchArguments, e.visible = !0
                }, e.data.setWorldTagsDialog = {
                    visible: !1,
                    tags: [],
                    debugAllowed: !1
                }, e.methods.showSetWorldTagsDialog = function() {
                    this.$nextTick((() => G(this.$refs.setWorldTagsDialog.$el)));
                    var e = this.setWorldTagsDialog;
                    e.visible = !0;
                    var t = this.worldDialog.ref.tags,
                        a = [];
                    t.forEach((t => {
                        t.includes("author_tag_") && a.unshift(t.substring(11)), "debug_allowed" === t && (e.debugAllowed = !0)
                    })), e.tags = a.toString()
                }, e.methods.saveSetWorldTagsDialog = function() {
                    var t = this.setWorldTagsDialog,
                        a = t.tags.split(","),
                        i = [];
                    a.forEach((e => {
                        e && i.unshift(`author_tag_${e}`)
                    })), t.debugAllowed && i.unshift("debug_allowed"), y.saveWorld({
                        id: e.worldDialog.id,
                        tags: i
                    }).then((e => (this.$message({
                        message: "태그가 업데이트 되었습니다. ",
                        type: "success"
                    }), t.visible = !1, e)))
                }, e.data.notificationPositionDialog = {
                    visible: !1
                }, e.methods.showNotificationPositionDialog = function() {
                    this.$nextTick((() => G(this.$refs.notificationPositionDialog.$el))), this.notificationPositionDialog.visible = !0
                }, e.data.notyFeedFiltersDialog = {
                    visible: !1
                }, e.methods.showNotyFeedFiltersDialog = function() {
                    this.$nextTick((() => G(this.$refs.notyFeedFiltersDialog.$el))), this.notyFeedFiltersDialog.visible = !0
                }, e.data.wristFeedFiltersDialog = {
                    visible: !1
                }, e.methods.showWristFeedFiltersDialog = function() {
                    this.$nextTick((() => G(this.$refs.wristFeedFiltersDialog.$el))), this.wristFeedFiltersDialog.visible = !0
                }, e.data.launchDialog = {
                    visible: !1,
                    loading: !1,
                    desktop: w.getBool("launchAsDesktop"),
                    location: "",
                    url: "",
                    shortUrl: ""
                }, e.watch["launchDialog.desktop"] = function() {
                    w.setBool("launchAsDesktop", this.launchDialog.desktop)
                }, y.$on("LOGOUT", (function() {
                    e.launchDialog.visible = !1
                })), y.$on("INSTANCE:SHORTNAME", (function(t) {
                    var a = `https://vrch.at/${t.json}`;
                    e.launchDialog.shortUrl = a
                })), e.methods.showLaunchDialog = function(e) {
                    this.$nextTick((() => G(this.$refs.launchDialog.$el)));
                    var t = y.parseLocation(e);
                    if (!t.isOffline && !t.isPrivate && "" !== t.worldId) {
                        var a = this.launchDialog;
                        t.instanceId ? a.location = `${t.worldId}:${t.instanceId}` : a.location = t.worldId, a.shortUrl = "", a.url = g(t.worldId, t.instanceId), a.visible = !0, "public" !== t.accessType && t.userId !== y.currentUser.id || y.getInstanceShortName({
                            worldId: t.worldId,
                            instanceId: t.instanceId
                        })
                    }
                }, e.methods.locationToLaunchArg = function(e) {
                    return `vrchat://launch?id=${e}`
                }, e.methods.launchGame = function(...e) {
                    var t = this.launchDialog;
                    this.launchArguments && e.push(this.launchArguments), !0 === t.desktop && e.push("--no-vr"), AppApi.StartGame(e.join(" ")), t.visible = !1
                }, e.methods.copyToClipboard = function(e) {
                    var t = document.createElement("textarea");
                    t.id = "copy_to_clipboard", t.value = e, t.style.top = "0", t.style.left = "0", t.style.position = "fixed", document.body.appendChild(t), t.focus(), t.select(), document.execCommand("copy"), document.getElementById("copy_to_clipboard").remove()
                }, e.methods.copyInstanceUrl = function(e) {
                    this.copyToClipboard(e), this.$message({
                        message: "인스턴스 URL을 클립보드에 복사하였습니다.",
                        type: "success"
                    }), this.launchDialog.visible = !1, this.newInstanceDialog.visible = !1
                }, e.methods.copyLocation = function(e) {
                    var t = y.parseLocation(e),
                        a = g(t.worldId, t.instanceId);
                    this.copyToClipboard(a), this.$message({
                        message: "인스턴스 URL을 클립보드에 복사하였습니다.",
                        type: "success"
                    })
                }, e.methods.copyLocationCheck = function(e) {
                    return "" !== e && "offline" !== e && "private" !== e
                }, e.methods.copyAvatar = function(e) {
                    this.$message({
                        message: "아바타 URL을 클립보드에 복사하였습니다.",
                        type: "success"
                    }), this.copyToClipboard(`https://vrchat.com/home/avatar/${e}`)
                }, e.methods.copyWorld = function(e) {
                    this.$message({
                        message: "월드 URL을 클립보드에 복사하였습니다.",
                        type: "success"
                    }), this.copyToClipboard(`https://vrchat.com/home/world/${e}`)
                }, e.methods.copyUser = function(e) {
                    this.$message({
                        message: "유저 URL을 클립보드에 복사하였습니다.",
                        type: "success"
                    }), this.copyToClipboard(`https://vrchat.com/home/user/${e}`)
                }, e.methods.copyInstanceUrl = function(e) {
                    this.$message({
                        message: "인스턴스 URL을 클립보드에 복사하였습니다.",
                        type: "success"
                    }), this.copyToClipboard(e)
                }, e.methods.copyText = function(e) {
                    this.$message({
                        message: "텍스트를 클립보드에 복사하였습니다.",
                        type: "success"
                    }), this.copyToClipboard(e)
                }, y.$on("LOGIN", (function() {
                    e.VRCPlusIconsTable = []
                })), e.methods.refreshVRCPlusIconsTable = function() {
                    this.galleryDialogIconsLoading = !0;
                    y.getFileList({
                        n: 100,
                        tag: "icon"
                    })
                }, y.getFileList = function(e) {
                    return this.call("files", {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("FILES:LIST", a), a
                    }))
                }, y.$on("FILES:LIST", (function(t) {
                    "icon" === t.params.tag && (e.VRCPlusIconsTable = t.json.reverse(), e.galleryDialogIconsLoading = !1)
                })), e.methods.setVRCPlusIcon = function(e) {
                    y.currentUser.$isVRCPlus || this.$message({
                        message: "VRCPlus가 필요합니다. ",
                        type: "error"
                    });
                    var t = "";
                    e && (t = `${y.endpointDomain}/file/${e}/1`), t !== y.currentUser.userIcon && y.saveCurrentUser({
                        userIcon: t
                    }).then((e => (this.$message({
                        message: "아이콘이 변경되었습니다. ",
                        type: "success"
                    }), e)))
                }, e.methods.deleteVRCPlusIcon = function(e) {
                    y.deleteFile(e).then((e => (y.$emit("VRCPLUSICON:DELETE", e), e)))
                }, y.$on("VRCPLUSICON:DELETE", (function(t) {
                    for (var a = e.VRCPlusIconsTable, {
                            length: i
                        } = a, s = 0; s < i; ++s)
                        if (t.fileId === a[s].id) {
                            a.splice(s, 1);
                            break
                        }
                })), y.deleteFile = function(e) {
                    return this.call(`file/${e}`, {
                        method: "DELETE"
                    }).then((t => ({
                        json: t,
                        fileId: e
                    })))
                }, y.deleteFileVersion = function(e) {
                    return this.call(`file/${e.fileId}/${e.version}`, {
                        method: "DELETE"
                    }).then((t => ({
                        json: t,
                        params: e
                    })))
                }, e.methods.compareCurrentVRCPlusIcon = function(e) {
                    return e === T(y.currentUser.userIcon)
                }, e.methods.onFileChangeVRCPlusIcon = function(t) {
                    var a = function() {
                            document.querySelector("#VRCPlusIconUploadButton") && (document.querySelector("#VRCPlusIconUploadButton").value = "")
                        },
                        i = t.target.files || t.dataTransfer.files;
                    if (i.length) {
                        if (i[0].size >= 1e7) return e.$message({
                            message: "파일의 크기가 너무 큽니다.",
                            type: "error"
                        }), void a();
                        if (!i[0].type.match(/image.*/)) return e.$message({
                            message: "파일이 이미지가 아닙니다.",
                            type: "error"
                        }), void a();
                        var s = new FileReader;
                        s.onload = function() {
                            var t = btoa(s.result);
                            y.uploadVRCPlusIcon(t).then((t => (e.$message({
                                message: "아이콘이 업데이트 되었습니다.",
                                type: "success"
                            }), t)))
                        }, s.readAsBinaryString(i[0]), a()
                    }
                }, e.methods.displayVRCPlusIconUpload = function() {
                    document.getElementById("VRCPlusIconUploadButton").click()
                }, y.uploadVRCPlusIcon = function(e) {
                    return this.call("icon", {
                        uploadImage: !0,
                        imageData: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("VRCPLUSICON:ADD", a), a
                    }))
                }, y.$on("VRCPLUSICON:ADD", (function(t) {
                    0 !== Object.keys(e.VRCPlusIconsTable).length && e.VRCPlusIconsTable.push(t.json)
                })), e.data.uploadImage = "", e.methods.inviteImageUpload = function(t) {
                    var a = t.target.files || t.dataTransfer.files;
                    if (a.length) {
                        if (a[0].size >= 1e7) return e.$message({
                            message: "파일의 크기가 너무 큽니다.",
                            type: "error"
                        }), void this.clearInviteImageUpload();
                        if (!a[0].type.match(/image.png/)) return e.$message({
                            message: "파일이 png 파일이 아닙니다.",
                            type: "error"
                        }), void this.clearInviteImageUpload();
                        var i = new FileReader;
                        i.onload = function() {
                            e.uploadImage = btoa(i.result)
                        }, i.readAsBinaryString(a[0])
                    }
                }, e.methods.clearInviteImageUpload = function() {
                    document.querySelectorAll(".inviteImageUploadButton").forEach((e => e.value = "")), this.uploadImage = ""
                }, e.methods.userOnlineFor = function(e) {
                    return "online" === e.ref.state && e.ref.$online_for ? r(Date.now() - e.ref.$online_for) : e.ref.$offline_for ? r(Date.now() - e.ref.$offline_for) : "-"
                }, y.$on("LOGIN", (function() {
                    e.inviteMessageTable.data = [], e.inviteResponseMessageTable.data = [], e.inviteRequestMessageTable.data = [], e.inviteRequestResponseMessageTable.data = [], e.inviteMessageTable.visible = !1, e.inviteResponseMessageTable.visible = !1, e.inviteRequestMessageTable.visible = !1, e.inviteRequestResponseMessageTable.visible = !1
                })), e.methods.refreshInviteMessageTable = function(e) {
                    y.refreshInviteMessageTableData(e)
                }, y.refreshInviteMessageTableData = function(e) {
                    return this.call(`message/${this.currentUser.id}/${e}`, {
                        method: "GET"
                    }).then((t => {
                        var a = {
                            json: t,
                            messageType: e
                        };
                        return this.$emit(`INVITE:${e.toUpperCase()}`, a), a
                    }))
                }, y.$on("INVITE:MESSAGE", (function(t) {
                    e.inviteMessageTable.data = t.json
                })), y.$on("INVITE:RESPONSE", (function(t) {
                    e.inviteResponseMessageTable.data = t.json
                })), y.$on("INVITE:REQUEST", (function(t) {
                    e.inviteRequestMessageTable.data = t.json
                })), y.$on("INVITE:REQUESTRESPONSE", (function(t) {
                    e.inviteRequestResponseMessageTable.data = t.json
                })), y.editInviteMessage = function(e, t, a) {
                    return this.call(`message/${this.currentUser.id}/${t}/${a}`, {
                        method: "PUT",
                        params: e
                    }).then((i => ({
                        json: i,
                        params: e,
                        messageType: t,
                        slot: a
                    })))
                }, e.data.editInviteMessageDialog = {
                    visible: !1,
                    inviteMessage: {},
                    messageType: "",
                    newMessage: ""
                }, e.methods.showEditInviteMessageDialog = function(e, t) {
                    this.$nextTick((() => G(this.$refs.editInviteMessageDialog.$el)));
                    var a = this.editInviteMessageDialog;
                    a.newMessage = t.message, a.visible = !0, a.inviteMessage = t, a.messageType = e
                }, e.methods.saveEditInviteMessage = function() {
                    var e = this.editInviteMessageDialog;
                    if (e.visible = !1, e.inviteMessage.message !== e.newMessage) {
                        var t = e.inviteMessage.slot,
                            a = e.messageType,
                            i = {
                                message: e.newMessage
                            };
                        y.editInviteMessage(i, a, t).catch((e => {
                            throw e
                        })).then((i => {
                            if (y.$emit(`INVITE:${a.toUpperCase()}`, i), i.json[t].message === e.inviteMessage.message) throw this.$message({
                                message: "VRChat API가 메시지를 업데이트하지 않았습니다. 다시 시도하세요.",
                                type: "error"
                            }), new Error("VRChat API didn't update message, try again");
                            return this.$message("초대 메시지가 업데이트 되었습니다."), i
                        }))
                    }
                }, e.methods.cancelEditInviteMessage = function() {
                    this.editInviteMessageDialog.visible = !1
                }, e.data.editAndSendInviteResponseDialog = {
                    visible: !1,
                    inviteMessage: {},
                    messageType: "",
                    newMessage: ""
                }, e.methods.showEditAndSendInviteResponseDialog = function(e, t) {
                    this.$nextTick((() => G(this.$refs.editAndSendInviteResponseDialog.$el))), this.editAndSendInviteResponseDialog = {
                        newMessage: t.message,
                        visible: !0,
                        messageType: e,
                        inviteMessage: t
                    }
                }, e.methods.saveEditAndSendInviteResponse = async function() {
                    var t = this.editAndSendInviteResponseDialog;
                    t.visible = !1;
                    var a = t.messageType,
                        i = t.inviteMessage.slot;
                    if (t.inviteMessage.message !== t.newMessage) {
                        var s = {
                            message: t.newMessage
                        };
                        await y.editInviteMessage(s, a, i).catch((e => {
                            throw e
                        })).then((e => {
                            if (y.$emit(`INVITE:${a.toUpperCase()}`, e), e.json[i].message === t.inviteMessage.message) throw this.$message({
                                message: "VRChat API가 메시지를 업데이트하지 않았습니다. 다시 시도하세요.",
                                type: "error"
                            }), new Error("VRChat API didn't update message, try again");
                            return this.$message("초대 메시지가 업데이트 되었습니다."), e
                        }))
                    }
                    var r = this.sendInviteResponseDialog;
                    s = {
                        responseSlot: i,
                        rsvp: !0
                    };
                    e.uploadImage ? y.sendInviteResponsePhoto(s, r.invite.id).catch((e => {
                        throw e
                    })).then((e => (y.hideNotification({
                        notificationId: r.invite.id
                    }), this.$message({
                        message: "초대 반응 메시지가 전송되었습니다.",
                        type: "success"
                    }), this.sendInviteResponseDialogVisible = !1, this.sendInviteRequestResponseDialogVisible = !1, e))) : y.sendInviteResponse(s, r.invite.id).catch((e => {
                        throw e
                    })).then((e => (y.hideNotification({
                        notificationId: r.invite.id
                    }), this.$message({
                        message: "초대 반응 메시지가 전송되었습니다.",
                        type: "success"
                    }), this.sendInviteResponseDialogVisible = !1, this.sendInviteRequestResponseDialogVisible = !1, e)))
                }, e.methods.cancelEditAndSendInviteResponse = function() {
                    this.editAndSendInviteResponseDialog.visible = !1
                }, e.data.sendInviteResponseDialog = {
                    message: "",
                    messageSlot: 0,
                    invite: {}
                }, e.data.sendInviteResponseDialogVisible = !1, e.data.sendInviteResponseConfirmDialog = {
                    visible: !1
                }, y.$on("LOGIN", (function() {
                    e.sendInviteResponseDialogVisible = !1, e.sendInviteResponseConfirmDialog.visible = !1
                })), e.methods.showSendInviteResponseDialog = function(e) {
                    this.sendInviteResponseDialog = {
                        invite: e
                    }, y.refreshInviteMessageTableData("response"), this.$nextTick((() => G(this.$refs.sendInviteResponseDialog.$el))), this.clearInviteImageUpload(), this.sendInviteResponseDialogVisible = !0
                }, e.methods.showSendInviteResponseConfirmDialog = function(e) {
                    !0 !== this.editAndSendInviteResponseDialog.visible && null !== e && (this.$nextTick((() => G(this.$refs.sendInviteResponseConfirmDialog.$el))), this.sendInviteResponseConfirmDialog.visible = !0, this.sendInviteResponseDialog.messageSlot = e.slot)
                }, e.methods.cancelSendInviteResponse = function() {
                    this.sendInviteResponseDialogVisible = !1
                }, e.methods.cancelInviteResponseConfirm = function() {
                    this.sendInviteResponseConfirmDialog.visible = !1
                }, e.methods.sendInviteResponseConfirm = function() {
                    var t = this.sendInviteResponseDialog,
                        a = {
                            responseSlot: t.messageSlot,
                            rsvp: !0
                        };
                    e.uploadImage ? y.sendInviteResponsePhoto(a, t.invite.id, t.messageType).catch((e => {
                        throw e
                    })).then((e => (y.hideNotification({
                        notificationId: t.invite.id
                    }), this.$message({
                        message: "초대 반응 사진 메시지가 전송되었습니다.",
                        type: "success"
                    }), e))) : y.sendInviteResponse(a, t.invite.id, t.messageType).catch((e => {
                        throw e
                    })).then((e => (y.hideNotification({
                        notificationId: t.invite.id
                    }), this.$message({
                        message: "초대 반응 메시지가 전송되었습니다.",
                        type: "success"
                    }), e))), this.sendInviteResponseDialogVisible = !1, this.sendInviteRequestResponseDialogVisible = !1, this.sendInviteResponseConfirmDialog.visible = !1
                }, e.data.sendInviteRequestResponseDialogVisible = !1, e.methods.cancelSendInviteRequestResponse = function() {
                    this.sendInviteRequestResponseDialogVisible = !1
                }, y.$on("LOGIN", (function() {
                    e.sendInviteRequestResponseDialogVisible = !1, e.showSendInviteResponseConfirmDialog.visible = !1
                })), e.methods.showSendInviteRequestResponseDialog = function(e) {
                    this.sendInviteResponseDialog = {
                        invite: e
                    }, y.refreshInviteMessageTableData("requestResponse"), this.$nextTick((() => G(this.$refs.sendInviteRequestResponseDialog.$el))), this.clearInviteImageUpload(), this.sendInviteRequestResponseDialogVisible = !0
                }, e.data.editAndSendInviteDialog = {
                    visible: !1,
                    messageType: "",
                    newMessage: "",
                    inviteMessage: {}
                }, e.methods.showEditAndSendInviteDialog = function(e, t) {
                    this.$nextTick((() => G(this.$refs.editAndSendInviteDialog.$el))), this.editAndSendInviteDialog = {
                        newMessage: t.message,
                        visible: !0,
                        messageType: e,
                        inviteMessage: t
                    }
                }, e.methods.saveEditAndSendInvite = async function() {
                    var t = this.editAndSendInviteDialog;
                    t.visible = !1;
                    var a = t.messageType,
                        i = t.inviteMessage.slot;
                    if (t.inviteMessage.message !== t.newMessage) {
                        var s = {
                            message: t.newMessage
                        };
                        await y.editInviteMessage(s, a, i).catch((e => {
                            throw e
                        })).then((e => {
                            if (y.$emit(`INVITE:${a.toUpperCase()}`, e), e.json[i].message === t.inviteMessage.message) throw this.$message({
                                message: "VRChat API가 메시지를 업데이트하지 않았습니다. 다시 시도하세요.",
                                type: "error"
                            }), new Error("VRChat API didn't update message, try again");
                            return this.$message("초대 메시지가 업데이트 되었습니다."), e
                        }))
                    }
                    var r = this.sendInviteDialog,
                        o = this.inviteDialog;
                    if (o.visible) {
                        if ("busy" === this.API.currentUser.status && !0 === o.userIds.includes(this.API.currentUser.id)) return void this.$message({
                            message: "'방해 금지' 모드에서는 스스로에게 초대를 보낼 수 없습니다. ",
                            type: "error"
                        });
                        var n = () => {
                            if (o.userIds.length > 0) {
                                var t = o.userIds.shift();
                                e.uploadImage ? y.sendInvitePhoto({
                                    instanceId: o.worldId,
                                    worldId: o.worldId,
                                    worldName: o.worldName,
                                    messageSlot: i
                                }, t).finally(n) : y.sendInvite({
                                    instanceId: o.worldId,
                                    worldId: o.worldId,
                                    worldName: o.worldName,
                                    messageSlot: i
                                }, t).finally(n)
                            } else o.loading = !1, o.visible = !1, this.$message({
                                message: "초대 메시지가 전송되었습니다.",
                                type: "success"
                            })
                        };
                        n()
                    } else "invite" === r.messageType ? (r.params.messageSlot = i, e.uploadImage ? y.sendInvitePhoto(r.params, r.userId).catch((e => {
                        throw e
                    })).then((e => (this.$message({
                        message: "초대 사진 메시지가 전송되었습니다.",
                        type: "success"
                    }), e))) : y.sendInvite(r.params, r.userId).catch((e => {
                        throw e
                    })).then((e => (this.$message({
                        message: "초대 메시지가 전송되었습니다.",
                        type: "success"
                    }), e)))) : "requestInvite" === r.messageType && (r.params.requestSlot = i, e.uploadImage ? y.sendRequestInvitePhoto(r.params, r.userId).catch((e => {
                        throw this.clearInviteImageUpload(), e
                    })).then((e => (this.$message({
                        message: "초대 요청 사진 메시지가 전송되었습니다.",
                        type: "success"
                    }), e))) : y.sendRequestInvite(r.params, r.userId).catch((e => {
                        throw e
                    })).then((e => (this.$message({
                        message: "초대 요청 메시지가 전송되었습니다.",
                        type: "success"
                    }), e))));
                    this.sendInviteDialogVisible = !1, this.sendInviteRequestDialogVisible = !1
                }, e.methods.cancelEditAndSendInvite = function() {
                    this.editAndSendInviteDialog.visible = !1
                }, e.data.sendInviteDialog = {
                    message: "",
                    messageSlot: 0,
                    userId: "",
                    messageType: "",
                    params: {}
                }, e.data.sendInviteDialogVisible = !1, e.data.sendInviteConfirmDialog = {
                    visible: !1
                }, y.$on("LOGIN", (function() {
                    e.sendInviteDialogVisible = !1, e.sendInviteConfirmDialog.visible = !1
                })), e.methods.showSendInviteDialog = function(e, t) {
                    this.sendInviteDialog = {
                        params: e,
                        userId: t,
                        messageType: "invite"
                    }, y.refreshInviteMessageTableData("message"), this.$nextTick((() => G(this.$refs.sendInviteDialog.$el))), this.clearInviteImageUpload(), this.sendInviteDialogVisible = !0
                }, e.methods.showSendInviteConfirmDialog = function(e) {
                    !0 !== this.editAndSendInviteDialog.visible && null !== e && (this.$nextTick((() => G(this.$refs.sendInviteConfirmDialog.$el))), this.sendInviteConfirmDialog.visible = !0, this.sendInviteDialog.messageSlot = e.slot)
                }, e.methods.cancelSendInvite = function() {
                    this.sendInviteDialogVisible = !1
                }, e.methods.cancelInviteConfirm = function() {
                    this.sendInviteConfirmDialog.visible = !1
                }, e.methods.sendInviteConfirm = function() {
                    var t = this.sendInviteDialog,
                        a = this.inviteDialog;
                    if (a.visible) {
                        if ("busy" === this.API.currentUser.status && !0 === a.userIds.includes(this.API.currentUser.id)) return void this.$message({
                            message: "'방해 금지' 모드에서는 스스로에게 초대를 보낼 수 없습니다.",
                            type: "error"
                        });
                        var i = () => {
                            if (a.userIds.length > 0) {
                                var s = a.userIds.shift();
                                e.uploadImage ? y.sendInvitePhoto({
                                    instanceId: a.worldId,
                                    worldId: a.worldId,
                                    worldName: a.worldName,
                                    messageSlot: t.messageSlot
                                }, s).finally(i) : y.sendInvite({
                                    instanceId: a.worldId,
                                    worldId: a.worldId,
                                    worldName: a.worldName,
                                    messageSlot: t.messageSlot
                                }, s).finally(i)
                            } else a.loading = !1, a.visible = !1, this.$message({
                                message: "초대 메시지가 전송되었습니다.",
                                type: "success"
                            })
                        };
                        i()
                    } else "invite" === t.messageType ? (t.params.messageSlot = t.messageSlot, e.uploadImage ? y.sendInvitePhoto(t.params, t.userId).catch((e => {
                        throw e
                    })).then((e => (this.$message({
                        message: "초대 사진 메시지가 전송되었습니다.",
                        type: "success"
                    }), e))) : y.sendInvite(t.params, t.userId).catch((e => {
                        throw e
                    })).then((e => (this.$message({
                        message: "초대 메시지가 전송되었습니다.",
                        type: "success"
                    }), e)))) : "requestInvite" === t.messageType && (t.params.requestSlot = t.messageSlot, e.uploadImage ? y.sendRequestInvitePhoto(t.params, t.userId).catch((e => {
                        throw this.clearInviteImageUpload(), e
                    })).then((e => (this.$message({
                        message: "초대 요청 사진 메시지가 전송되었습니다.",
                        type: "success"
                    }), e))) : y.sendRequestInvite(t.params, t.userId).catch((e => {
                        throw e
                    })).then((e => (this.$message({
                        message: "초대 요청 메시지가 전송되었습니다.",
                        type: "success"
                    }), e))));
                    this.sendInviteDialogVisible = !1, this.sendInviteRequestDialogVisible = !1, this.sendInviteConfirmDialog.visible = !1
                }, e.data.sendInviteRequestDialogVisible = !1, e.methods.cancelSendInviteRequest = function() {
                    this.sendInviteRequestDialogVisible = !1
                }, y.$on("LOGIN", (function() {
                    e.sendInviteRequestDialogVisible = !1, e.showSendInviteConfirmDialog.visible = !1
                })), e.methods.showSendInviteRequestDialog = function(e, t) {
                    this.sendInviteDialog = {
                        params: e,
                        userId: t,
                        messageType: "requestInvite"
                    }, y.refreshInviteMessageTableData("request"), this.$nextTick((() => G(this.$refs.sendInviteRequestDialog.$el))), this.clearInviteImageUpload(), this.sendInviteRequestDialogVisible = !0
                }, y.$on("LOGIN", (function() {
                    e.friendsListTable.data = []
                })), e.methods.selectFriendsListRow = function(e) {
                    null !== e && (e.id ? this.showUserDialog(e.id) : this.lookupUser(e))
                }, e.data.friendsListSearch = "", e.data.friendsListSearchFilterVIP = !1, e.data.friendsListSearchFilters = [], e.methods.friendsListSearchChange = function() {
                    var e = [...this.friendsListSearchFilters];
                    0 === e.length && (e = ["Display Name", "User Name", "Rank", "Status", "Bio", "Memo"]);
                    var t = [];
                    if (this.friendsListSearch) var a = this.friendsListSearch.toUpperCase();
                    for (var i of this.friends.values())
                        if (void 0 !== i.ref && (!this.friendsListSearchFilterVIP || i.isVIP)) {
                            if (a && e) {
                                var s = !1;
                                if (!s && e.includes("User Name")) {
                                    var r = String(i.ref.username);
                                    s = r.toUpperCase().includes(a) && !r.startsWith("steam_")
                                }
                                if (!s && e.includes("Display Name") && i.ref.displayName && (s = String(i.ref.displayName).toUpperCase().includes(a)), !s && e.includes("Memo") && i.memo && (s = String(i.memo).toUpperCase().includes(a)), !s && e.includes("Bio") && i.ref.bio && (s = String(i.ref.bio).toUpperCase().includes(a)), !s && e.includes("Status") && i.ref.statusDescription && (s = String(i.ref.statusDescription).toUpperCase().includes(a)), !s && e.includes("Rank") && i.ref.$friendNum && (s = String(i.ref.$trustLevel).toUpperCase().includes(a)), !s) continue
                            }
                            var o = !1;
                            this.lastLocation.playerList.has(i.ref.displayName) && (o = !0), this.getUserStats(i.ref, o), i.ref.$friendNum = i.no, t.push(i.ref)
                        } this.friendsListTable.data = t
                }, e.methods.getUserStats = async function(e) {
                    var t = await L.getUserStats(e);
                    e.$joinCount = t.joinCount, e.$lastSeen = t.created_at, e.$timeSpent = t.timeSpent
                }, e.watch.friendsListSearch = e.methods.friendsListSearchChange, e.data.friendsListLoading = !1, e.data.friendsListLoadingProgress = "", e.methods.friendsListLoadUsers = async function() {
                    this.friendsListLoading = !0;
                    var e = 0,
                        t = [];
                    for (var a of this.friends.values()) a.ref && !a.ref.date_joined && t.push(a.id);
                    var i = t.length;
                    for (var s of t) {
                        if (!this.friendsListLoading) return void(this.friendsListLoadingProgress = "");
                        e++, this.friendsListLoadingProgress = `${e}/${i}`, await y.getUser({
                            userId: s
                        }), await new Promise((e => {
                            setTimeout(e, 1e3)
                        }))
                    }
                    this.friendsListLoadingProgress = "", this.friendsListLoading = !1
                }, e.methods.sortAlphabetically = function(e, t, a) {
                    return e[a].toLowerCase().localeCompare(t[a].toLowerCase())
                }, e.methods.sortLanguages = function(e, t) {
                    var a = [],
                        i = [];
                    return e.$languages.forEach((e => {
                        a.push(e.value)
                    })), t.$languages.forEach((e => {
                        i.push(e.value)
                    })), a.sort(), i.sort(), JSON.stringify(a).localeCompare(JSON.stringify(i))
                }, e.methods.genMd5 = async function(e) {
                    return await AppApi.MD5File(e)
                }, e.methods.genSig = async function(e) {
                    return await AppApi.SignFile(e)
                }, e.methods.genLength = async function(e) {
                    return await AppApi.FileLength(e)
                }, e.methods.onFileChangeAvatarImage = function(t) {
                    var a = function() {
                            document.querySelector("#AvatarImageUploadButton") && (document.querySelector("#AvatarImageUploadButton").value = "")
                        },
                        i = t.target.files || t.dataTransfer.files;
                    if (i.length && this.avatarDialog.visible && !this.avatarDialog.loading) {
                        if (i[0].size >= 1e7) return e.$message({
                            message: "파일 크기가 너무 큽니다.",
                            type: "error"
                        }), void a();
                        if (!i[0].type.match(/image.png/)) return e.$message({
                            message: "파일이 png가 아닙니다.",
                            type: "error"
                        }), void a();
                        this.avatarDialog.loading = !0, this.changeAvatarImageDialogLoading = !0;
                        var s = new FileReader;
                        s.onload = async function(t) {
                            var i = btoa(s.result),
                                r = await e.genMd5(i),
                                o = t.total,
                                n = await e.genSig(i),
                                d = await e.genMd5(n),
                                l = await e.genLength(n),
                                c = e.avatarDialog.id,
                                {
                                    imageUrl: u
                                } = e.avatarDialog.ref,
                                h = T(u);
                            if (!h) return e.$message({
                                message: "현재 아바타 이미지가 유효하지 않습니다.",
                                type: "error"
                            }), void a();
                            e.avatarImage = {
                                base64File: i,
                                fileMd5: r,
                                base64SignatureFile: n,
                                signatureMd5: d,
                                fileId: h,
                                avatarId: c
                            };
                            var p = {
                                fileMd5: r,
                                fileSizeInBytes: o,
                                signatureMd5: d,
                                signatureSizeInBytes: l
                            };
                            y.uploadAvatarImage(p, h)
                        }, s.readAsBinaryString(i[0]), a()
                    } else a()
                }, y.uploadAvatarImage = async function(e, t) {
                    try {
                        return await this.call(`file/${t}`, {
                            method: "POST",
                            params: e
                        }).then((a => {
                            var i = {
                                json: a,
                                params: e,
                                fileId: t
                            };
                            return this.$emit("AVATARIMAGE:INIT", i), i
                        }))
                    } catch (e) {
                        console.error(e), this.uploadAvatarFailCleanup(t)
                    }
                }, y.uploadAvatarFailCleanup = async function(t) {
                    var a = await this.call(`file/${t}`, {
                            method: "GET"
                        }),
                        i = (t = a.id, a.versions[a.versions.length - 1].version);
                    this.call(`file/${t}/${i}/signature/finish`, {
                        method: "PUT"
                    }), this.call(`file/${t}/${i}/file/finish`, {
                        method: "PUT"
                    }), e.avatarDialog.loading = !1, e.changeAvatarImageDialogLoading = !1
                }, y.$on("AVATARIMAGE:INIT", (function(e) {
                    var t = {
                        fileId: e.json.id,
                        fileVersion: e.json.versions[e.json.versions.length - 1].version
                    };
                    this.uploadAvatarImageFileStart(t)
                })), y.uploadAvatarImageFileStart = async function(e) {
                    try {
                        return await this.call(`file/${e.fileId}/${e.fileVersion}/file/start`, {
                            method: "PUT"
                        }).then((t => {
                            var a = {
                                json: t,
                                params: e
                            };
                            return this.$emit("AVATARIMAGE:FILESTART", a), a
                        }))
                    } catch (t) {
                        console.error(t), this.uploadAvatarFailCleanup(e.fileId)
                    }
                }, y.$on("AVATARIMAGE:FILESTART", (function(e) {
                    var {
                        url: t
                    } = e.json, {
                        fileId: a,
                        fileVersion: i
                    } = e.params, s = {
                        url: t,
                        fileId: a,
                        fileVersion: i
                    };
                    this.uploadAvatarImageFileAWS(s)
                })), y.uploadAvatarImageFileAWS = function(t) {
                    return C.execute({
                        url: t.url,
                        uploadFilePUT: !0,
                        fileData: e.avatarImage.base64File,
                        fileMIME: "image/png",
                        headers: {
                            "Content-MD5": e.avatarImage.fileMd5
                        }
                    }).then((a => {
                        200 !== a.status && (e.avatarDialog.loading = !1, e.changeAvatarImageDialogLoading = !1, this.$throw("Avatar image upload failed", a));
                        var i = {
                            json: a,
                            params: t
                        };
                        return this.$emit("AVATARIMAGE:FILEAWS", i), i
                    }))
                }, y.$on("AVATARIMAGE:FILEAWS", (function(e) {
                    var {
                        fileId: t,
                        fileVersion: a
                    } = e.params, i = {
                        fileId: t,
                        fileVersion: a
                    };
                    this.uploadAvatarImageFileFinish(i)
                })), y.uploadAvatarImageFileFinish = function(e) {
                    return this.call(`file/${e.fileId}/${e.fileVersion}/file/finish`, {
                        method: "PUT",
                        params: {
                            maxParts: 0,
                            nextPartNumber: 0
                        }
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATARIMAGE:FILEFINISH", a), a
                    }))
                }, y.$on("AVATARIMAGE:FILEFINISH", (function(e) {
                    var {
                        fileId: t,
                        fileVersion: a
                    } = e.params, i = {
                        fileId: t,
                        fileVersion: a
                    };
                    this.uploadAvatarImageSigStart(i)
                })), y.uploadAvatarImageSigStart = async function(e) {
                    try {
                        return await this.call(`file/${e.fileId}/${e.fileVersion}/signature/start`, {
                            method: "PUT"
                        }).then((t => {
                            var a = {
                                json: t,
                                params: e
                            };
                            return this.$emit("AVATARIMAGE:SIGSTART", a), a
                        }))
                    } catch (t) {
                        console.error(t), this.uploadAvatarFailCleanup(e.fileId)
                    }
                }, y.$on("AVATARIMAGE:SIGSTART", (function(e) {
                    var {
                        url: t
                    } = e.json, {
                        fileId: a,
                        fileVersion: i
                    } = e.params, s = {
                        url: t,
                        fileId: a,
                        fileVersion: i
                    };
                    this.uploadAvatarImageSigAWS(s)
                })), y.uploadAvatarImageSigAWS = function(t) {
                    return C.execute({
                        url: t.url,
                        uploadFilePUT: !0,
                        fileData: e.avatarImage.base64SignatureFile,
                        fileMIME: "application/x-rsync-signature",
                        headers: {
                            "Content-MD5": e.avatarImage.signatureMd5
                        }
                    }).then((a => {
                        200 !== a.status && (e.avatarDialog.loading = !1, e.changeAvatarImageDialogLoading = !1, this.$throw("Avatar image upload failed", a));
                        var i = {
                            json: a,
                            params: t
                        };
                        return this.$emit("AVATARIMAGE:SIGAWS", i), i
                    }))
                }, y.$on("AVATARIMAGE:SIGAWS", (function(e) {
                    var {
                        fileId: t,
                        fileVersion: a
                    } = e.params, i = {
                        fileId: t,
                        fileVersion: a
                    };
                    this.uploadAvatarImageSigFinish(i)
                })), y.uploadAvatarImageSigFinish = function(e) {
                    return this.call(`file/${e.fileId}/${e.fileVersion}/signature/finish`, {
                        method: "PUT",
                        params: {
                            maxParts: 0,
                            nextPartNumber: 0
                        }
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATARIMAGE:SIGFINISH", a), a
                    }))
                }, y.$on("AVATARIMAGE:SIGFINISH", (function(t) {
                    var {
                        fileId: a,
                        fileVersion: i
                    } = t.params, s = {
                        id: e.avatarImage.avatarId,
                        imageUrl: `${y.endpointDomain}/file/${a}/${i}/file`
                    };
                    this.setAvatarImage(s)
                })), y.setAvatarImage = function(e) {
                    return this.call(`avatars/${e.id}`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATARIMAGE:SET", a), this.$emit("AVATAR", a), a
                    }))
                }, e.methods.onFileChangeWorldImage = function(t) {
                    var a = function() {
                            document.querySelector("#WorldImageUploadButton") && (document.querySelector("#WorldImageUploadButton").value = "")
                        },
                        i = t.target.files || t.dataTransfer.files;
                    if (i.length && this.worldDialog.visible && !this.worldDialog.loading) {
                        if (i[0].size >= 1e7) return e.$message({
                            message: "파일 크기가 너무 큽니다.",
                            type: "error"
                        }), void a();
                        if (!i[0].type.match(/image.png/)) return e.$message({
                            message: "파일이 png가 아닙니다.",
                            type: "error"
                        }), void a();
                        this.worldDialog.loading = !0, this.changeWorldImageDialogLoading = !0;
                        var s = new FileReader;
                        s.onload = async function(t) {
                            var i = btoa(s.result),
                                r = await e.genMd5(i),
                                o = t.total,
                                n = await e.genSig(i),
                                d = await e.genMd5(n),
                                l = await e.genLength(n),
                                c = e.worldDialog.id,
                                {
                                    imageUrl: u
                                } = e.worldDialog.ref,
                                h = T(u);
                            if (!h) return e.$message({
                                message: "현재 월드 이미지가 유효하지 않습니다.",
                                type: "error"
                            }), void a();
                            e.worldImage = {
                                base64File: i,
                                fileMd5: r,
                                base64SignatureFile: n,
                                signatureMd5: d,
                                fileId: h,
                                worldId: c
                            };
                            var p = {
                                fileMd5: r,
                                fileSizeInBytes: o,
                                signatureMd5: d,
                                signatureSizeInBytes: l
                            };
                            y.uploadWorldImage(p, h)
                        }, s.readAsBinaryString(i[0]), a()
                    } else a()
                }, y.uploadWorldImage = async function(e, t) {
                    try {
                        return await this.call(`file/${t}`, {
                            method: "POST",
                            params: e
                        }).then((a => {
                            var i = {
                                json: a,
                                params: e,
                                fileId: t
                            };
                            return this.$emit("WORLDIMAGE:INIT", i), i
                        }))
                    } catch (e) {
                        console.error(e), this.uploadWorldFailCleanup(t)
                    }
                }, y.uploadWorldFailCleanup = async function(t) {
                    var a = await this.call(`file/${t}`, {
                            method: "GET"
                        }),
                        i = (t = a.id, a.versions[a.versions.length - 1].version);
                    this.call(`file/${t}/${i}/signature/finish`, {
                        method: "PUT"
                    }), this.call(`file/${t}/${i}/file/finish`, {
                        method: "PUT"
                    }), e.worldDialog.loading = !1, e.changeWorldImageDialogLoading = !1
                }, y.$on("WORLDIMAGE:INIT", (function(e) {
                    var t = {
                        fileId: e.json.id,
                        fileVersion: e.json.versions[e.json.versions.length - 1].version
                    };
                    this.uploadWorldImageFileStart(t)
                })), y.uploadWorldImageFileStart = async function(e) {
                    try {
                        return await this.call(`file/${e.fileId}/${e.fileVersion}/file/start`, {
                            method: "PUT"
                        }).then((t => {
                            var a = {
                                json: t,
                                params: e
                            };
                            return this.$emit("WORLDIMAGE:FILESTART", a), a
                        }))
                    } catch (t) {
                        console.error(t), this.uploadWorldFailCleanup(e.fileId)
                    }
                }, y.$on("WORLDIMAGE:FILESTART", (function(e) {
                    var {
                        url: t
                    } = e.json, {
                        fileId: a,
                        fileVersion: i
                    } = e.params, s = {
                        url: t,
                        fileId: a,
                        fileVersion: i
                    };
                    this.uploadWorldImageFileAWS(s)
                })), y.uploadWorldImageFileAWS = function(t) {
                    return C.execute({
                        url: t.url,
                        uploadFilePUT: !0,
                        fileData: e.worldImage.base64File,
                        fileMIME: "image/png",
                        headers: {
                            "Content-MD5": e.worldImage.fileMd5
                        }
                    }).then((a => {
                        200 !== a.status && (e.worldDialog.loading = !1, e.changeWorldImageDialogLoading = !1, this.$throw("World image upload failed", a));
                        var i = {
                            json: a,
                            params: t
                        };
                        return this.$emit("WORLDIMAGE:FILEAWS", i), i
                    }))
                }, y.$on("WORLDIMAGE:FILEAWS", (function(e) {
                    var {
                        fileId: t,
                        fileVersion: a
                    } = e.params, i = {
                        fileId: t,
                        fileVersion: a
                    };
                    this.uploadWorldImageFileFinish(i)
                })), y.uploadWorldImageFileFinish = function(e) {
                    return this.call(`file/${e.fileId}/${e.fileVersion}/file/finish`, {
                        method: "PUT",
                        params: {
                            maxParts: 0,
                            nextPartNumber: 0
                        }
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLDIMAGE:FILEFINISH", a), a
                    }))
                }, y.$on("WORLDIMAGE:FILEFINISH", (function(e) {
                    var {
                        fileId: t,
                        fileVersion: a
                    } = e.params, i = {
                        fileId: t,
                        fileVersion: a
                    };
                    this.uploadWorldImageSigStart(i)
                })), y.uploadWorldImageSigStart = async function(e) {
                    try {
                        return await this.call(`file/${e.fileId}/${e.fileVersion}/signature/start`, {
                            method: "PUT"
                        }).then((t => {
                            var a = {
                                json: t,
                                params: e
                            };
                            return this.$emit("WORLDIMAGE:SIGSTART", a), a
                        }))
                    } catch (t) {
                        console.error(t), this.uploadWorldFailCleanup(e.fileId)
                    }
                }, y.$on("WORLDIMAGE:SIGSTART", (function(e) {
                    var {
                        url: t
                    } = e.json, {
                        fileId: a,
                        fileVersion: i
                    } = e.params, s = {
                        url: t,
                        fileId: a,
                        fileVersion: i
                    };
                    this.uploadWorldImageSigAWS(s)
                })), y.uploadWorldImageSigAWS = function(t) {
                    return C.execute({
                        url: t.url,
                        uploadFilePUT: !0,
                        fileData: e.worldImage.base64SignatureFile,
                        fileMIME: "application/x-rsync-signature",
                        headers: {
                            "Content-MD5": e.worldImage.signatureMd5
                        }
                    }).then((a => {
                        200 !== a.status && (e.worldDialog.loading = !1, e.changeWorldImageDialogLoading = !1, this.$throw("World image upload failed", a));
                        var i = {
                            json: a,
                            params: t
                        };
                        return this.$emit("WORLDIMAGE:SIGAWS", i), i
                    }))
                }, y.$on("WORLDIMAGE:SIGAWS", (function(e) {
                    var {
                        fileId: t,
                        fileVersion: a
                    } = e.params, i = {
                        fileId: t,
                        fileVersion: a
                    };
                    this.uploadWorldImageSigFinish(i)
                })), y.uploadWorldImageSigFinish = function(e) {
                    return this.call(`file/${e.fileId}/${e.fileVersion}/signature/finish`, {
                        method: "PUT",
                        params: {
                            maxParts: 0,
                            nextPartNumber: 0
                        }
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLDIMAGE:SIGFINISH", a), a
                    }))
                }, y.$on("WORLDIMAGE:SIGFINISH", (function(t) {
                    var {
                        fileId: a,
                        fileVersion: i
                    } = t.params, s = {
                        id: e.worldImage.worldId,
                        imageUrl: `${y.endpointDomain}/file/${a}/${i}/file`
                    };
                    this.setWorldImage(s)
                })), y.setWorldImage = function(e) {
                    return this.call(`worlds/${e.id}`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLDIMAGE:SET", a), this.$emit("WORLD", a), a
                    }))
                }, y.$on("AVATARIMAGE:SET", (function(t) {
                    e.avatarDialog.loading = !1, e.changeAvatarImageDialogLoading = !1, t.json.imageUrl === t.params.imageUrl ? (e.$message({
                        message: "아바타 이미지가 변경되었습니다.",
                        type: "success"
                    }), e.displayPreviousImages("Avatar", "Change")) : this.$throw(0, "Avatar image change failed")
                })), y.setWorldImage = function(e) {
                    return this.call(`worlds/${e.id}`, {
                        method: "PUT",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLDIMAGE:SET", a), this.$emit("WORLD", a), a
                    }))
                }, y.$on("WORLDIMAGE:SET", (function(t) {
                    e.worldDialog.loading = !1, e.changeWorldImageDialogLoading = !1, t.json.imageUrl === t.params.imageUrl ? (e.$message({
                        message: "월드 이미지가 변경되었습니다.",
                        type: "success"
                    }), e.displayPreviousImages("World", "Change")) : this.$throw(0, "World image change failed")
                })), e.methods.displayPreviousImages = function(e, t) {
                    this.previousImagesTableFileId = "", this.previousImagesTable = [];
                    var a = "";
                    if ("Avatar" === e) var {
                        imageUrl: a
                    } = this.avatarDialog.ref;
                    else if ("World" === e) var {
                        imageUrl: a
                    } = this.worldDialog.ref;
                    else "User" === e && (a = this.userDialog.ref.currentAvatarImageUrl);
                    var i = T(a);
                    if (i) {
                        var s = {
                            fileId: i
                        };
                        "Display" === t && (this.previousImagesDialogVisible = !0, this.$nextTick((() => G(this.$refs.previousImagesDialog.$el)))), "Avatar" === e ? ("Change" === t && (this.changeAvatarImageDialogVisible = !0, this.$nextTick((() => G(this.$refs.changeAvatarImageDialog.$el)))), y.getAvatarImages(s).then((e => {
                            this.previousImagesTableFileId = e.json.id;
                            var t = [];
                            e.json.versions.forEach((e => {
                                e.deleted || t.unshift(e)
                            })), this.checkPreviousImageAvailable(t)
                        }))) : "World" === e ? ("Change" === t && (this.changeWorldImageDialogVisible = !0, this.$nextTick((() => G(this.$refs.changeWorldImageDialog.$el)))), y.getWorldImages(s).then((e => {
                            this.previousImagesTableFileId = e.json.id;
                            var t = [];
                            e.json.versions.forEach((e => {
                                e.deleted || t.unshift(e)
                            })), this.checkPreviousImageAvailable(t)
                        }))) : "User" === e && y.getAvatarImages(s).then((e => {
                            this.previousImagesTableFileId = e.json.id;
                            var t = [];
                            e.json.versions.forEach((e => {
                                e.deleted || t.unshift(e)
                            })), this.checkPreviousImageAvailable(t)
                        }))
                    }
                }, e.methods.checkPreviousImageAvailable = async function(e) {
                    for (var t of (this.previousImagesTable = [], e)) {
                        if (t.file && t.file.url) 200 === (await fetch(t.file.url, {
                            method: "HEAD",
                            redirect: "follow"
                        }).catch((e => {
                            console.log(e)
                        }))).status && this.previousImagesTable.push(t)
                    }
                }, e.data.previousImagesDialogVisible = !1, e.data.changeAvatarImageDialogVisible = !1, e.data.changeAvatarImageDialogLoading = !1, e.data.changeWorldImageDialogVisible = !1, e.data.changeWorldImageDialogLoading = !1, e.data.previousImagesTable = [], e.data.previousImagesFileId = "", y.$on("LOGIN", (function() {
                    e.previousImagesTable = [], e.previousImagesDialogVisible = !1
                })), y.getAvatarImages = function(e) {
                    return this.call(`file/${e.fileId}`, {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("AVATARIMAGE:GET", a), a
                    }))
                }, y.getWorldImages = function(e) {
                    return this.call(`file/${e.fileId}`, {
                        method: "GET",
                        params: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("WORLDIMAGE:GET", a), a
                    }))
                }, y.$on("AVATARIMAGE:GET", (function(t) {
                    e.storeAvatarImage(t)
                })), e.methods.storeAvatarImage = function(e) {
                    var t = e.json.versions[0].created_at,
                        a = e.params.fileId,
                        i = "",
                        s = e.json.name,
                        r = /Avatar - (.*) - Image -/g.exec(s);
                    r && (i = r[1]);
                    var o = {
                        ownerId: e.json.ownerId,
                        avatarName: i,
                        fileCreatedAt: t
                    };
                    return y.cachedAvatarNames.set(a, o), o
                }, e.methods.setAvatarImage = function(e) {
                    this.changeAvatarImageDialogLoading = !0;
                    var t = {
                        id: this.avatarDialog.id,
                        imageUrl: `${y.endpointDomain}/file/${this.previousImagesTableFileId}/${e.version}/file`
                    };
                    y.setAvatarImage(t).finally((() => {
                        this.changeAvatarImageDialogLoading = !1, this.changeAvatarImageDialogVisible = !1
                    }))
                }, e.methods.uploadAvatarImage = function() {
                    document.getElementById("AvatarImageUploadButton").click()
                }, e.methods.deleteAvatarImage = function() {
                    this.changeAvatarImageDialogLoading = !0;
                    var e = {
                        fileId: this.previousImagesTableFileId,
                        version: this.previousImagesTable[0].version
                    };
                    y.deleteFileVersion(e).then((e => {
                        this.previousImagesTableFileId = e.json.id;
                        var t = [];
                        e.json.versions.forEach((e => {
                            e.deleted || t.unshift(e)
                        })), this.checkPreviousImageAvailable(t)
                    })).finally((() => {
                        this.changeAvatarImageDialogLoading = !1
                    }))
                }, e.methods.setWorldImage = function(e) {
                    this.changeWorldImageDialogLoading = !0;
                    var t = {
                        id: this.worldDialog.id,
                        imageUrl: `${y.endpointDomain}/file/${this.previousImagesTableFileId}/${e.version}/file`
                    };
                    y.setWorldImage(t).finally((() => {
                        this.changeWorldImageDialogLoading = !1, this.changeWorldImageDialogVisible = !1
                    }))
                }, e.methods.uploadWorldImage = function() {
                    document.getElementById("WorldImageUploadButton").click()
                }, e.methods.deleteWorldImage = function() {
                    this.changeWorldImageDialogLoading = !0;
                    var e = {
                        fileId: this.previousImagesTableFileId,
                        version: this.previousImagesTable[0].version
                    };
                    y.deleteFileVersion(e).then((e => {
                        this.previousImagesTableFileId = e.json.id;
                        var t = [];
                        e.json.versions.forEach((e => {
                            e.deleted || t.unshift(e)
                        })), this.checkPreviousImageAvailable(t)
                    })).finally((() => {
                        this.changeWorldImageDialogLoading = !1
                    }))
                }, e.methods.compareCurrentImage = function(e) {
                    return `${y.endpointDomain}/file/${this.previousImagesTableFileId}/${e.version}/file` === this.avatarDialog.ref.imageUrl
                }, y.cachedAvatarNames = new Map, e.methods.getAvatarName = async function(e) {
                    var t = T(e);
                    if (!t) return {
                        ownerId: "",
                        avatarName: "-"
                    };
                    if (y.cachedAvatarNames.has(t)) return y.cachedAvatarNames.get(t);
                    var a = await y.getAvatarImages({
                        fileId: t
                    });
                    return this.storeAvatarImage(a)
                }, e.data.discordNamesDialogVisible = !1, e.data.discordNamesContent = "", e.methods.showDiscordNamesDialog = function() {
                    var {
                        friends: e
                    } = y.currentUser;
                    if (!1 !== Array.isArray(e)) {
                        var t = ["DisplayName,DiscordName"],
                            a = function(e) {
                                return !0 === /[\x00-\x1f,"]/.test(e) ? `"${e.replace(/"/g,'""')}"` : e
                            };
                        for (var i of e) {
                            var {
                                ref: s
                            } = this.friends.get(i), r = "";
                            if (void 0 !== s) {
                                var o = s.displayName;
                                if (s.statusDescription) {
                                    var n = /(?:^|\n*)(?:(?:[^\n:]|\|)*(?::|˸|discord)[\t\v\f\r]*)?([^\n]*(#|＃)(?: )?\d{4})/gi.exec(s.statusDescription);
                                    n && (r = n[1])
                                }
                                if (!r && s.bio) {
                                    var d = /(?:^|\n*)(?:(?:[^\n:]|\|)*(?::|˸|discord)[\t\v\f\r]*)?([^\n]*(#|＃)(?: )?\d{4})/gi.exec(s.bio);
                                    d && (r = d[1])
                                }
                                r && ("#" === (r = r.replace("＃", "#")).substring(0, 1) && (r = `${a(o)}${a(r)}`), t.push(`${a(o)},${a(r)}`))
                            }
                        }
                        this.discordNamesContent = t.join("\n"), this.discordNamesDialogVisible = !0
                    }
                }, e.data.userDialogLastActiveTab = "", e.data.userDialogLastAvatar = "", e.data.userDialogLastWorld = "", e.data.userDialogLastFavoriteWorld = "", e.methods.userDialogTabClick = function(e) {
                    var t = this.userDialog.id;
                    this.userDialogLastActiveTab !== e.label && ("Avatars" === e.label ? (this.setUserDialogAvatars(t), this.userDialogLastAvatar !== t && (this.userDialogLastAvatar = t, t === y.currentUser.id && 0 === this.userDialog.avatars.length ? this.refreshUserDialogAvatars() : this.setUserDialogAvatarsRemote(t))) : "Worlds" === e.label ? (this.setUserDialogWorlds(t), this.userDialogLastWorld !== t && (this.userDialogLastWorld = t, this.refreshUserDialogWorlds())) : "Favorite Worlds" === e.label ? this.userDialogLastFavoriteWorld !== t && (this.userDialogLastFavoriteWorld = t, this.getUserFavoriteWorlds(t)) : "JSON" === e.label && this.refreshUserDialogTreeData(), this.userDialogLastActiveTab = e.label)
                }, e.data.VRChatConfigFile = {}, e.data.VRChatConfigList = {
                    cache_size: {
                        name: "Max Cache Size [GB] (min 20)",
                        default: "20",
                        type: "number",
                        min: 20
                    },
                    cache_expiry_delay: {
                        name: "Cache Expiry [Days] (30 - 150)",
                        default: "30",
                        type: "number",
                        min: 30,
                        max: 150
                    },
                    cache_directory: {
                        name: "Custom Cache Folder Location",
                        default: "%AppData%\\..\\LocalLow\\VRChat\\vrchat"
                    },
                    dynamic_bone_max_affected_transform_count: {
                        name: "Dynamic Bones Limit Max Transforms (0 disable all transforms)",
                        default: "32",
                        type: "number",
                        min: 0
                    },
                    dynamic_bone_max_collider_check_count: {
                        name: "Dynamic Bones Limit Max Collider Collisions (0 disable all colliders)",
                        default: "8",
                        type: "number",
                        min: 0
                    },
                    fpv_steadycam_fov: {
                        name: "First-Person Steadycam FOV",
                        default: "50",
                        type: "number",
                        min: 30,
                        max: 110
                    }
                }, e.methods.readVRChatConfigFile = async function() {
                    this.VRChatConfigFile = {};
                    var e = await AppApi.ReadConfigFile();
                    if (e) try {
                        this.VRChatConfigFile = JSON.parse(e)
                    } catch {
                        throw this.$message({
                            message: "Invalid JSON in config.json",
                            type: "error"
                        }), new Error("Invalid JSON in config.json")
                    }
                }, e.methods.WriteVRChatConfigFile = function() {
                    var e = JSON.stringify(this.VRChatConfigFile, null, "\t");
                    AppApi.WriteConfigFile(e)
                }, e.data.VRChatConfigDialog = {
                    visible: !1
                }, y.$on("LOGIN", (function() {
                    e.VRChatConfigDialog.visible = !1
                })), e.methods.showVRChatConfig = async function() {
                    await this.readVRChatConfigFile(), this.$nextTick((() => G(this.$refs.VRChatConfigDialog.$el))), this.VRChatConfigDialog.visible = !0, this.VRChatUsedCacheSize || this.getVRChatCacheSize()
                }, e.methods.saveVRChatConfigFile = function() {
                    for (var e in this.VRChatConfigFile) "" === this.VRChatConfigFile[e] || "boolean" == typeof this.VRChatConfigFile[e] && !1 === this.VRChatConfigFile[e] ? delete this.VRChatConfigFile[e] : "string" != typeof this.VRChatConfigFile[e] || isNaN(this.VRChatConfigFile[e]) || (this.VRChatConfigFile[e] = parseInt(this.VRChatConfigFile[e], 10));
                    this.VRChatConfigDialog.visible = !1, this.WriteVRChatConfigFile()
                }, e.methods.getVRChatCacheDir = async function() {
                    await this.readVRChatConfigFile();
                    var e = "";
                    return this.VRChatConfigFile.cache_directory && (e = this.VRChatConfigFile.cache_directory), e
                }, e.data.VRChatResolutions = [{
                    name: "1280x720 (720p)",
                    width: 1280,
                    height: 720
                }, {
                    name: "1920x1080 (Default 1080p)",
                    width: "",
                    height: ""
                }, {
                    name: "2560x1440 (2K)",
                    width: 2560,
                    height: 1440
                }, {
                    name: "3840x2160 (4K)",
                    width: 3840,
                    height: 2160
                }], e.methods.getVRChatResolution = function(e) {
                    switch (e) {
                        case "1280x720":
                            return "1280x720 (720p)";
                        case "1920x1080":
                            return "1920x1080 (1080p)";
                        case "2560x1440":
                            return "2560x1440 (2K)";
                        case "3840x2160":
                            return "3840x2160 (4K)"
                    }
                    return `${e} (Custom)`
                }, e.methods.getVRChatCameraResolution = function() {
                    if (this.VRChatConfigFile.camera_res_height && this.VRChatConfigFile.camera_res_width) {
                        var e = `${this.VRChatConfigFile.camera_res_width}x${this.VRChatConfigFile.camera_res_height}`;
                        return this.getVRChatResolution(e)
                    }
                    return "1920x1080 (1080p)"
                }, e.methods.getVRChatScreenshotResolution = function() {
                    if (this.VRChatConfigFile.screenshot_res_height && this.VRChatConfigFile.screenshot_res_width) {
                        var e = `${this.VRChatConfigFile.screenshot_res_width}x${this.VRChatConfigFile.screenshot_res_height}`;
                        return this.getVRChatResolution(e)
                    }
                    return "1920x1080 (1080p)"
                }, e.methods.setVRChatCameraResolution = function(e) {
                    this.VRChatConfigFile.camera_res_height = e.height, this.VRChatConfigFile.camera_res_width = e.width
                }, e.methods.setVRChatScreenshotResolution = function(e) {
                    this.VRChatConfigFile.screenshot_res_height = e.height, this.VRChatConfigFile.screenshot_res_width = e.width
                }, e.data.youTubeApiKey = "", e.data.youTubeApiDialog = {
                    visible: !1
                }, y.$on("LOGOUT", (function() {
                    e.youTubeApiDialog.visible = !1
                })), e.methods.testYouTubeApiKey = async function() {
                    if (!this.youTubeApiKey) return this.$message({
                        message: "YouTube API key가 제거되었습니다.",
                        type: "success"
                    }), void(this.youTubeApiDialog.visible = !1);
                    await this.lookupYouTubeVideo("dQw4w9WgXcQ") ? (w.setString("VRCX_youtubeAPIKey", this.youTubeApiKey), this.$message({
                        message: "YouTube API key valid!",
                        type: "success"
                    }), this.youTubeApiDialog.visible = !1) : (this.youTubeApiKey = "", this.$message({
                        message: "유효하지 않은 YouTube API key 입니다.",
                        type: "error"
                    }))
                }, e.methods.changeYouTubeApi = function() {
                    w.setBool("VRCX_youtubeAPI", this.youTubeApi), w.setBool("VRCX_progressPie", this.progressPie), w.setBool("VRCX_progressPieFilter", this.progressPieFilter), this.updateVRLastLocation()
                }, e.methods.showYouTubeApiDialog = function() {
                    this.$nextTick((() => G(this.$refs.youTubeApiDialog.$el))), this.youTubeApiDialog.visible = !0
                }, e.methods.updateVRChatWorldCache = function() {
                    var e = this.worldDialog;
                    e.visible && (e.inCache = !1, e.cacheSize = 0, e.cacheLocked = !1, this.checkVRChatCache(e.ref).then((t => {
                        t[0] > 0 && (e.inCache = !0, e.cacheSize = `${(t[0]/1048576).toFixed(2)} MiB`), 1 === t[1] && (e.cacheLocked = !0)
                    })))
                }, e.methods.updateVRChatAvatarCache = function() {
                    var e = this.avatarDialog;
                    e.visible && (e.inCache = !1, e.cacheSize = 0, e.cacheLocked = !1, this.checkVRChatCache(e.ref).then((t => {
                        t[0] > 0 && (e.inCache = !0, e.cacheSize = `${(t[0]/1048576).toFixed(2)} MiB`), 1 === t[1] && (e.cacheLocked = !0)
                    })))
                }, e.methods.checkVRChatCache = async function(e) {
                    for (var t = await this.getVRChatCacheDir(), a = "", i = e.unityPackages.length - 1; i > -1; i--) {
                        var s = e.unityPackages[i];
                        if ("standalonewindows" === s.platform && this.compareUnityVersion(s.unityVersion)) {
                            a = s.assetUrl;
                            break
                        }
                    }
                    var r = T(a),
                        o = parseInt(S(a), 10);
                    return r && o ? AssetBundleCacher.CheckVRChatCache(r, o, t) : [-1, 0]
                }, e.methods.queueCacheDownload = function(e, t) {
                    if (!this.downloadQueue.has(e.id)) {
                        var a = (new Date).toJSON(),
                            i = e.id;
                        this.downloadQueue.set(e.id, {
                            ref: e,
                            type: t,
                            date: a,
                            userId: "",
                            location: i
                        }), this.downloadQueueTable.data = Array.from(this.downloadQueue.values())
                    }
                    this.downloadInProgress || this.downloadVRChatCache()
                }, y.getBundles = function(e) {
                    return this.call(`file/${e}`, {
                        method: "GET"
                    }).then((e => ({
                        json: e
                    })))
                }, e.data.cacheAutoDownloadHistory = new Set, e.methods.downloadVRChatCache = async function() {
                    if (0 !== this.downloadQueue.size) {
                        this.downloadProgress = 0, this.downloadIsProcessing = !1, this.downloadInProgress = !0, this.downloadCurrent = this.downloadQueue.values().next().value, this.downloadCurrent.id = this.downloadQueue.keys().next().value;
                        var {
                            ref: e
                        } = this.downloadCurrent;
                        if (this.downloadQueue.delete(e.id), this.downloadQueueTable.data = Array.from(this.downloadQueue.values()), "VRCXUpdate" === this.downloadCurrent.id) {
                            var t = this.downloadCurrent.updateZipUrl;
                            return await AssetBundleCacher.DownloadCacheFile("", t, "", 0, 0, "", m, !0), void this.downloadVRChatCacheProgress()
                        }
                        for (var a = "", i = e.unityPackages.length - 1; i > -1; i--) {
                            var s = e.unityPackages[i];
                            if ("standalonewindows" === s.platform && this.compareUnityVersion(s.unityVersion)) {
                                a = s.assetUrl;
                                break
                            }
                        }
                        var r = T(a),
                            o = parseInt(S(a), 10);
                        if (!r) return this.downloadCurrent.status = "Invalid asset url", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        if ("Auto" === this.downloadCurrent.type && this.cacheAutoDownloadHistory.has(a)) return this.downloadCurrent = {}, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        this.cacheAutoDownloadHistory.add(a);
                        try {
                            var n = await y.getBundles(r)
                        } catch (e) {
                            return this.downloadCurrent.status = "API request failed", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadInProgress = !1, void this.downloadVRChatCache()
                        }
                        var {
                            versions: d
                        } = n.json, l = "";
                        for (i = d.length - 1; i > -1; i--) {
                            var c = d[i];
                            if (c.version === o) {
                                l = c.file;
                                break
                            }
                        }
                        if (!l) return this.downloadCurrent.status = "Missing asset version", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        var {
                            url: t,
                            md5: u,
                            sizeInBytes: h
                        } = l, p = await this.getVRChatCacheDir();
                        await AssetBundleCacher.DownloadCacheFile(p, t, r, o, h, u, m, !1), this.downloadVRChatCacheProgress()
                    }
                }, e.methods.downloadVRChatCacheOldVersion = async function(e, t) {
                    for (var a = (c = await y.getWorld({
                            worldId: e
                        })).json, i = "", s = a.unityPackages.length - 1; s > -1; s--) {
                        var r = a.unityPackages[s];
                        if ("standalonewindows" === r.platform && this.compareUnityVersion(r.unityVersion) && !i) {
                            i = r.assetUrl;
                            break
                        }
                    }
                    if (i !== t) {
                        var o = T(i),
                            n = parseInt(S(i), 10),
                            d = T(t),
                            l = parseInt(S(t), 10);
                        if (o)
                            if (d) {
                                var c = await y.getBundles(d),
                                    {
                                        versions: u
                                    } = c.json,
                                    h = "";
                                for (s = u.length - 1; s > -1; s--) {
                                    var p = u[s];
                                    if (p.version === l) {
                                        h = p.file;
                                        break
                                    }
                                }
                                if (h) {
                                    var {
                                        url: g,
                                        md5: f,
                                        sizeInBytes: v
                                    } = h, I = await this.getVRChatCacheDir();
                                    await AssetBundleCacher.DeleteCache(I, o, n), await AssetBundleCacher.DownloadCacheFile(I, g, o, n, v, f, m, !1)
                                } else console.log("Missing asset version")
                            } else console.log("oldFileId invalid asset url");
                        else console.log("latestFileId invalid asset url")
                    } else console.log("File version is latest")
                }, e.methods.cancelVRChatCacheDownload = function(e) {
                    var t = y.parseLocation(e);
                    t.worldId && (this.downloadCurrent.id === t.worldId && AssetBundleCacher.CancelDownload(), this.downloadQueue.has(t.worldId) && (this.downloadQueue.delete(t.worldId), this.downloadQueueTable.data = Array.from(this.downloadQueue.values())))
                }, e.methods.cancelAllVRChatCacheDownload = function() {
                    for (var e of (void 0 !== this.downloadCurrent.id && this.cancelVRChatCacheDownload(this.downloadCurrent.id), this.downloadQueue.values())) this.cancelVRChatCacheDownload(e.ref.id)
                }, y.$on("NOTIFICATION", (function(t) {
                    var {
                        json: a
                    } = t;
                    "invite" === a.type && e.inviteDownloadWorldCache(a)
                })), e.methods.inviteDownloadWorldCache = function(e) {
                    if ("Always" === this.worldAutoCacheInvite || "Game Closed" === this.worldAutoCacheInvite && !this.isGameRunning || "Game Running" === this.worldAutoCacheInvite && this.isGameRunning) {
                        if (!this.worldAutoCacheInviteFilter && !y.cachedFavoritesByObjectId.has(e.senderUserId)) return;
                        this.autoDownloadWorldCache(e.details.worldId, "Invite", e.senderUserId)
                    }
                }, e.methods.portalDownloadWorldCache = function(e, t) {
                    var a = this.friends.has(t.id),
                        i = y.cachedFavoritesByObjectId.has(t.id);
                    ("Everyone" === this.portalAutoCache || "Friends" === this.portalAutoCache && a || "VIP" === this.portalAutoCache && i) && this.autoDownloadWorldCache(e.id, "Portal", t.id)
                }, e.methods.feedDownloadWorldCache = function(e, t) {
                    if ("Always" === this.worldAutoCacheGPS || "Game Closed" === this.worldAutoCacheGPS && !this.isGameRunning || "Game Running" === this.worldAutoCacheGPS && this.isGameRunning) {
                        if ("" === t || "offline" === t || "private" === t || !this.worldAutoCacheGPSFilter && !y.cachedFavoritesByObjectId.has(e)) return;
                        this.autoDownloadWorldCache(t, "GPS", e)
                    }
                }, e.methods.autoDownloadWorldCache = function(e, t, a) {
                    var i = y.parseLocation(e);
                    i.worldId && !this.downloadQueue.has(i.worldId) && this.downloadCurrent.id !== i.worldId && this.lastLocationDestination !== e && y.getWorld({
                        worldId: i.worldId
                    }).then((i => {
                        var {
                            ref: s
                        } = i;
                        this.checkVRChatCache(s).then((i => {
                            -1 === i[0] && 0 === i[1] && (this.downloadQueue.set(s.id, {
                                ref: s,
                                type: t,
                                userId: a,
                                location: e
                            }), this.downloadQueueTable.data = Array.from(this.downloadQueue.values()), this.downloadInProgress || this.downloadVRChatCache())
                        }))
                    }))
                }, e.methods.downloadSearchPage = function() {
                    this.searchWorldResults.forEach((e => {
                        y.getWorld({
                            worldId: e.id
                        }).then((e => {
                            this.queueCacheDownload(e.ref, "Search")
                        }))
                    }))
                }, e.data.downloadProgress = 0, e.data.downloadInProgress = !1, e.data.downloadIsProcessing = !1, e.data.downloadQueue = new Map, e.data.downloadCurrent = {}, e.methods.downloadVRChatCacheProgress = async function() {
                    var e = await AssetBundleCacher.CheckDownloadProgress();
                    switch (e) {
                        case -1:
                            this.downloadProgress = 100, this.downloadIsProcessing = !0;
                            break;
                        case -3:
                            if (this.worldDialog.id === this.downloadCurrent.id && this.updateVRChatWorldCache(), this.avatarDialog.id === this.downloadCurrent.id && this.updateVRChatAvatarCache(), "Manual" === this.downloadCurrent.type ? this.$message({
                                    message: "월드 캐싱 완료됨",
                                    type: "success"
                                }) : "Avatar" === this.downloadCurrent.type && this.$message({
                                    message: "아바타 캐싱 완료됨",
                                    type: "success"
                                }), this.isGameRunning && ("Invite" === this.downloadCurrent.type || "Portal" === this.downloadCurrent.type || "Manual" === this.downloadCurrent.type)) {
                                var t = {
                                    created_at: (new Date).toJSON(),
                                    type: "Event",
                                    data: `World finished caching ${this.downloadCurrent.ref.name}`
                                };
                                this.queueGameLogNoty(t), this.addGameLog(t), L.addGamelogEventToDatabase(t)
                            }
                            return this.downloadCurrent.status = "Success", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadProgress = 0, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        case -4:
                            return this.$message({
                                message: "다운로드 취소됨",
                                type: "info"
                            }), this.downloadCurrent.status = "Canceled", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadProgress = 0, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        case -10:
                            return this.$message({
                                message: "AssetBundleCacher를 찾을 수 없습니다.",
                                type: "error"
                            }), this.downloadCurrent = {}, this.downloadQueue = new Map, this.downloadQueueTable.data = [], this.downloadProgress = 0, void(this.downloadInProgress = !1);
                        case -11:
                            return this.$message({
                                message: "AssetBundleCacher_Data 폴더에 있는 'data.unity3d' 파일을 삭제하세요.",
                                type: "error"
                            }), this.downloadCurrent = {}, this.downloadQueue = new Map, this.downloadQueueTable.data = [], this.downloadProgress = 0, void(this.downloadInProgress = !1);
                        case -12:
                            if (this.worldDialog.id === this.downloadCurrent.id && this.updateVRChatWorldCache(), this.avatarDialog.id === this.downloadCurrent.id && this.updateVRChatAvatarCache(), "Manual" === this.downloadCurrent.type && this.$message({
                                    message: "파일이 이미 캐시에 있습니다.",
                                    type: "warning"
                                }), this.isGameRunning && ("Invite" === this.downloadCurrent.type || "Portal" === this.downloadCurrent.type)) {
                                t = {
                                    created_at: (new Date).toJSON(),
                                    type: "Event",
                                    data: `World already in cache ${this.downloadCurrent.ref.name}`
                                };
                                this.queueGameLogNoty(t), this.addGameLog(t), L.addGamelogEventToDatabase(t)
                            }
                            return this.downloadCurrent.status = "Already in cache", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadProgress = 0, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        case -13:
                            return this.$message({
                                message: "파일 처리에 실패하였습니다.",
                                type: "error"
                            }), this.downloadCurrent.status = "Failed to process", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadProgress = 0, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        case -14:
                            return this.$message({
                                message: "캐시에 파일 이동 실패",
                                type: "error"
                            }), this.downloadCurrent.status = "Failed to move into cache", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadProgress = 0, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        case -15:
                            return this.$message({
                                message: "다운로드 실패",
                                type: "error"
                            }), this.downloadCurrent.status = "Download failed", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent = {}, this.downloadProgress = 0, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        case -16:
                            return this.downloadCurrent.status = "Success", this.downloadCurrent.date = Date.now(), this.downloadHistoryTable.data.unshift(this.downloadCurrent), this.downloadCurrent.autoInstall ? this.restartVRCX() : (this.downloadDialog.visible = !1, this.showVRCXUpdateDialog()), this.downloadCurrent = {}, this.downloadProgress = 0, this.downloadInProgress = !1, void this.downloadVRChatCache();
                        default:
                            this.downloadProgress = e
                    }
                    p.iK((() => this.downloadVRChatCacheProgress()), 150)
                }, e.methods.showDownloadDialog = function() {
                    this.$nextTick((() => G(this.$refs.downloadDialog.$el))), this.downloadDialog.visible = !0
                }, e.data.downloadDialog = {
                    visible: !1
                }, e.methods.downloadProgressText = function() {
                    return this.downloadIsProcessing ? "Processing" : this.downloadProgress >= 0 ? `${this.downloadProgress}%` : ""
                }, e.methods.getDisplayName = function(e) {
                    if (e) {
                        var t = y.cachedUsers.get(e);
                        if (t.displayName) return t.displayName
                    }
                    return ""
                }, e.methods.deleteVRChatCache = async function(e) {
                    for (var t = await this.getVRChatCacheDir(), a = "", i = e.unityPackages.length - 1; i > -1; i--) {
                        var s = e.unityPackages[i];
                        if ("standalonewindows" === s.platform && this.compareUnityVersion(s.unityVersion)) {
                            a = s.assetUrl;
                            break
                        }
                    }
                    var r = T(a),
                        o = parseInt(S(a), 10);
                    await AssetBundleCacher.DeleteCache(t, r, o), this.getVRChatCacheSize(), this.updateVRChatWorldCache(), this.updateVRChatAvatarCache()
                }, e.methods.showDeleteAllVRChatCacheConfirm = function() {
                    this.$confirm("모든 VRChat 캐시를 삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: e => {
                            "confirm" === e && this.deleteAllVRChatCache()
                        }
                    })
                }, e.methods.deleteAllVRChatCache = async function() {
                    var e = await this.getVRChatCacheDir();
                    await AssetBundleCacher.DeleteAllCache(e), this.getVRChatCacheSize()
                }, e.methods.autoVRChatCacheManagement = function() {
                    this.autoSweepVRChatCache && this.sweepVRChatCache()
                }, e.methods.sweepVRChatCache = async function() {
                    var e = await this.getVRChatCacheDir();
                    await AssetBundleCacher.SweepCache(e), this.VRChatConfigDialog.visible && this.getVRChatCacheSize()
                }, e.data.VRChatUsedCacheSize = "", e.data.VRChatTotalCacheSize = "", e.data.VRChatCacheSizeLoading = !1, e.methods.getVRChatCacheSize = async function() {
                    this.VRChatCacheSizeLoading = !0;
                    var e = await this.getVRChatCacheDir(),
                        t = 20;
                    this.VRChatConfigFile.cache_size && (t = this.VRChatConfigFile.cache_size), this.VRChatTotalCacheSize = t;
                    var a = await AssetBundleCacher.GetCacheSize(e);
                    this.VRChatUsedCacheSize = (a / 1073741824).toFixed(2), this.VRChatCacheSizeLoading = !1
                }, y.$on("LOGIN", (function() {
                    e.downloadDialog.visible = !1
                })), e.methods.parseLocationUrl = function(e) {
                    var t = new URL(e),
                        a = t.pathname;
                    if ("/world/" === a.substring(5, 12)) return s = a.substring(12);
                    if ("/launch" === a.substring(5, 12)) {
                        var i = new URLSearchParams(t.search),
                            s = i.get("worldId"),
                            r = i.get("instanceId");
                        if (r) return `${s}:${r}`;
                        if (s) return s
                    }
                }, e.methods.parseUserUrl = function(e) {
                    var t = new URL(e).pathname;
                    if ("/user/" === t.substring(5, 11)) return t.substring(11)
                }, e.methods.parseAvatarUrl = function(e) {
                    var t = new URL(e).pathname;
                    if ("/avatar/" === t.substring(5, 13)) return t.substring(13)
                }, e.data.userFavoriteWorlds = [], e.methods.getUserFavoriteWorlds = async function(e) {
                    this.userDialog.isFavoriteWorldsLoading = !0, this.userFavoriteWorlds = [];
                    for (var t = [], a = {
                            ownerId: e
                        }, i = await y.call("favorite/groups", {
                            method: "GET",
                            params: a
                        }), s = 0; s < i.length; ++s) {
                        var r = i[s];
                        if ("world" === r.type) {
                            a = {
                                n: 100,
                                offset: 0,
                                userId: e,
                                tag: r.name
                            };
                            try {
                                var o = await y.getFavoriteWorlds(a);
                                t.push([r.displayName, r.visibility, o.json])
                            } catch (e) {}
                        }
                    }
                    this.userFavoriteWorlds = t, this.userDialog.isFavoriteWorldsLoading = !1
                }, e.data.worldGroupVisibilityOptions = ["private", "friends", "public"], e.methods.userFavoriteWorldsStatus = function(e) {
                    var t = {};
                    return "public" === e ? t.online = !0 : "friends" === e ? t.joinme = !0 : t.busy = !0, t
                }, e.methods.changeWorldGroupVisibility = function(e, t) {
                    var a = {
                        type: "world",
                        group: e,
                        visibility: t
                    };
                    y.saveFavoriteGroup(a).then((e => (this.$message({
                        message: "그룹 표시 유형이 변경되었습니다.",
                        type: "success"
                    }), e)))
                }, e.methods.refreshInstancePlayerCount = function(e) {
                    var t = y.parseLocation(e);
                    t.worldId && y.getInstance({
                        worldId: t.worldId,
                        instanceId: t.instanceId
                    })
                }, e.data.galleryDialog = {}, e.data.galleryDialogVisible = !1, e.data.galleryDialogGalleryLoading = !1, e.data.galleryDialogIconsLoading = !1, y.$on("LOGIN", (function() {
                    e.galleryTable = []
                })), e.methods.showGalleryDialog = function() {
                    this.galleryDialogVisible = !0, this.refreshGalleryTable(), this.refreshVRCPlusIconsTable()
                }, e.methods.refreshGalleryTable = function() {
                    this.galleryDialogGalleryLoading = !0;
                    y.getFileList({
                        n: 100,
                        tag: "gallery"
                    })
                }, y.$on("FILES:LIST", (function(t) {
                    "gallery" === t.params.tag && (e.galleryTable = t.json.reverse(), e.galleryDialogGalleryLoading = !1)
                })), e.methods.setProfilePicOverride = function(e) {
                    y.currentUser.$isVRCPlus || this.$message({
                        message: "VRCPlus가 필요합니다.",
                        type: "error"
                    });
                    var t = "";
                    e && (t = `${y.endpointDomain}/file/${e}/1`), t !== y.currentUser.profilePicOverride && y.saveCurrentUser({
                        profilePicOverride: t
                    }).then((e => (this.$message({
                        message: "프로필 사진이 변경되었습니다.",
                        type: "success"
                    }), e)))
                }, e.methods.deleteGalleryImage = function(e) {
                    y.deleteFile(e).then((e => (y.$emit("GALLERYIMAGE:DELETE", e), e)))
                }, y.$on("GALLERYIMAGE:DELETE", (function(t) {
                    for (var a = e.galleryTable, {
                            length: i
                        } = a, s = 0; s < i; ++s)
                        if (t.fileId === a[s].id) {
                            a.splice(s, 1);
                            break
                        }
                })), e.methods.compareCurrentProfilePic = function(e) {
                    return e === T(y.currentUser.profilePicOverride)
                }, e.methods.onFileChangeGallery = function(t) {
                    var a = function() {
                            document.querySelector("#GalleryUploadButton") && (document.querySelector("#GalleryUploadButton").value = "")
                        },
                        i = t.target.files || t.dataTransfer.files;
                    if (i.length) {
                        if (i[0].size >= 1e7) return e.$message({
                            message: "파일이 너무 큽니다.",
                            type: "error"
                        }), void a();
                        if (!i[0].type.match(/image.*/)) return e.$message({
                            message: "파일이 이미지가 아닙니다.",
                            type: "error"
                        }), void a();
                        var s = new FileReader;
                        s.onload = function() {
                            var t = btoa(s.result);
                            y.uploadGalleryImage(t).then((t => (e.$message({
                                message: "갤러리 이미지가 업로드 되었습니다.",
                                type: "success"
                            }), t)))
                        }, s.readAsBinaryString(i[0]), a()
                    }
                }, e.methods.displayGalleryUpload = function() {
                    document.getElementById("GalleryUploadButton").click()
                }, y.uploadGalleryImage = function(e) {
                    return this.call("gallery", {
                        uploadImage: !0,
                        imageData: e
                    }).then((t => {
                        var a = {
                            json: t,
                            params: e
                        };
                        return this.$emit("GALLERYIMAGE:ADD", a), a
                    }))
                }, y.$on("GALLERYIMAGE:ADD", (function(t) {
                    0 !== Object.keys(e.galleryTable).length && e.galleryTable.push(t.json)
                })), e.methods.replaceBioSymbols = function(e) {
                    if (e) {
                        var t = {
                                "@": "＠",
                                "#": "＃",
                                $: "＄",
                                "%": "％",
                                "&": "＆",
                                "=": "＝",
                                "+": "＋",
                                "/": "⁄",
                                "\\": "＼",
                                ";": ";",
                                ":": "˸",
                                ",": "‚",
                                "?": "？",
                                "!": "ǃ",
                                '"': "＂",
                                "<": "≺",
                                ">": "≻",
                                ".": "․",
                                "^": "＾",
                                "{": "｛",
                                "}": "｝",
                                "[": "［",
                                "]": "］",
                                "(": "（",
                                ")": "）",
                                "|": "｜",
                                "*": "∗"
                            },
                            a = e;
                        for (var i in t) {
                            var s = new RegExp(t[i], "g");
                            a = a.replace(s, i)
                        }
                        return a.replace(/ {1,}/g, " ").trimRight()
                    }
                }, e.methods.checkCanInvite = function(e) {
                    var t = y.parseLocation(e);
                    return ("invite" === t.accessType || "friends" === t.accessType) && t.userId !== y.currentUser.id
                }, e.methods.setAsideWidth = function() {
                    document.getElementById("aside").style.width = `${this.asideWidth}px`, w.setInt("VRCX_asidewidth", this.asideWidth)
                }, e.data.VRCXUpdateDialog = {
                    visible: !1,
                    updatePending: !1,
                    release: "",
                    releases: []
                }, e.data.checkingForVRCXUpdate = !1, e.data.branches = {
                    Stable: {
                        name: "Stable",
                        urlReleases: "https://vrcx.pypy.moe/releases/pypy-vrc.json",
                        urlLatest: "https://vrcx.pypy.moe/releases/latest/pypy-vrc.json"
                    },
                    Beta: {
                        name: "Beta",
                        urlReleases: "https://vrcx.pypy.moe/releases/natsumi-sama.json",
                        urlLatest: "https://vrcx.pypy.moe/releases/latest/natsumi-sama.json"
                    }
                }, e.methods.showVRCXUpdateDialog = async function() {
                    this.$nextTick((() => G(this.$refs.VRCXUpdateDialog.$el)));
                    var e = this.VRCXUpdateDialog;
                    e.visible = !0, e.updatePending = await AppApi.CheckForUpdateExe(), this.loadBranchVersions()
                }, e.methods.downloadVRCXUpdate = function(e, t, a, i) {
                    var s = {
                        id: "VRCXUpdate",
                        name: t
                    };
                    this.downloadQueue.set("VRCXUpdate", {
                        ref: s,
                        type: a,
                        updateZipUrl: e,
                        autoInstall: i
                    }), this.downloadQueueTable.data = Array.from(this.downloadQueue.values()), this.downloadInProgress || this.downloadVRChatCache()
                }, e.methods.installVRCXUpdate = function() {
                    for (var e of this.VRCXUpdateDialog.releases)
                        if (e.name === this.VRCXUpdateDialog.release) {
                            for (var t of e.assets)
                                if ("application/x-msdownload" === t.content_type && "uploaded" === t.state) {
                                    var a = t.browser_download_url;
                                    break
                                } if (!a) return;
                            var i = e.name;
                            this.downloadVRCXUpdate(a, i, "Manual", !1), this.VRCXUpdateDialog.visible = !1, this.showDownloadDialog()
                        }
                }, e.methods.restartVRCX = function() {
                    AppApi.RestartApplication()
                }, e.methods.loadBranchVersions = async function() {
                    var t = this.VRCXUpdateDialog,
                        a = this.branches[this.branch].urlReleases;
                    this.checkingForVRCXUpdate = !0;
                    var i = await C.execute({
                        url: a,
                        method: "GET",
                        headers: {
                            "User-Agent": m
                        }
                    });
                    this.checkingForVRCXUpdate = !1;
                    var s = JSON.parse(i.data);
                    this.debugWebRequests && console.log(s, i);
                    var r = [];
                    if ("object" != typeof s || s.message) e.$message({
                        message: `업데이트 확인에 실패하였습니다. "${s.message}"`,
                        type: "error"
                    });
                    else {
                        for (var o of s)
                            for (var n of o.assets) "application/x-msdownload" === n.content_type && "uploaded" === n.state && r.push(o);
                        t.releases = r, t.release = s[0].name, w.getString("VRCX_branch") !== this.branch && w.setString("VRCX_branch", this.branch)
                    }
                }, e.methods.saveAutoUpdateVRCX = function() {
                    w.setString("VRCX_autoUpdateVRCX", this.autoUpdateVRCX)
                }, e.methods.checkForVRCXUpdate = async function() {
                    if (!await AppApi.CheckForUpdateExe()) {
                        var e = this.branches[this.branch].urlLatest;
                        this.checkingForVRCXUpdate = !0;
                        var t = await C.execute({
                            url: e,
                            method: "GET",
                            headers: {
                                "User-Agent": m
                            }
                        });
                        this.checkingForVRCXUpdate = !1;
                        var a = JSON.parse(t.data);
                        if (this.debugWebRequests && console.log(a, t), a === Object(a) && a.name && a.published_at && (this.latestAppVersion = `${a.name} (${function(e,t){var a=new Date(e);if(isNaN(a))return i(e);var s=a.getHours(),r={YYYY:String(1e4+a.getFullYear()).substr(-4),MM:String(101+a.getMonth()).substr(-2),DD:String(100+a.getDate()).substr(-2),HH24:String(100+s).substr(-2),HH:String(100+(s>12?s-12:s)).substr(-2),MI:String(100+a.getMinutes()).substr(-2),SS:String(100+a.getSeconds()).substr(-2),AMPM:s>=12?"PM":"AM"};return t.replace(/YYYY|MM|DD|HH24|HH|MI|SS|AMPM/g,(e=>r[e]||e))}(a.published_at,"YYYY-MM-DD HH24:MI:SS")})`, a.name > this.appVersion)) {
                            for (var s of a.assets)
                                if ("application/x-msdownload" === s.content_type && "uploaded" === s.state) {
                                    var r = s.browser_download_url;
                                    break
                                } if (!r) return;
                            this.notifyMenu("settings");
                            var o = a.name,
                                n = "Auto";
                            if ("Notify" === this.autoUpdateVRCX) this.showVRCXUpdateDialog();
                            else if ("Auto Download" === this.autoUpdateVRCX) {
                                var d = !1;
                                this.downloadVRCXUpdate(r, o, n, d)
                            } else if ("Auto Install" === this.autoUpdateVRCX) {
                                d = !0;
                                this.downloadVRCXUpdate(r, o, n, d)
                            }
                        }
                    }
                }, e.methods.compareUnityVersion = function(e) {
                    var t = y.cachedConfig.sdkUnityVersion.replace(/\D/g, ""),
                        a = e.replace(/\D/g, "");
                    return parseInt(a, 10) <= parseInt(t, 10)
                }, e.methods.userImage = function(e) {
                    return this.displayVRCPlusIconsAsAvatar && e.userIcon ? e.userIcon : e.profilePicOverride ? e.profilePicOverride : e.currentAvatarThumbnailImageUrl
                }, e.methods.userImageFull = function(e) {
                    return this.displayVRCPlusIconsAsAvatar && e.userIcon ? e.userIcon : e.profilePicOverride ? e.profilePicOverride : e.currentAvatarImageUrl
                }, e.methods.showConsole = function() {
                    AppApi.ShowDevTools(), this.debug || this.debugWebRequests || this.debugWebSocket || this.debugUserDiff || (console.log("%cCareful! This might not do what you think.", "background-color: red; color: yellow; font-size: 32px; font-weight: bold"), console.log("%cIf someone told you to copy-paste something here, it can give them access to your account.", "font-size: 20px;"))
                }, e.methods.clearVRCXCache = function() {
                    y.cachedUsers.forEach(((e, t) => {
                        this.friends.has(t) || this.lastLocation.playerList.has(e.displayName) || t === y.currentUser.id || y.cachedUsers.delete(t)
                    })), y.cachedWorlds.forEach(((e, t) => {
                        y.cachedFavoritesByObjectId.has(t) || e.authorId === y.currentUser.id || y.cachedWorlds.delete(t)
                    })), y.cachedAvatars.forEach(((e, t) => {
                        y.cachedFavoritesByObjectId.has(t) || e.authorId === y.currentUser.id || y.cachedAvatars.delete(t)
                    })), y.cachedAvatarNames = new Map
                }, e.data.sqliteTableSizes = {}, e.methods.getSqliteTableSizes = async function() {
                    this.sqliteTableSizes = {
                        gps: await L.getGpsTableSize(),
                        status: await L.getStatusTableSize(),
                        avatar: await L.getAvatarTableSize(),
                        onlineOffline: await L.getOnlineOfflineTableSize(),
                        friendLogHistory: await L.getFriendLogHistoryTableSize(),
                        notification: await L.getNotificationTableSize(),
                        location: await L.getLocationTableSize(),
                        joinLeave: await L.getJoinLeaveTableSize(),
                        portalSpawn: await L.getPortalSpawnTableSize(),
                        videoPlay: await L.getVideoPlayTableSize(),
                        event: await L.getEventTableSize()
                    }
                }, e.data.ipcEnabled = !1, e.methods.ipcEvent = function(e) {
                    try {
                        var t = JSON.parse(e)
                    } catch {
                        console.error(`IPC invalid JSON, ${e}`)
                    }
                    switch (t.type) {
                        case "OnEvent":
                            this.debugPhotonLogging && 6 !== t.OnEventData.Code && 7 !== t.OnEventData.Code && console.log("OnEvent", t.OnEventData.Code, t.OnEventData), 7 !== t.OnEventData.Code && this.photonEventPulse(), this.parsePhotonEvent(t.OnEventData, t.dt);
                            break;
                        case "OnOperationResponse":
                            this.debugPhotonLogging && console.log("OnOperationResponse", t.OnOperationResponseData.OperationCode, t.OnOperationResponseData), this.parseOperationResponse(t.OnOperationResponseData, t.dt), this.photonEventPulse();
                            break;
                        case "Ping":
                            this.photonLoggingEnabled || (this.photonLoggingEnabled = !0, w.setBool("VRCX_photonLoggingEnabled", !0)), this.ipcEnabled = !0, this.ipcTimeout = 60;
                            break;
                        case "LaunchCommand":
                            AppApi.FocusWindow(), this.eventLaunchCommand(t.command)
                    }
                }, e.data.photonEventCount = 0, e.data.photonEventIcon = !1, e.methods.photonEventPulse = function() {
                    this.photonEventCount++, this.photonEventIcon = !0, p.iK((() => this.photonEventIcon = !1), 150)
                }, e.methods.parseOperationResponse = function(e, t) {
                    if (226 === e.OperationCode) {
                        if (void 0 !== e.Parameters[248] && void 0 !== e.Parameters[248][248] && this.setPhotonLobbyMaster(e.Parameters[248][248]), void 0 !== e.Parameters[254] && (this.photonLobbyCurrentUser = e.Parameters[254]), void 0 !== e.Parameters[249])
                            for (var a in e.Parameters[249]) {
                                var i = parseInt(a, 10),
                                    s = e.Parameters[249][a];
                                this.parsePhotonUser(i, s.user, t), this.parsePhotonAvatarChange(i, s.user, s.avatarDict, t), this.parsePhotonAvatar(s.avatarDict), this.parsePhotonAvatar(s.favatarDict), void 0 !== s.inVRMode && this.photonLobbyInVrMode.set(i, s.inVRMode), this.photonLobbyJointime.set(i, {
                                    joinTime: Date.parse(t),
                                    hasInstantiated: !1,
                                    inVRMode: s.inVRMode,
                                    avatarEyeHeight: s.avatarEyeHeight
                                })
                            }
                        void 0 !== e.Parameters[252] && this.parsePhotonLobbyIds(e.Parameters[252])
                    }
                }, y.$on("LOGIN", (async function() {
                    var t = await AppApi.GetLaunchCommand();
                    t && e.eventLaunchCommand(t)
                })), e.methods.eventLaunchCommand = function(e) {
                    if (y.isLoggedIn) {
                        var t = e.split("/"),
                            a = (e = t[0], t[1]);
                        switch (e) {
                            case "world":
                                this.showWorldDialog(a);
                                break;
                            case "avatar":
                                this.showAvatarDialog(a);
                                break;
                            case "user":
                                this.showUserDialog(a)
                        }
                    }
                }, e.methods.toggleAvatarCopying = function() {
                    y.saveCurrentUser({
                        allowAvatarCopying: !y.currentUser.allowAvatarCopying
                    }).then((e => e))
                }, e.data.previousInstancesUserDialogTable = {
                    data: [],
                    filters: [{
                        prop: "name",
                        value: ""
                    }],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "created_at",
                            order: "descending"
                        }
                    },
                    pageSize: 10,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [10, 25, 50, 100]
                    }
                }, e.data.previousInstancesUserDialog = {
                    visible: !1,
                    loading: !1,
                    userRef: {}
                }, e.methods.showPreviousInstancesUserDialog = function(e) {
                    this.$nextTick((() => G(this.$refs.previousInstancesUserDialog.$el)));
                    var t = this.previousInstancesUserDialog;
                    t.userRef = e, t.visible = !0, t.loading = !0, this.refreshPreviousInstancesUserTable()
                }, e.methods.refreshPreviousInstancesUserTable = function() {
                    var e = this.previousInstancesUserDialog;
                    L.getpreviousInstancesByUserId(e.userRef).then((t => {
                        var a = [];
                        for (var i of t.values()) i.$location = y.parseLocation(i.location), i.time > 0 ? i.timer = r(i.time) : i.timer = "", a.push(i);
                        a.sort(_), this.previousInstancesUserDialogTable.data = a, e.loading = !1
                    }))
                }, e.methods.getDisplayNameFromUserId = function(e) {
                    var t = e,
                        a = y.cachedUsers.get(e);
                    return void 0 !== a && void 0 !== a.displayName && (t = a.displayName), t
                }, e.methods.confirmDeleteGameLogUserInstance = function(e) {
                    this.$confirm("삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && (L.deleteGameLogInstance({
                                id: this.previousInstancesUserDialog.userRef.id,
                                displayName: this.previousInstancesUserDialog.userRef.displayName,
                                location: e.location
                            }), a(this.previousInstancesUserDialogTable.data, e))
                        }
                    })
                }, e.data.previousInstancesWorldDialogTable = {
                    data: [],
                    filters: [{
                        prop: "name",
                        value: ""
                    }],
                    tableProps: {
                        stripe: !0,
                        size: "mini",
                        defaultSort: {
                            prop: "created_at",
                            order: "descending"
                        }
                    },
                    pageSize: 10,
                    paginationProps: {
                        small: !0,
                        layout: "sizes,prev,pager,next,total",
                        pageSizes: [10, 25, 50, 100]
                    }
                }, e.data.previousInstancesWorldDialog = {
                    visible: !1,
                    loading: !1,
                    worldRef: {}
                }, e.methods.showPreviousInstancesWorldDialog = function(e) {
                    this.$nextTick((() => G(this.$refs.previousInstancesWorldDialog.$el)));
                    var t = this.previousInstancesWorldDialog;
                    t.worldRef = e, t.visible = !0, t.loading = !0, this.refreshPreviousInstancesWorldTable()
                }, e.methods.refreshPreviousInstancesWorldTable = function() {
                    var e = this.previousInstancesWorldDialog;
                    L.getpreviousInstancesByWorldId(e.worldRef).then((t => {
                        var a = [];
                        for (var i of t.values()) i.$location = y.parseLocation(i.location), i.time > 0 ? i.timer = r(i.time) : i.timer = "", a.push(i);
                        a.sort(_), this.previousInstancesWorldDialogTable.data = a, e.loading = !1
                    }))
                }, e.methods.confirmDeleteGameLogWorldInstance = function(e) {
                    this.$confirm("삭제합니다. 계속 하시겠습니까?", "계속 하시겠습니까?", {
                        confirmButtonText: "확인",
                        cancelButtonText: "취소",
                        type: "info",
                        callback: t => {
                            "confirm" === t && (L.deleteGameLogInstanceByInstanceId({
                                location: e.location
                            }), a(this.previousInstancesWorldDialogTable.data, e))
                        }
                    })
                }, e.data.dtHour12 = w.getBool("VRCX_dtHour12"), e.methods.setDatetimeFormat = async function() {
                    var e = await AppApi.CurrentCulture(),
                        t = w.getBool("VRCX_dtHour12");
                    if (void 0 !== this.dtHour12) {
                        t !== this.dtHour12 && (w.setBool("VRCX_dtHour12", this.dtHour12), this.updateVRConfigVars());
                        t = this.dtHour12
                    }
                    o().filter("formatDate", (function(a, i) {
                        if (!a) return "-";
                        var s = new Date(a);
                        return "long" === i ? s.toLocaleDateString(e, {
                            month: "2-digit",
                            day: "2-digit",
                            year: "numeric",
                            hour: "numeric",
                            minute: "numeric",
                            second: "numeric",
                            hourCycle: t ? "h12" : "h23"
                        }) : "short" === i ? s.toLocaleDateString(e, {
                            month: "2-digit",
                            day: "2-digit",
                            hour: "numeric",
                            minute: "numeric",
                            hourCycle: t ? "h12" : "h23"
                        }).replace(" AM", "am").replace(" PM", "pm").replace(",", "") : "-"
                    }))
                }, e.methods.setDatetimeFormat(), e.data.enableCustomEndpoint = w.getBool("VRCX_enableCustomEndpoint"), e.methods.toggleCustomEndpoint = function() {
                    this.enableCustomEndpoint = !this.enableCustomEndpoint, w.setBool("VRCX_enableCustomEndpoint", this.enableCustomEndpoint)
                }, e.data.mouseDownClass = [], e.data.mouseUpClass = [], e.methods.dialogMouseDown = function(e) {
                    this.mouseDownClass = [...e.target.classList]
                }, e.methods.dialogMouseUp = function(e) {
                    this.mouseUpClass = [...e.target.classList]
                }, e.methods.beforeDialogClose = function(e) {
                    (this.mouseDownClass.includes("el-dialog__wrapper") && this.mouseUpClass.includes("el-dialog__wrapper") || this.mouseDownClass.includes("el-dialog__close") && this.mouseUpClass.includes("el-dialog__close")) && e()
                }, e = new(o())(e), window.$app = e
            }()
        }
    },
    e => {
        var t = t => e(e.s = t),
            a = (t(1326), t(5850)),
            i = window;
        for (var s in a) i[s] = a[s];
        a.__esModule && Object.defineProperty(i, "__esModule", {
            value: !0
        })
    }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,